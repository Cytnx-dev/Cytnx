<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="namespacecytnx_1_1algo" kind="namespace" language="C++">
    <compoundname>cytnx::algo</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecytnx_1_1algo_1a72a0c42c4b78524bcac444a5c8ed1c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::algo::Sort</definition>
        <argsstring>(const Tensor &amp;Tin)</argsstring>
        <name>Sort</name>
        <qualifiedname>cytnx::algo::Sort</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Tin</declname>
        </param>
        <briefdescription>
<para>sort <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> along last axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Tin</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> #1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="22" column="12" declfile="include/algo.hpp" declline="22" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1_1algo_1a17ac6e68684bf5d5cf7392bd218e309f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::algo::Concatenate</definition>
        <argsstring>(Tensor T1, Tensor T2)</argsstring>
        <name>Concatenate</name>
        <qualifiedname>cytnx::algo::Concatenate</qualifiedname>
        <param>
          <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
          <declname>T1</declname>
        </param>
        <param>
          <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
          <declname>T2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="24" column="12" declfile="include/algo.hpp" declline="24" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1_1algo_1a993ff4c266490e7fee38ab2f20e6aa50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::algo::Vstack</definition>
        <argsstring>(const std::vector&lt; Tensor &gt; &amp;In_tensors)</argsstring>
        <name>Vstack</name>
        <qualifiedname>cytnx::algo::Vstack</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>In_tensors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="26" column="12" declfile="include/algo.hpp" declline="26" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1_1algo_1aab9f9b299fa60c565206f5f0c021618b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::algo::Hstack</definition>
        <argsstring>(const std::vector&lt; Tensor &gt; &amp;In_tensors)</argsstring>
        <name>Hstack</name>
        <qualifiedname>cytnx::algo::Hstack</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>In_tensors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="27" column="12" declfile="include/algo.hpp" declline="27" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1_1algo_1a63774284b4470db6265bc944b60ac476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::algo::Vsplit_</definition>
        <argsstring>(std::vector&lt; Tensor &gt; &amp;out, const Tensor &amp;Tin, const std::vector&lt; cytnx_uint64 &gt; &amp;dims)</argsstring>
        <name>Vsplit_</name>
        <qualifiedname>cytnx::algo::Vsplit_</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Tin</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="30" column="10" declfile="include/algo.hpp" declline="30" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1_1algo_1a030124e0b8e894d35837134e3111e3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::algo::Hsplit_</definition>
        <argsstring>(std::vector&lt; Tensor &gt; &amp;out, const Tensor &amp;Tin, const std::vector&lt; cytnx_uint64 &gt; &amp;dims)</argsstring>
        <name>Hsplit_</name>
        <qualifiedname>cytnx::algo::Hsplit_</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Tin</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="31" column="10" declfile="include/algo.hpp" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1_1algo_1a977a0c66043b8238214658b1178cd073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt; Tensor &gt; cytnx::algo::Vsplit</definition>
        <argsstring>(const Tensor &amp;Tin, const std::vector&lt; cytnx_uint64 &gt; &amp;dims)</argsstring>
        <name>Vsplit</name>
        <qualifiedname>cytnx::algo::Vsplit</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Tin</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="32" column="17" declfile="include/algo.hpp" declline="32" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1_1algo_1a882e6a0d33e659d35f7f1df18a51152a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt; Tensor &gt; cytnx::algo::Hsplit</definition>
        <argsstring>(const Tensor &amp;Tin, const std::vector&lt; cytnx_uint64 &gt; &amp;dims)</argsstring>
        <name>Hsplit</name>
        <qualifiedname>cytnx::algo::Hsplit</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Tin</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/algo.hpp" line="33" column="17" declfile="include/algo.hpp" declline="33" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/algo.hpp" line="11" column="3"/>
  </compounddef>
</doxygen>
