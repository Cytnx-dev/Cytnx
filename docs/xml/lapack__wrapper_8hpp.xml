<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="lapack__wrapper_8hpp" kind="file" language="C++">
    <compoundname>lapack_wrapper.hpp</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">complex</includes>
    <includes local="no">complex.h</includes>
    <includes local="no">algorithm</includes>
    <includes refid="Type_8hpp" local="yes">Type.hpp</includes>
    <includes local="no">lapacke.h</includes>
    <includes local="no">cblas.h</includes>
    <incdepgraph>
      <node id="6">
        <label>Type.hpp</label>
        <link refid="Type_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cytnx_error.hpp</label>
        <link refid="cytnx__error_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/lapack_wrapper.hpp</label>
        <link refid="lapack__wrapper_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>cblas.h</label>
      </node>
      <node id="9">
        <label>climits</label>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
      <node id="4">
        <label>complex.h</label>
      </node>
      <node id="14">
        <label>cstdio</label>
      </node>
      <node id="15">
        <label>cstdlib</label>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="20">
        <label>lapacke.h</label>
      </node>
      <node id="17">
        <label>stdarg.h</label>
      </node>
      <node id="19">
        <label>stdexcept</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="12">
        <label>typeindex</label>
      </node>
      <node id="10">
        <label>typeinfo</label>
      </node>
      <node id="11">
        <label>unordered_map</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t blas_int</definition>
        <argsstring></argsstring>
        <name>blas_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="20" column="17" bodyfile="include/lapack_wrapper.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a7f411b6d21126508ebc3d6bfe0f87b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const double *alpha, const double *a, const blas_int *lda, const double *b, const blas_int *ldb, const double *beta, double *c, const blas_int *ldc)</argsstring>
        <name>dgemm_</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="27" column="6" declfile="include/lapack_wrapper.hpp" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a7c1d55acf18a2d67d1f8f9038ac2e4d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const float *alpha, const float *a, const blas_int *lda, const float *b, const blas_int *ldb, const float *beta, float *c, const blas_int *ldc)</argsstring>
        <name>sgemm_</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="31" column="6" declfile="include/lapack_wrapper.hpp" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a787eb106ccd2cff5a99d0a27b2436f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const std::complex&lt; double &gt; *alpha, const std::complex&lt; double &gt; *a, const blas_int *lda, const std::complex&lt; double &gt; *b, const blas_int *ldb, const std::complex&lt; double &gt; *beta, std::complex&lt; double &gt; *c, const blas_int *ldc)</argsstring>
        <name>zgemm_</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="34" column="6" declfile="include/lapack_wrapper.hpp" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a48fa0961c58e7d8e680569602b422536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgemm_</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const std::complex&lt; float &gt; *alpha, const std::complex&lt; float &gt; *a, const blas_int *lda, const std::complex&lt; float &gt; *b, const blas_int *ldb, const std::complex&lt; float &gt; *beta, std::complex&lt; float &gt; *c, const blas_int *ldc)</argsstring>
        <name>cgemm_</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="38" column="6" declfile="include/lapack_wrapper.hpp" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1abb30c4dff856ad084391f86c42f904bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dasum_</definition>
        <argsstring>(const blas_int *n, const double *x, const blas_int *incx)</argsstring>
        <name>dasum_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="49" column="8" declfile="include/lapack_wrapper.hpp" declline="49" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a02cdc9e833f168ef0e55b9f12fe01c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scopy_</definition>
        <argsstring>(const blas_int *n, const float *x, const blas_int *incx, float *y, const blas_int *incy)</argsstring>
        <name>scopy_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="51" column="6" declfile="include/lapack_wrapper.hpp" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1abec92cc08b08e759893691fdd804f981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dcopy_</definition>
        <argsstring>(const blas_int *n, const double *x, const blas_int *incx, double *y, const blas_int *incy)</argsstring>
        <name>dcopy_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="53" column="6" declfile="include/lapack_wrapper.hpp" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a35cad2a4e2262b1d7351ab8b6bef8902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void daxpy_</definition>
        <argsstring>(const blas_int *n, const double *alpha, const double *x, const blas_int *incx, double *y, const blas_int *incy)</argsstring>
        <name>daxpy_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="58" column="6" declfile="include/lapack_wrapper.hpp" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a6c4734599b75c3812e8fd1bbc886b2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saxpy_</definition>
        <argsstring>(const blas_int *n, const float *alpha, const float *x, const blas_int *incx, float *y, const blas_int *incy)</argsstring>
        <name>saxpy_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="60" column="6" declfile="include/lapack_wrapper.hpp" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1ad3c1d15065494273285bd8ccc57112e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zaxpy_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *alpha, const std::complex&lt; double &gt; *x, const blas_int *incx, std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zaxpy_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="62" column="6" declfile="include/lapack_wrapper.hpp" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a576a4587b457fd56eee59735eba09207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void caxpy_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *alpha, const std::complex&lt; float &gt; *x, const blas_int *incx, std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>caxpy_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="64" column="6" declfile="include/lapack_wrapper.hpp" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1ae9590a07486a65e6a4f7fcdde798ac9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dscal_</definition>
        <argsstring>(const blas_int *n, const double *a, double *x, const blas_int *incx)</argsstring>
        <name>dscal_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="66" column="6" declfile="include/lapack_wrapper.hpp" declline="66" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a793d5a23b92929e380f7b01351fc3793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sscal_</definition>
        <argsstring>(const blas_int *n, const float *a, float *x, const blas_int *incx)</argsstring>
        <name>sscal_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="67" column="6" declfile="include/lapack_wrapper.hpp" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1acbbc1b5929d2ee44eda004717aead5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zscal_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *a, std::complex&lt; double &gt; *x, const blas_int *incx)</argsstring>
        <name>zscal_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="68" column="6" declfile="include/lapack_wrapper.hpp" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a601cd3735d17d3430581542f1f000f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cscal_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *a, std::complex&lt; float &gt; *x, const blas_int *incx)</argsstring>
        <name>cscal_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="70" column="6" declfile="include/lapack_wrapper.hpp" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1abd32308539f4175bd6b5d3c7dba4ede2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zdscal_</definition>
        <argsstring>(const blas_int *n, const double *a, std::complex&lt; double &gt; *x, const blas_int *incx)</argsstring>
        <name>zdscal_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="72" column="6" declfile="include/lapack_wrapper.hpp" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a0080a052fd2c2f23b47e4d016bf4f20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float snrm2_</definition>
        <argsstring>(const blas_int *n, const float *x, const blas_int *incx)</argsstring>
        <name>snrm2_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="74" column="7" declfile="include/lapack_wrapper.hpp" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a22817fddfdcb7e681866705923de2d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float scnrm2_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *x, const blas_int *incx)</argsstring>
        <name>scnrm2_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="75" column="7" declfile="include/lapack_wrapper.hpp" declline="75" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a292630bc6dca709f74ed83e06487671d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dnrm2_</definition>
        <argsstring>(const blas_int *n, const double *x, const blas_int *incx)</argsstring>
        <name>dnrm2_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="76" column="8" declfile="include/lapack_wrapper.hpp" declline="76" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a1f487b7e0c1906fc3ad84dd67087e6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dznrm2_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *x, const blas_int *incx)</argsstring>
        <name>dznrm2_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="77" column="8" declfile="include/lapack_wrapper.hpp" declline="77" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a4f1e0a5c8acaf476a39dd0c258e84bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sgemv_</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const float *alpha, const float *a, const blas_int *lda, const float *x, const blas_int *incx, const float *beta, const float *y, const blas_int *incy)</argsstring>
        <name>sgemv_</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="79" column="6" declfile="include/lapack_wrapper.hpp" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a014dc22bb1a2ec527afe92c9c9a70bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dgemv_</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const double *alpha, const double *a, const blas_int *lda, const double *x, const blas_int *incx, const double *beta, const double *y, const blas_int *incy)</argsstring>
        <name>dgemv_</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="83" column="6" declfile="include/lapack_wrapper.hpp" declline="83" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a222487ba301216d60af208f0917533ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void zgemv_</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const std::complex&lt; double &gt; *alpha, const std::complex&lt; double &gt; *a, const blas_int *lda, const std::complex&lt; double &gt; *x, const blas_int *incx, const std::complex&lt; double &gt; *beta, const std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zgemv_</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="87" column="6" declfile="include/lapack_wrapper.hpp" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a0e730f234e9afcf32de4584fd8818e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgemv_</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const std::complex&lt; float &gt; *alpha, const std::complex&lt; float &gt; *a, const blas_int *lda, const std::complex&lt; float &gt; *x, const blas_int *incx, const std::complex&lt; float &gt; *beta, const std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>cgemv_</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="92" column="6" declfile="include/lapack_wrapper.hpp" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1ac85eb2738ab56f5e523e1ef465f9884b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ddot_</definition>
        <argsstring>(const blas_int *n, const double *x, const blas_int *incx, const double *y, const blas_int *incy)</argsstring>
        <name>ddot_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="97" column="8" declfile="include/lapack_wrapper.hpp" declline="97" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1aba9b7c85f849cfaf3b438208c2e8ef8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float sdot_</definition>
        <argsstring>(const blas_int *n, const float *x, const blas_int *incx, const float *y, const blas_int *incy)</argsstring>
        <name>sdot_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="99" column="7" declfile="include/lapack_wrapper.hpp" declline="99" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a15468fe95ef8659e46614c7754047696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; zdotc_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *x, const blas_int *incx, const std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zdotc_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="103" column="14" declfile="include/lapack_wrapper.hpp" declline="103" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1adc7fb0591f661e0695dc77bd549552d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt; double &gt; zdotu_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *x, const blas_int *incx, const std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zdotu_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="105" column="14" declfile="include/lapack_wrapper.hpp" declline="105" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a282ee4ce81e677a3a9bb2d858226e1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; float &gt;</type>
        <definition>std::complex&lt; float &gt; cdotc_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *x, const blas_int *incx, const std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>cdotc_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="107" column="14" declfile="include/lapack_wrapper.hpp" declline="107" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a70138a8dc38ff21acda961e04bf902c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; float &gt;</type>
        <definition>std::complex&lt; float &gt; cdotu_</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *x, const blas_int *incx, const std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>cdotu_</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="109" column="14" declfile="include/lapack_wrapper.hpp" declline="109" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a8bbba41d9864b8c43e8d4ecc1d62f6b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dgemm</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const double *alpha, const double *a, const blas_int *lda, const double *b, const blas_int *ldb, const double *beta, double *c, const blas_int *ldc)</argsstring>
        <name>dgemm</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="286" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a524c6cf13cb9e42cef87b7e60be6fb83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sgemm</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const float *alpha, const float *a, const blas_int *lda, const float *b, const blas_int *ldb, const float *beta, float *c, const blas_int *ldc)</argsstring>
        <name>sgemm</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="292" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="292" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a75cd3b018ed9b673ad5ae3d1958db767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zgemm</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const std::complex&lt; double &gt; *alpha, const std::complex&lt; double &gt; *a, const blas_int *lda, const std::complex&lt; double &gt; *b, const blas_int *ldb, const std::complex&lt; double &gt; *beta, std::complex&lt; double &gt; *c, const blas_int *ldc)</argsstring>
        <name>zgemm</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="299" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1afd90858bde77a1fe4409ba660eb920ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cgemm</definition>
        <argsstring>(const char *transa, const char *transb, const blas_int *m, const blas_int *n, const blas_int *k, const std::complex&lt; float &gt; *alpha, const std::complex&lt; float &gt; *a, const blas_int *lda, const std::complex&lt; float &gt; *b, const blas_int *ldb, const std::complex&lt; float &gt; *beta, std::complex&lt; float &gt; *c, const blas_int *ldc)</argsstring>
        <name>cgemm</name>
        <param>
          <type>const char *</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>ldc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="309" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="309" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a66a5555a84f5d880d69359f2d15edbe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double dasum</definition>
        <argsstring>(const blas_int *n, const double *x, const blas_int *incx)</argsstring>
        <name>dasum</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="318" column="15" bodyfile="include/lapack_wrapper.hpp" bodystart="318" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a986be351acf8912433fa346baf45ea7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dcopy</definition>
        <argsstring>(const blas_int &amp;n, const double *x, const blas_int &amp;incx, double *y, const blas_int &amp;incy)</argsstring>
        <name>dcopy</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> &amp;</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> &amp;</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="322" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1aaf94e321f6db0558d71660dfee31d01e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void scopy</definition>
        <argsstring>(const blas_int &amp;n, const float *x, const blas_int &amp;incx, float *y, const blas_int &amp;incy)</argsstring>
        <name>scopy</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> &amp;</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> &amp;</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="326" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a2f9794afde0f0d00c7a5c91334c2f74f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void daxpy</definition>
        <argsstring>(const blas_int *n, const double *alpha, const double *x, const blas_int *incx, double *y, const blas_int *incy)</argsstring>
        <name>daxpy</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="331" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a7f5896875d9f0a1eb7ed1d5d25f5a6f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void saxpy</definition>
        <argsstring>(const blas_int *n, const float *alpha, const float *x, const blas_int *incx, float *y, const blas_int *incy)</argsstring>
        <name>saxpy</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="335" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1adb03abed54823eb5501f702d6f25510f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zaxpy</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *alpha, const std::complex&lt; double &gt; *x, const blas_int *incx, std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zaxpy</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="340" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="340" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1ae2cc94d29d866f170a760db700789344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void caxpy</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *alpha, const std::complex&lt; float &gt; *x, const blas_int *incx, std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>caxpy</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="345" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a59f6bbbaf7969967ff2613787fdf5402" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double dnrm2</definition>
        <argsstring>(const blas_int *n, const double *x, const blas_int *incx)</argsstring>
        <name>dnrm2</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="350" column="15" bodyfile="include/lapack_wrapper.hpp" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a11de037ffb8a2654ff626ac5521e042b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double dznrm2</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *x, const blas_int *incx)</argsstring>
        <name>dznrm2</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="354" column="15" bodyfile="include/lapack_wrapper.hpp" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1ad82e7e2e6adbf1fd476e0b027d22a282" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float snrm2</definition>
        <argsstring>(const blas_int *n, const float *x, const blas_int *incx)</argsstring>
        <name>snrm2</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="358" column="14" bodyfile="include/lapack_wrapper.hpp" bodystart="358" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a07bde1f23b0f7db94b75a37cd47deb5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float scnrm2</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *x, const blas_int *incx)</argsstring>
        <name>scnrm2</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="362" column="14" bodyfile="include/lapack_wrapper.hpp" bodystart="362" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1aca522edb604c31fdfcd196dbbd99e781" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dscal</definition>
        <argsstring>(const blas_int *n, const double *a, double *x, const blas_int *incx)</argsstring>
        <name>dscal</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="366" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1ac9c55b00a74b95b58452c448ef37b3f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sscal</definition>
        <argsstring>(const blas_int *n, const float *a, float *x, const blas_int *incx)</argsstring>
        <name>sscal</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="369" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="369" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a13050bbc730a2e635e4f4de8cd324a80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zscal</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; double &gt; *a, std::complex&lt; double &gt; *x, const blas_int *incx)</argsstring>
        <name>zscal</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="372" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a200640eff0903249debc9727a9ba7a03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cscal</definition>
        <argsstring>(const blas_int *n, const std::complex&lt; float &gt; *a, std::complex&lt; float &gt; *x, const blas_int *incx)</argsstring>
        <name>cscal</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="376" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a54e4e369e291ec096b94d6cc329bd274" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zdscal</definition>
        <argsstring>(const blas_int *n, const double *a, std::complex&lt; double &gt; *x, const blas_int *incx)</argsstring>
        <name>zdscal</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="380" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1aa1ef894d36b0cda6e960c9b833b7ebf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sgemv</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const float *alpha, const float *a, const blas_int *lda, const float *x, const blas_int *incx, const float *beta, const float *y, const blas_int *incy)</argsstring>
        <name>sgemv</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="473" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="473" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a944368b9d0a46e14d3f41876d81d182b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dgemv</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const double *alpha, const double *a, const blas_int *lda, const double *x, const blas_int *incx, const double *beta, const double *y, const blas_int *incy)</argsstring>
        <name>dgemv</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="478" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a5d0e10248570e3955e289d2dcef7d906" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zgemv</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const std::complex&lt; double &gt; *alpha, const std::complex&lt; double &gt; *a, const blas_int *lda, const std::complex&lt; double &gt; *x, const blas_int *incx, const std::complex&lt; double &gt; *beta, const std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zgemv</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="483" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="483" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a3cfbd96f84541ec15a8aeba658b28717" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cgemv</definition>
        <argsstring>(const char *trans, const blas_int *m, const blas_int *n, const std::complex&lt; float &gt; *alpha, const std::complex&lt; float &gt; *a, const blas_int *lda, const std::complex&lt; float &gt; *x, const blas_int *incx, const std::complex&lt; float &gt; *beta, const std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>cgemv</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="490" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="490" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a2bf4cf6eda3f2666fd49b58a3044cc6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double ddot</definition>
        <argsstring>(const blas_int *n, const double *x, const blas_int *incx, const double *y, const blas_int *incy)</argsstring>
        <name>ddot</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="498" column="15" bodyfile="include/lapack_wrapper.hpp" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1acc669a3340f8e2f32446a4030b0abdab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float sdot</definition>
        <argsstring>(const blas_int *n, const float *x, const blas_int *incx, const float *y, const blas_int *incy)</argsstring>
        <name>sdot</name>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="502" column="14" bodyfile="include/lapack_wrapper.hpp" bodystart="502" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a41a167b717e88ecd390f6b6b38b78afb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zdotc</definition>
        <argsstring>(std::complex&lt; double &gt; *res, const blas_int *n, const std::complex&lt; double &gt; *x, const blas_int *incx, const std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zdotc</name>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="507" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="507" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a9117c7952f2b64d269ce9f3fac824cb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zdotu</definition>
        <argsstring>(std::complex&lt; double &gt; *res, const blas_int *n, const std::complex&lt; double &gt; *x, const blas_int *incx, const std::complex&lt; double &gt; *y, const blas_int *incy)</argsstring>
        <name>zdotu</name>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="515" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="515" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1adeac612df99059537b520006223b420c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cdotc</definition>
        <argsstring>(std::complex&lt; float &gt; *res, const blas_int *n, const std::complex&lt; float &gt; *x, const blas_int *incx, const std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>cdotc</name>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="523" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="523" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="lapack__wrapper_8hpp_1a0ca3ed073617a8c408ea8d4c45a6c6aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cdotu</definition>
        <argsstring>(std::complex&lt; float &gt; *res, const blas_int *n, const std::complex&lt; float &gt; *x, const blas_int *incx, const std::complex&lt; float &gt; *y, const blas_int *incy)</argsstring>
        <name>cdotu</name>
        <param>
          <type>std::complex&lt; float &gt; *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>const std::complex&lt; float &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref> *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/lapack_wrapper.hpp" line="531" column="13" bodyfile="include/lapack_wrapper.hpp" bodystart="531" bodyend="538"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__LAPACK_WRAPPER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__LAPACK_WRAPPER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Type_8hpp" kindref="compound">Type.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UNI_MKL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;mkl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MKL_INT<sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;cblas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//#ifdef<sp/>BLAS_ILP64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>typedef<sp/>int64_t<sp/>blas_int;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;lapacke.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;cblas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BLAS<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="lapack__wrapper_8hpp_1a7f411b6d21126508ebc3d6bfe0f87b49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a7f411b6d21126508ebc3d6bfe0f87b49" kindref="member">dgemm_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*c,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc);</highlight></codeline>
<codeline lineno="31" refid="lapack__wrapper_8hpp_1a7c1d55acf18a2d67d1f8f9038ac2e4d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a7c1d55acf18a2d67d1f8f9038ac2e4d4" kindref="member">sgemm_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc);</highlight></codeline>
<codeline lineno="34" refid="lapack__wrapper_8hpp_1a787eb106ccd2cff5a99d0a27b2436f77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a787eb106ccd2cff5a99d0a27b2436f77" kindref="member">zgemm_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*a,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*beta,<sp/>std::complex&lt;double&gt;<sp/>*c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc);</highlight></codeline>
<codeline lineno="38" refid="lapack__wrapper_8hpp_1a48fa0961c58e7d8e680569602b422536" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a48fa0961c58e7d8e680569602b422536" kindref="member">cgemm_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*a,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*beta,<sp/>std::complex&lt;float&gt;<sp/>*c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/><sp/><sp/>zgemm_(const<sp/>char<sp/>*transa,<sp/>const<sp/>char<sp/>*transb,<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>blas_int<sp/>*k,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>_Complex<sp/>*alpha,<sp/>const<sp/>double<sp/>_Complex<sp/>*a,<sp/>const<sp/>blas_int<sp/>*lda,<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_Complex<sp/>*b,<sp/>const<sp/>blas_int<sp/>*ldb,<sp/>const<sp/>double<sp/>_Complex<sp/>*beta,<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Complex<sp/>*c,<sp/>const<sp/>blas_int<sp/>*ldc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="lapack__wrapper_8hpp_1abb30c4dff856ad084391f86c42f904bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1abb30c4dff856ad084391f86c42f904bc" kindref="member">dasum_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="lapack__wrapper_8hpp_1a02cdc9e833f168ef0e55b9f12fe01c51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a02cdc9e833f168ef0e55b9f12fe01c51" kindref="member">scopy_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="53" refid="lapack__wrapper_8hpp_1abec92cc08b08e759893691fdd804f981" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1abec92cc08b08e759893691fdd804f981" kindref="member">dcopy_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/><sp/><sp/>zcopy_(const<sp/>blas_int<sp/>*n,<sp/>const<sp/>double<sp/>*x,<sp/>const<sp/>blas_int<sp/>*incx,<sp/>std::complex&lt;double&gt;<sp/>*y,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>blas_int<sp/>*incy);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="lapack__wrapper_8hpp_1a35cad2a4e2262b1d7351ab8b6bef8902" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a35cad2a4e2262b1d7351ab8b6bef8902" kindref="member">daxpy_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="60" refid="lapack__wrapper_8hpp_1a6c4734599b75c3812e8fd1bbc886b2e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a6c4734599b75c3812e8fd1bbc886b2e4" kindref="member">saxpy_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="62" refid="lapack__wrapper_8hpp_1ad3c1d15065494273285bd8ccc57112e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1ad3c1d15065494273285bd8ccc57112e3" kindref="member">zaxpy_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="64" refid="lapack__wrapper_8hpp_1a576a4587b457fd56eee59735eba09207" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a576a4587b457fd56eee59735eba09207" kindref="member">caxpy_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="66" refid="lapack__wrapper_8hpp_1ae9590a07486a65e6a4f7fcdde798ac9e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1ae9590a07486a65e6a4f7fcdde798ac9e" kindref="member">dscal_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="67" refid="lapack__wrapper_8hpp_1a793d5a23b92929e380f7b01351fc3793" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a793d5a23b92929e380f7b01351fc3793" kindref="member">sscal_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="68" refid="lapack__wrapper_8hpp_1acbbc1b5929d2ee44eda004717aead5e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1acbbc1b5929d2ee44eda004717aead5e3" kindref="member">zscal_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*a,<sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="70" refid="lapack__wrapper_8hpp_1a601cd3735d17d3430581542f1f000f79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a601cd3735d17d3430581542f1f000f79" kindref="member">cscal_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*a,<sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="72" refid="lapack__wrapper_8hpp_1abd32308539f4175bd6b5d3c7dba4ede2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1abd32308539f4175bd6b5d3c7dba4ede2" kindref="member">zdscal_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="lapack__wrapper_8hpp_1a0080a052fd2c2f23b47e4d016bf4f20e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a0080a052fd2c2f23b47e4d016bf4f20e" kindref="member">snrm2_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="75" refid="lapack__wrapper_8hpp_1a22817fddfdcb7e681866705923de2d22" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a22817fddfdcb7e681866705923de2d22" kindref="member">scnrm2_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="76" refid="lapack__wrapper_8hpp_1a292630bc6dca709f74ed83e06487671d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a292630bc6dca709f74ed83e06487671d" kindref="member">dnrm2_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="77" refid="lapack__wrapper_8hpp_1a1f487b7e0c1906fc3ad84dd67087e6aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a1f487b7e0c1906fc3ad84dd67087e6aa" kindref="member">dznrm2_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="lapack__wrapper_8hpp_1a4f1e0a5c8acaf476a39dd0c258e84bf4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a4f1e0a5c8acaf476a39dd0c258e84bf4" kindref="member">sgemv_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*alpha,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="lapack__wrapper_8hpp_1a014dc22bb1a2ec527afe92c9c9a70bbf" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a014dc22bb1a2ec527afe92c9c9a70bbf" kindref="member">dgemv_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*alpha,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="lapack__wrapper_8hpp_1a222487ba301216d60af208f0917533ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a222487ba301216d60af208f0917533ac" kindref="member">zgemv_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*beta,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="lapack__wrapper_8hpp_1a0e730f234e9afcf32de4584fd8818e80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a0e730f234e9afcf32de4584fd8818e80" kindref="member">cgemv_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*beta,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="lapack__wrapper_8hpp_1ac85eb2738ab56f5e523e1ef465f9884b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1ac85eb2738ab56f5e523e1ef465f9884b" kindref="member">ddot_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="99" refid="lapack__wrapper_8hpp_1aba9b7c85f849cfaf3b438208c2e8ef8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1aba9b7c85f849cfaf3b438208c2e8ef8f" kindref="member">sdot_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>FORTRAN_COMPLEX_FUNCTIONS_RETURN_VOID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="lapack__wrapper_8hpp_1a15468fe95ef8659e46614c7754047696" refkind="member"><highlight class="normal">std::complex&lt;double&gt;<sp/><ref refid="lapack__wrapper_8hpp_1a15468fe95ef8659e46614c7754047696" kindref="member">zdotc_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="105" refid="lapack__wrapper_8hpp_1adc7fb0591f661e0695dc77bd549552d8" refkind="member"><highlight class="normal">std::complex&lt;double&gt;<sp/><ref refid="lapack__wrapper_8hpp_1adc7fb0591f661e0695dc77bd549552d8" kindref="member">zdotu_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="107" refid="lapack__wrapper_8hpp_1a282ee4ce81e677a3a9bb2d858226e1d3" refkind="member"><highlight class="normal">std::complex&lt;float&gt;<sp/><ref refid="lapack__wrapper_8hpp_1a282ee4ce81e677a3a9bb2d858226e1d3" kindref="member">cdotc_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="109" refid="lapack__wrapper_8hpp_1a70138a8dc38ff21acda961e04bf902c0" refkind="member"><highlight class="normal">std::complex&lt;float&gt;<sp/><ref refid="lapack__wrapper_8hpp_1a70138a8dc38ff21acda961e04bf902c0" kindref="member">cdotu_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a15468fe95ef8659e46614c7754047696" kindref="member">zdotc_</ref>(std::complex&lt;double&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1adc7fb0591f661e0695dc77bd549552d8" kindref="member">zdotu_</ref>(std::complex&lt;double&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a282ee4ce81e677a3a9bb2d858226e1d3" kindref="member">cdotc_</ref>(std::complex&lt;float&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a70138a8dc38ff21acda961e04bf902c0" kindref="member">cdotu_</ref>(std::complex&lt;float&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>D<sp/>and<sp/>Z<sp/>LAPACK<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment">void<sp/>dgeqp3_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>jpvt,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="comment">void<sp/>zgeqp3_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>jpvt,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>lwork,<sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">//void<sp/>dgeqpf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="131"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>jpvt,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="132"><highlight class="comment">//void<sp/>zgeqpf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="133"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>jpvt,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="134"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="comment">//</highlight></codeline>
<codeline lineno="136"><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">void<sp/>dgesvd_(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>s,</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>double*<sp/>vt,<sp/>const<sp/>blas_int*<sp/>ldvt,</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">void<sp/>sgesvd_(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>s,</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>float*<sp/>vt,<sp/>const<sp/>blas_int*<sp/>ldvt,</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">void<sp/>zgesvd_(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>s,</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>std::complex&lt;double&gt;*<sp/>vt,<sp/>const</highlight></codeline>
<codeline lineno="150"><highlight class="comment">blas_int*<sp/>ldvt,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight></codeline>
<codeline lineno="152"><highlight class="comment">void<sp/>cgesvd_(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>s,</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;float&gt;*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>std::complex&lt;float&gt;*<sp/>vt,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="155"><highlight class="comment">ldvt,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>float*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">void<sp/>dgesdd_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>s,<sp/>double*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>double*<sp/>vt,<sp/>const</highlight></codeline>
<codeline lineno="159"><highlight class="comment">blas_int*<sp/>ldvt,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>iwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void</highlight></codeline>
<codeline lineno="160"><highlight class="comment">zgesdd_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const</highlight></codeline>
<codeline lineno="161"><highlight class="comment">blas_int*<sp/>lda,<sp/>double*<sp/>s,<sp/>std::complex&lt;double&gt;*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>std::complex&lt;double&gt;*<sp/>vt,</highlight></codeline>
<codeline lineno="162"><highlight class="comment">const<sp/>blas_int*<sp/>ldvt,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>double*<sp/>rwork,<sp/>blas_int*</highlight></codeline>
<codeline lineno="163"><highlight class="comment">iwork,<sp/>blas_int<sp/>*info<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">void<sp/>ssyev_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>w,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="comment">void<sp/>dsyev_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>w,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="comment">void<sp/>cheev_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>w,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>float*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">void<sp/>zheev_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>w,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment">void<sp/>zgeev_(<sp/>const<sp/>char*<sp/>jobvl,<sp/>const<sp/>char*<sp/>jobvr,<sp/>const<sp/>blas_int*<sp/>n,<sp/><sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>w,<sp/>std::complex&lt;double&gt;<sp/>*vl,<sp/>const<sp/>blas_int</highlight></codeline>
<codeline lineno="182"><highlight class="comment">*ldvl,<sp/>std::complex&lt;double&gt;<sp/>*vr,<sp/>const<sp/>blas_int<sp/>*ldvr,<sp/>std::complex&lt;double&gt;<sp/>*work,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="183"><highlight class="comment">lwork,<sp/>double<sp/>*rwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>cgeev_(<sp/>const<sp/>char*<sp/>jobvl,<sp/>const<sp/>char*<sp/>jobvr,<sp/>const</highlight></codeline>
<codeline lineno="184"><highlight class="comment">blas_int*<sp/>n,<sp/><sp/>std::complex&lt;float&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;float&gt;*<sp/>w,</highlight></codeline>
<codeline lineno="185"><highlight class="comment">std::complex&lt;float&gt;<sp/>*vl,<sp/>const<sp/>blas_int<sp/>*ldvl,<sp/>std::complex&lt;float&gt;<sp/>*vr,<sp/>const<sp/>blas_int<sp/>*ldvr,</highlight></codeline>
<codeline lineno="186"><highlight class="comment">std::complex&lt;float&gt;<sp/>*work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>float<sp/>*rwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>dgeev_(<sp/>const</highlight></codeline>
<codeline lineno="187"><highlight class="comment">char*<sp/>jobvl,<sp/>const<sp/>char*<sp/>jobvr,<sp/>const<sp/>blas_int*<sp/>n,<sp/><sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>wr,</highlight></codeline>
<codeline lineno="188"><highlight class="comment">double<sp/>*wl,<sp/>double<sp/>*vl,<sp/>const<sp/>blas_int<sp/>*ldvl,<sp/>double<sp/>*vr,<sp/>const<sp/>blas_int<sp/>*ldvr,<sp/>double<sp/>*work,<sp/>const</highlight></codeline>
<codeline lineno="189"><highlight class="comment">blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>sgeev_(<sp/>const<sp/>char*<sp/>jobvl,<sp/>const<sp/>char*<sp/>jobvr,<sp/>const</highlight></codeline>
<codeline lineno="190"><highlight class="comment">blas_int*<sp/>n,<sp/><sp/>float*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>wr,<sp/>float<sp/>*wl,<sp/>float<sp/>*vl,<sp/>const<sp/>blas_int<sp/>*ldvl,</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>*vr,<sp/>const<sp/>blas_int<sp/>*ldvr,<sp/>float<sp/>*work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment">void<sp/>sstev_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>float*<sp/>d,<sp/>const<sp/>float*<sp/>e,<sp/>const<sp/>float*<sp/>z,</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>ldaz,<sp/>const<sp/>float*<sp/>work,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="comment">void<sp/>dstev_(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>double*<sp/>d,<sp/>const<sp/>double*<sp/>e,<sp/>const<sp/>double*<sp/>z,</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>ldaz,<sp/>const<sp/>double*<sp/>work,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">void<sp/>dgetrf_(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>double<sp/>*a,</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="comment">void<sp/>sgetrf_(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>float<sp/>*a,</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">void<sp/>zgetrf_(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;double&gt;<sp/>*a,</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="comment">void<sp/>cgetrf_(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;float&gt;<sp/>*a,</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">void<sp/>dgetri_(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>double<sp/>*a,<sp/><sp/>const<sp/>blas_int<sp/>*lda,</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>const<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="comment">void<sp/>sgetri_(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>float<sp/>*a,<sp/><sp/>const<sp/>blas_int<sp/>*lda,</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>const<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="comment">void<sp/>cgetri_(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;float&gt;<sp/>*a,<sp/>const<sp/>blas_int<sp/>*lda,</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>const<sp/>std::complex&lt;float&gt;<sp/>*work,<sp/>const<sp/>blas_int<sp/>*lwork,<sp/>blas_int</highlight></codeline>
<codeline lineno="215"><highlight class="comment">*info<sp/>);<sp/>void<sp/>zgetri_(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;double&gt;<sp/>*a,<sp/>const<sp/>blas_int<sp/>*lda,<sp/>const</highlight></codeline>
<codeline lineno="216"><highlight class="comment">blas_int<sp/>*ipiv,<sp/>const<sp/>std::complex&lt;double&gt;<sp/>*work,<sp/>const<sp/>blas_int<sp/>*lwork,<sp/>blas_int<sp/>*info<sp/>);<sp/>void</highlight></codeline>
<codeline lineno="217"><highlight class="comment">sgelqf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>tau,<sp/>float*</highlight></codeline>
<codeline lineno="218"><highlight class="comment">work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment">void<sp/>dgelqf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info</highlight></codeline>
<codeline lineno="222"><highlight class="comment">);<sp/>void<sp/>zgelqf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="223"><highlight class="comment">std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void</highlight></codeline>
<codeline lineno="224"><highlight class="comment">cgelqf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="225"><highlight class="comment">std::complex&lt;float&gt;*<sp/>tau,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">void<sp/>dorglq_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*</highlight></codeline>
<codeline lineno="229"><highlight class="comment">info<sp/>);<sp/>void<sp/>sorglq_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>float*<sp/>a,<sp/>const</highlight></codeline>
<codeline lineno="230"><highlight class="comment">blas_int*<sp/>lda,<sp/>const<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>zunglq_(</highlight></codeline>
<codeline lineno="231"><highlight class="comment">const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="232"><highlight class="comment">lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*</highlight></codeline>
<codeline lineno="233"><highlight class="comment">info<sp/>);<sp/>void<sp/>cunglq_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;float&gt;*</highlight></codeline>
<codeline lineno="234"><highlight class="comment">a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;float&gt;*<sp/>tau,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="235"><highlight class="comment">lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>dgeqlf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const</highlight></codeline>
<codeline lineno="236"><highlight class="comment">blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>zgeqlf_(</highlight></codeline>
<codeline lineno="237"><highlight class="comment">const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="238"><highlight class="comment">std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">void<sp/>dorgql_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*</highlight></codeline>
<codeline lineno="242"><highlight class="comment">info<sp/>);<sp/>void<sp/>zungql_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*</highlight></codeline>
<codeline lineno="243"><highlight class="comment">a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="244"><highlight class="comment">lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment">void<sp/>dgeqrf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info</highlight></codeline>
<codeline lineno="248"><highlight class="comment">);<sp/>void<sp/>sgeqrf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>tau,</highlight></codeline>
<codeline lineno="249"><highlight class="comment">float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>zgeqrf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const</highlight></codeline>
<codeline lineno="250"><highlight class="comment">blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>tau,</highlight></codeline>
<codeline lineno="251"><highlight class="comment">std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>cgeqrf_(<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="252"><highlight class="comment">m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;float&gt;*<sp/>tau,</highlight></codeline>
<codeline lineno="253"><highlight class="comment">std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>dorgqr_(<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="254"><highlight class="comment">const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*</highlight></codeline>
<codeline lineno="255"><highlight class="comment">work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>sorgqr_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,</highlight></codeline>
<codeline lineno="256"><highlight class="comment">const<sp/>blas_int*<sp/>k,<sp/>float*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="257"><highlight class="comment">lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">void<sp/>zungqr_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="261"><highlight class="comment">const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>cungqr_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const</highlight></codeline>
<codeline lineno="262"><highlight class="comment">blas_int*<sp/>k,<sp/>std::complex&lt;float&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;float&gt;*<sp/>tau,</highlight></codeline>
<codeline lineno="263"><highlight class="comment">std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);<sp/>void<sp/>dgerqf_(<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="264"><highlight class="comment">const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="265"><highlight class="comment">blas_int*<sp/>info<sp/>);<sp/>void<sp/>zgerqf_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const</highlight></codeline>
<codeline lineno="266"><highlight class="comment">blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="267"><highlight class="comment">blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">void<sp/>dorgrq_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*</highlight></codeline>
<codeline lineno="271"><highlight class="comment">info<sp/>);<sp/>void<sp/>sorgrq_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>float*<sp/>a,<sp/>const</highlight></codeline>
<codeline lineno="272"><highlight class="comment">blas_int*<sp/>lda,<sp/>const<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment">void<sp/>zungrq_(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="276"><highlight class="comment">const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="277"><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">void<sp/>dstemr_(<sp/>const<sp/>char<sp/>*jobz,<sp/>const<sp/>char<sp/>*range,<sp/>const<sp/>blas_int<sp/>*N,<sp/>double<sp/>*D,<sp/>double<sp/>*E,const</highlight></codeline>
<codeline lineno="279"><highlight class="comment">double<sp/>*vl,<sp/>const<sp/>double<sp/>*vu,<sp/>const<sp/>blas_int<sp/>*il,<sp/>const<sp/>blas_int<sp/>*iu,<sp/>blas_int<sp/>*M,<sp/>double*<sp/>W,<sp/>double</highlight></codeline>
<codeline lineno="280"><highlight class="comment">*Z,<sp/>const<sp/>blas_int<sp/>*ldz,<sp/>const<sp/>blas_int<sp/>*nzc,<sp/>blas_int<sp/>*isuppz,<sp/>bool<sp/>*tryrac,<sp/>double*work,<sp/>blas_int*</highlight></codeline>
<codeline lineno="281"><highlight class="comment">lwork,<sp/>blas_int*iwork,<sp/>blas_int*<sp/>liwork,<sp/>blas_int*<sp/>info);</highlight></codeline>
<codeline lineno="282"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>extern<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wrappers<sp/>for<sp/>BLAS<sp/>and<sp/>LAPACK<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="lapack__wrapper_8hpp_1a8bbba41d9864b8c43e8d4ecc1d62f6b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a8bbba41d9864b8c43e8d4ecc1d62f6b4" kindref="member">dgemm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*c,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a7f411b6d21126508ebc3d6bfe0f87b49" kindref="member">dgemm_</ref>(transa,<sp/>transb,<sp/>m,<sp/>n,<sp/>k,<sp/>alpha,<sp/>a,<sp/>lda,<sp/>b,<sp/>ldb,<sp/>beta,<sp/>c,<sp/>ldc);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292" refid="lapack__wrapper_8hpp_1a524c6cf13cb9e42cef87b7e60be6fb83" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a524c6cf13cb9e42cef87b7e60be6fb83" kindref="member">sgemm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a7c1d55acf18a2d67d1f8f9038ac2e4d4" kindref="member">sgemm_</ref>(transa,<sp/>transb,<sp/>m,<sp/>n,<sp/>k,<sp/>alpha,<sp/>a,<sp/>lda,<sp/>b,<sp/>ldb,<sp/>beta,<sp/>c,<sp/>ldc);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="lapack__wrapper_8hpp_1a75cd3b018ed9b673ad5ae3d1958db767" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a75cd3b018ed9b673ad5ae3d1958db767" kindref="member">zgemm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*alpha,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*b,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*beta,<sp/>std::complex&lt;double&gt;<sp/>*c,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a787eb106ccd2cff5a99d0a27b2436f77" kindref="member">zgemm_</ref>(transa,<sp/>transb,<sp/>m,<sp/>n,<sp/>k,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*)alpha,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*)a,<sp/>lda,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*)b,<sp/>ldb,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*)beta,<sp/>(std::complex&lt;double&gt;<sp/>*)c,<sp/>ldc);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="lapack__wrapper_8hpp_1afd90858bde77a1fe4409ba660eb920ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1afd90858bde77a1fe4409ba660eb920ee" kindref="member">cgemm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*transb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*a,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldb,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*beta,<sp/>std::complex&lt;float&gt;<sp/>*c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*ldc)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a48fa0961c58e7d8e680569602b422536" kindref="member">cgemm_</ref>(transa,<sp/>transb,<sp/>m,<sp/>n,<sp/>k,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*)alpha,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*)a,<sp/>lda,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*)b,<sp/>ldb,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*)beta,<sp/>(std::complex&lt;float&gt;<sp/>*)c,<sp/>ldc);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="lapack__wrapper_8hpp_1a66a5555a84f5d880d69359f2d15edbe0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a66a5555a84f5d880d69359f2d15edbe0" kindref="member">dasum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1abb30c4dff856ad084391f86c42f904bc" kindref="member">dasum_</ref>(n,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="lapack__wrapper_8hpp_1a986be351acf8912433fa346baf45ea7b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a986be351acf8912433fa346baf45ea7b" kindref="member">dcopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>&amp;n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>&amp;incx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>&amp;incy)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1abec92cc08b08e759893691fdd804f981" kindref="member">dcopy_</ref>(&amp;n,<sp/>x,<sp/>&amp;incx,<sp/>y,<sp/>&amp;incy);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326" refid="lapack__wrapper_8hpp_1aaf94e321f6db0558d71660dfee31d01e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1aaf94e321f6db0558d71660dfee31d01e" kindref="member">scopy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>&amp;n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>&amp;incx,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>&amp;incy)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a02cdc9e833f168ef0e55b9f12fe01c51" kindref="member">scopy_</ref>(&amp;n,<sp/>x,<sp/>&amp;incx,<sp/>y,<sp/>&amp;incy);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="lapack__wrapper_8hpp_1a2f9794afde0f0d00c7a5c91334c2f74f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a2f9794afde0f0d00c7a5c91334c2f74f" kindref="member">daxpy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a35cad2a4e2262b1d7351ab8b6bef8902" kindref="member">daxpy_</ref>(n,<sp/>alpha,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335" refid="lapack__wrapper_8hpp_1a7f5896875d9f0a1eb7ed1d5d25f5a6f5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a7f5896875d9f0a1eb7ed1d5d25f5a6f5" kindref="member">saxpy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a6c4734599b75c3812e8fd1bbc886b2e4" kindref="member">saxpy_</ref>(n,<sp/>alpha,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="lapack__wrapper_8hpp_1adb03abed54823eb5501f702d6f25510f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1adb03abed54823eb5501f702d6f25510f" kindref="member">zaxpy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*alpha,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/>std::complex&lt;double&gt;<sp/>*y,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1ad3c1d15065494273285bd8ccc57112e3" kindref="member">zaxpy_</ref>(n,<sp/>alpha,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345" refid="lapack__wrapper_8hpp_1ae2cc94d29d866f170a760db700789344" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1ae2cc94d29d866f170a760db700789344" kindref="member">caxpy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a576a4587b457fd56eee59735eba09207" kindref="member">caxpy_</ref>(n,<sp/>alpha,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="lapack__wrapper_8hpp_1a59f6bbbaf7969967ff2613787fdf5402" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a59f6bbbaf7969967ff2613787fdf5402" kindref="member">dnrm2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a292630bc6dca709f74ed83e06487671d" kindref="member">dnrm2_</ref>(n,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="lapack__wrapper_8hpp_1a11de037ffb8a2654ff626ac5521e042b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a11de037ffb8a2654ff626ac5521e042b" kindref="member">dznrm2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a1f487b7e0c1906fc3ad84dd67087e6aa" kindref="member">dznrm2_</ref>(n,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="lapack__wrapper_8hpp_1ad82e7e2e6adbf1fd476e0b027d22a282" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1ad82e7e2e6adbf1fd476e0b027d22a282" kindref="member">snrm2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a0080a052fd2c2f23b47e4d016bf4f20e" kindref="member">snrm2_</ref>(n,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="lapack__wrapper_8hpp_1a07bde1f23b0f7db94b75a37cd47deb5e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a07bde1f23b0f7db94b75a37cd47deb5e" kindref="member">scnrm2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a22817fddfdcb7e681866705923de2d22" kindref="member">scnrm2_</ref>(n,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="lapack__wrapper_8hpp_1aca522edb604c31fdfcd196dbbd99e781" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1aca522edb604c31fdfcd196dbbd99e781" kindref="member">dscal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1ae9590a07486a65e6a4f7fcdde798ac9e" kindref="member">dscal_</ref>(n,<sp/>a,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369" refid="lapack__wrapper_8hpp_1ac9c55b00a74b95b58452c448ef37b3f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1ac9c55b00a74b95b58452c448ef37b3f2" kindref="member">sscal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a793d5a23b92929e380f7b01351fc3793" kindref="member">sscal_</ref>(n,<sp/>a,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372" refid="lapack__wrapper_8hpp_1a13050bbc730a2e635e4f4de8cd324a80" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a13050bbc730a2e635e4f4de8cd324a80" kindref="member">zscal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*a,<sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1acbbc1b5929d2ee44eda004717aead5e3" kindref="member">zscal_</ref>(n,<sp/>a,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376" refid="lapack__wrapper_8hpp_1a200640eff0903249debc9727a9ba7a03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a200640eff0903249debc9727a9ba7a03" kindref="member">cscal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*a,<sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a601cd3735d17d3430581542f1f000f79" kindref="member">cscal_</ref>(n,<sp/>a,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380" refid="lapack__wrapper_8hpp_1a54e4e369e291ec096b94d6cc329bd274" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a54e4e369e291ec096b94d6cc329bd274" kindref="member">zdscal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1abd32308539f4175bd6b5d3c7dba4ede2" kindref="member">zdscal_</ref>(n,<sp/>a,<sp/>x,<sp/>incx);</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="385"><highlight class="comment">inline<sp/>void<sp/>dsyev(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>w,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="388"><highlight class="comment">{<sp/>dsyev_(<sp/><sp/>jobz,<sp/><sp/>uplo,<sp/><sp/>n,<sp/><sp/>a,<sp/>lda,<sp/>w,<sp/><sp/>work,<sp/><sp/>lwork,<sp/>info<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="comment">inline<sp/>void<sp/>ssyev(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>w,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="392"><highlight class="comment">{<sp/>ssyev_(<sp/><sp/>jobz,<sp/><sp/>uplo,<sp/><sp/>n,<sp/><sp/>a,<sp/>lda,<sp/>w,<sp/><sp/>work,<sp/><sp/>lwork,<sp/>info<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">inline<sp/>void<sp/>cheev(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>w,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>float*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="397"><highlight class="comment">{<sp/>cheev_(<sp/><sp/>jobz,<sp/><sp/>uplo,<sp/><sp/>n,<sp/><sp/>a,<sp/>lda,<sp/>w,<sp/><sp/>work,<sp/><sp/>lwork,<sp/>rwork,<sp/>info<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment">inline<sp/>void<sp/>zheev(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>char*<sp/>uplo,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>w,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="402"><highlight class="comment">{<sp/>zheev_(<sp/><sp/>jobz,<sp/><sp/>uplo,<sp/><sp/>n,<sp/><sp/>a,<sp/>lda,<sp/>w,<sp/><sp/>work,<sp/><sp/>lwork,<sp/>rwork,<sp/>info<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment">inline<sp/>void<sp/>zgeev(<sp/>const<sp/>char*<sp/>jobvl,<sp/>const<sp/>char*<sp/>jobvr,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>w,<sp/>std::complex&lt;double&gt;<sp/>*vl,<sp/>const<sp/>blas_int<sp/>*ldvl,</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>*vr,<sp/>const<sp/>blas_int<sp/>*ldvr,<sp/>std::complex&lt;double&gt;<sp/>*work,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="407"><highlight class="comment">lwork,<sp/>double<sp/>*rwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="408"><highlight class="comment">{</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/>zgeev_(jobvl,<sp/>jobvr,<sp/>n,<sp/>a,<sp/>lda,<sp/>w,<sp/>vl,<sp/>ldvl,<sp/>vr,<sp/>ldvr,<sp/>work,<sp/>lwork,<sp/>rwork,<sp/>info);</highlight></codeline>
<codeline lineno="410"><highlight class="comment">}</highlight></codeline>
<codeline lineno="411"><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment">inline<sp/>void<sp/>cgeev(<sp/>const<sp/>char*<sp/>jobvl,<sp/>const<sp/>char*<sp/>jobvr,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;float&gt;*<sp/>w,<sp/>std::complex&lt;float&gt;<sp/>*vl,<sp/>const<sp/>blas_int<sp/>*ldvl,</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/>std::complex&lt;float&gt;<sp/>*vr,<sp/>const<sp/>blas_int<sp/>*ldvr,<sp/>std::complex&lt;float&gt;<sp/>*work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>*rwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="416"><highlight class="comment">{</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/>cgeev_(jobvl,<sp/>jobvr,<sp/>n,<sp/>a,<sp/>lda,<sp/>w,<sp/>vl,<sp/>ldvl,<sp/>vr,<sp/>ldvr,<sp/>work,<sp/>lwork,<sp/>rwork,<sp/>info);</highlight></codeline>
<codeline lineno="418"><highlight class="comment">}</highlight></codeline>
<codeline lineno="419"><highlight class="comment"></highlight></codeline>
<codeline lineno="420"><highlight class="comment"></highlight></codeline>
<codeline lineno="421"><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment">inline<sp/>void<sp/>dgesvd(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>s,</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>double*<sp/>vt,<sp/>const<sp/>blas_int*<sp/>ldvt,</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="426"><highlight class="comment">{</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/>dgesvd_(<sp/>jobu,<sp/>jobvt,<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>s,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="428"><highlight class="comment">}</highlight></codeline>
<codeline lineno="429"><highlight class="comment"></highlight></codeline>
<codeline lineno="430"><highlight class="comment">inline<sp/>void<sp/>sgesvd(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>s,</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>float*<sp/>vt,<sp/>const<sp/>blas_int*<sp/>ldvt,</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="434"><highlight class="comment">{</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/>sgesvd_(<sp/>jobu,<sp/>jobvt,<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>s,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="436"><highlight class="comment">}</highlight></codeline>
<codeline lineno="437"><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment">inline<sp/>void<sp/>zgesvd(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>s,</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>std::complex&lt;double&gt;*<sp/>vt,<sp/>const</highlight></codeline>
<codeline lineno="441"><highlight class="comment">blas_int*<sp/>ldvt,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="442"><highlight class="comment">{</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>zgesvd_(<sp/>jobu,<sp/>jobvt,<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>s,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>work,<sp/>lwork,<sp/>rwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="444"><highlight class="comment">}</highlight></codeline>
<codeline lineno="445"><highlight class="comment"></highlight></codeline>
<codeline lineno="446"><highlight class="comment">inline<sp/>void<sp/>cgesvd(<sp/>const<sp/>char*<sp/>jobu,<sp/>const<sp/>char*<sp/>jobvt,<sp/>const<sp/>blas_int*<sp/>m,</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>s,</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;float&gt;*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>std::complex&lt;float&gt;*<sp/>vt,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="449"><highlight class="comment">ldvt,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>float*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="comment">{</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/>cgesvd_(<sp/>jobu,<sp/>jobvt,<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>s,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>work,<sp/>lwork,<sp/>rwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="452"><highlight class="comment">}</highlight></codeline>
<codeline lineno="453"><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment">inline<sp/>void<sp/>dgesdd(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>s,<sp/>double*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,<sp/>double*<sp/>vt,<sp/>const</highlight></codeline>
<codeline lineno="457"><highlight class="comment">blas_int*<sp/>ldvt,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>iwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="458"><highlight class="comment">{</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/>dgesdd_(jobz,<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>s,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>work,<sp/>lwork,<sp/>iwork,<sp/>info);</highlight></codeline>
<codeline lineno="460"><highlight class="comment">}</highlight></codeline>
<codeline lineno="461"><highlight class="comment"></highlight></codeline>
<codeline lineno="462"><highlight class="comment">inline<sp/>void<sp/>zgesdd(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>s,</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;*<sp/>u,<sp/>const<sp/>blas_int*<sp/>ldu,</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;*<sp/>vt,<sp/>const<sp/>blas_int*<sp/>ldvt,</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>iwork,<sp/>blas_int<sp/>*info<sp/>)</highlight></codeline>
<codeline lineno="468"><highlight class="comment">{</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/>zgesdd_(jobz,<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>s,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>work,<sp/>lwork,<sp/>rwork,<sp/>iwork,<sp/>info);</highlight></codeline>
<codeline lineno="470"><highlight class="comment">}</highlight></codeline>
<codeline lineno="471"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="lapack__wrapper_8hpp_1aa1ef894d36b0cda6e960c9b833b7ebf7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1aa1ef894d36b0cda6e960c9b833b7ebf7" kindref="member">sgemv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*alpha,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a4f1e0a5c8acaf476a39dd0c258e84bf4" kindref="member">sgemv_</ref>(trans,<sp/>m,<sp/>n,<sp/>alpha,<sp/>a,<sp/>lda,<sp/>x,<sp/>incx,<sp/>beta,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478" refid="lapack__wrapper_8hpp_1a944368b9d0a46e14d3f41876d81d182b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a944368b9d0a46e14d3f41876d81d182b" kindref="member">dgemv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*alpha,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*beta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a014dc22bb1a2ec527afe92c9c9a70bbf" kindref="member">dgemv_</ref>(trans,<sp/>m,<sp/>n,<sp/>alpha,<sp/>a,<sp/>lda,<sp/>x,<sp/>incx,<sp/>beta,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483" refid="lapack__wrapper_8hpp_1a5d0e10248570e3955e289d2dcef7d906" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a5d0e10248570e3955e289d2dcef7d906" kindref="member">zgemv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*a,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*beta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a222487ba301216d60af208f0917533ac" kindref="member">zgemv_</ref>(trans,<sp/>m,<sp/>n,<sp/>alpha,<sp/>a,<sp/>lda,<sp/>x,<sp/>incx,<sp/>beta,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490" refid="lapack__wrapper_8hpp_1a3cfbd96f84541ec15a8aeba658b28717" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a3cfbd96f84541ec15a8aeba658b28717" kindref="member">cgemv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*trans,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*alpha,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*a,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*lda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*beta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a0e730f234e9afcf32de4584fd8818e80" kindref="member">cgemv_</ref>(trans,<sp/>m,<sp/>n,<sp/>alpha,<sp/>a,<sp/>lda,<sp/>x,<sp/>incx,<sp/>beta,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="lapack__wrapper_8hpp_1a2bf4cf6eda3f2666fd49b58a3044cc6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a2bf4cf6eda3f2666fd49b58a3044cc6b" kindref="member">ddot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1ac85eb2738ab56f5e523e1ef465f9884b" kindref="member">ddot_</ref>(n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502" refid="lapack__wrapper_8hpp_1acc669a3340f8e2f32446a4030b0abdab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1acc669a3340f8e2f32446a4030b0abdab" kindref="member">sdot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*y,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1aba9b7c85f849cfaf3b438208c2e8ef8f" kindref="member">sdot_</ref>(n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="lapack__wrapper_8hpp_1a41a167b717e88ecd390f6b6b38b78afb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a41a167b717e88ecd390f6b6b38b78afb" kindref="member">zdotc</ref>(std::complex&lt;double&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>FORTRAN_COMPLEX_FUNCTIONS_RETURN_VOID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/><ref refid="lapack__wrapper_8hpp_1a15468fe95ef8659e46614c7754047696" kindref="member">zdotc_</ref>(n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a15468fe95ef8659e46614c7754047696" kindref="member">zdotc_</ref>(res,<sp/>n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515" refid="lapack__wrapper_8hpp_1a9117c7952f2b64d269ce9f3fac824cb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a9117c7952f2b64d269ce9f3fac824cb1" kindref="member">zdotu</ref>(std::complex&lt;double&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>FORTRAN_COMPLEX_FUNCTIONS_RETURN_VOID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/><ref refid="lapack__wrapper_8hpp_1adc7fb0591f661e0695dc77bd549552d8" kindref="member">zdotu_</ref>(n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1adc7fb0591f661e0695dc77bd549552d8" kindref="member">zdotu_</ref>(res,<sp/>n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523" refid="lapack__wrapper_8hpp_1adeac612df99059537b520006223b420c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1adeac612df99059537b520006223b420c" kindref="member">cdotc</ref>(std::complex&lt;float&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>FORTRAN_COMPLEX_FUNCTIONS_RETURN_VOID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/><ref refid="lapack__wrapper_8hpp_1a282ee4ce81e677a3a9bb2d858226e1d3" kindref="member">cdotc_</ref>(n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a282ee4ce81e677a3a9bb2d858226e1d3" kindref="member">cdotc_</ref>(res,<sp/>n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531" refid="lapack__wrapper_8hpp_1a0ca3ed073617a8c408ea8d4c45a6c6aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a0ca3ed073617a8c408ea8d4c45a6c6aa" kindref="member">cdotu</ref>(std::complex&lt;float&gt;<sp/>*res,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*x,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lapack__wrapper_8hpp_1a811069b79e704a9e1dee1e70bb135aec" kindref="member">blas_int</ref><sp/>*incy)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>FORTRAN_COMPLEX_FUNCTIONS_RETURN_VOID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>*res<sp/>=<sp/><ref refid="lapack__wrapper_8hpp_1a70138a8dc38ff21acda961e04bf902c0" kindref="member">cdotu_</ref>(n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><ref refid="lapack__wrapper_8hpp_1a70138a8dc38ff21acda961e04bf902c0" kindref="member">cdotu_</ref>(res,<sp/>n,<sp/>x,<sp/>incx,<sp/>y,<sp/>incy);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dstev(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>double*<sp/>d,<sp/>const<sp/>double*<sp/>e,<sp/>const</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/>double*<sp/>z,<sp/>const<sp/>blas_int*<sp/>ldaz,<sp/>const<sp/>double*<sp/>work,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/>dstev_(<sp/>jobz,<sp/>n,<sp/>d,<sp/>e,<sp/>z,<sp/>ldaz,<sp/>work,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="comment"></highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sstev(<sp/>const<sp/>char*<sp/>jobz,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>float*<sp/>d,<sp/>const<sp/>float*<sp/>e,<sp/>const</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/>float*<sp/>z,<sp/>const<sp/>blas_int*<sp/>ldaz,<sp/>const<sp/>float*<sp/>work,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/>sstev_(<sp/>jobz,<sp/>n,<sp/>d,<sp/>e,<sp/>z,<sp/>ldaz,<sp/>work,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dgetrf(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>double<sp/>*a,<sp/><sp/>const<sp/>blas_int<sp/>*lda,</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/>dgetrf_(<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sgetrf(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>float<sp/>*a,<sp/><sp/>const<sp/>blas_int<sp/>*lda,</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/>sgetrf_(<sp/>m,<sp/>n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="comment"></highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zgetrf(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;double&gt;<sp/>*a,<sp/><sp/>const</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/>zgetrf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>info);</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>cgetrf(<sp/>const<sp/>blas_int<sp/>*m,<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;float&gt;<sp/>*a,<sp/><sp/>const</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int<sp/>*ipiv,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/><sp/>cgetrf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>info);</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dgetri(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>double<sp/>*a,<sp/><sp/>const<sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/>*ipiv,<sp/>const<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/>dgetri_(n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>work,<sp/>lwork,<sp/>info);</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sgetri(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>float<sp/>*a,<sp/><sp/>const<sp/>blas_int<sp/>*lda,<sp/>const<sp/>blas_int<sp/>*ipiv,</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/>const<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/>sgetri_(n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>work,<sp/>lwork,<sp/>info);</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zgetri(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;double&gt;<sp/>*a,<sp/>const<sp/>blas_int<sp/>*lda,<sp/>const</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/>blas_int<sp/>*ipiv,<sp/>const<sp/>std::complex&lt;double&gt;<sp/>*work,<sp/>const<sp/>blas_int<sp/>*lwork,<sp/>blas_int<sp/>*info<sp/>)</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/><sp/><sp/>zgetri_(n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>work,<sp/>lwork,<sp/>info);</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>cgetri(<sp/>const<sp/>blas_int<sp/>*n,<sp/>const<sp/>std::complex&lt;float&gt;<sp/>*a,<sp/>const<sp/>blas_int<sp/>*lda,<sp/>const</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/>blas_int<sp/>*ipiv,<sp/>const<sp/>std::complex&lt;float&gt;<sp/>*work,<sp/>const<sp/>blas_int<sp/>*lwork,<sp/>blas_int<sp/>*info<sp/>)</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/>cgetri_(n,<sp/>a,<sp/>lda,<sp/>ipiv,<sp/>work,<sp/>lwork,<sp/>info);</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="comment"></highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/>//inline<sp/>void<sp/>dgeqpf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>int*</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/>jpvt,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>blas_int*<sp/>info<sp/>){</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/>//</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/>//dgeqpf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>jpvt,<sp/>tau,<sp/>work,<sp/>info);</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/>//</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/>//}</highlight></codeline>
<codeline lineno="602"><highlight class="comment"></highlight></codeline>
<codeline lineno="603"><highlight class="comment"></highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dgeqp3(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>int*</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/>jpvt,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>){</highlight></codeline>
<codeline lineno="606"><highlight class="comment"></highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/>dgeqp3_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>jpvt,<sp/>tau,<sp/>work,<sp/>lwork,info);</highlight></codeline>
<codeline lineno="608"><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="comment"></highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dgelqf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/><sp/><sp/>dgelqf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sgelqf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/>info<sp/>)</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/><sp/><sp/>sgelqf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dorglq(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/>dorglq_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sorglq(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>float*<sp/>a,</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/>sorglq_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="comment"></highlight></codeline>
<codeline lineno="636"><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment"></highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dgeqlf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/>dgeqlf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="comment"></highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dorgql(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/>dorgql_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="comment"></highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dgeqrf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/>dgeqrf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sgeqrf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>float*<sp/>a,</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/>info<sp/>)</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/>sgeqrf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dorgqr(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/>dorgqr_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sorgqr(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>float*<sp/>a,</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/><sp/><sp/>sorgqr_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="comment"></highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dgerqf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/>dgerqf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="comment"></highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>dorgrq(const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>double*<sp/>a,</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>double*<sp/>tau,<sp/>double*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/>dorgrq_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>sorgrq(const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>float*<sp/>a,</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>float*<sp/>tau,<sp/>float*<sp/>work,<sp/>const<sp/>blas_int*<sp/>lwork,</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/>sorgrq_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zgeqrf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/>zgeqrf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>cgeqrf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;float&gt;*<sp/>tau,<sp/>std::complex&lt;float&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/>cgeqrf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zungqr(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/>zungqr_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>cungqr(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;float&gt;*</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;float&gt;*<sp/>tau,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/>cungqr_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="comment"></highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zgerqf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/><sp/>zgerqf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zungrq(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/><sp/>zungrq_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="comment"></highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zgeqp3(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/>lda,<sp/>int*<sp/>jpvt,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>int*<sp/>lwork,<sp/>double*<sp/>rwork,</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/>blas_int*<sp/>info<sp/>){<sp/>zgeqp3_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>jpvt,<sp/>tau,<sp/>work,<sp/>lwork,rwork,<sp/>info);</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/>//inline<sp/>void<sp/>zgeqpf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,<sp/>const</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/>blas_int*<sp/>lda,</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int*<sp/>jpvt,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double*<sp/>rwork,<sp/>blas_int*<sp/>info<sp/>){</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/>//<sp/><sp/>zgeqpf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>jpvt,<sp/>tau,<sp/>work,<sp/>rwork,<sp/>info);</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/>//}</highlight></codeline>
<codeline lineno="746"><highlight class="comment"></highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zgelqf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/>zgelqf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>cgelqf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;float&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;float&gt;*<sp/>tau,<sp/>std::complex&lt;float&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/>cgelqf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="comment"></highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zunglq(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/>zunglq_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>cunglq(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;float&gt;*</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;float&gt;*<sp/>tau,<sp/>std::complex&lt;float&gt;*<sp/>work,<sp/>const<sp/>blas_int*</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/><sp/>cunglq_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zgeqlf(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>std::complex&lt;double&gt;*<sp/>a,</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>blas_int*<sp/>lda,<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/>const<sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/><sp/>zgeqlf_(m,<sp/>n,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/>inline<sp/>void<sp/>zungql(<sp/>const<sp/>blas_int*<sp/>m,<sp/>const<sp/>blas_int*<sp/>n,<sp/>const<sp/>blas_int*<sp/>k,<sp/>std::complex&lt;double&gt;*</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/>a,<sp/>const<sp/>blas_int*<sp/>lda,<sp/>const<sp/>std::complex&lt;double&gt;*<sp/>tau,<sp/>std::complex&lt;double&gt;*<sp/>work,<sp/>const</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/>blas_int*<sp/>lwork,<sp/>blas_int*<sp/>info<sp/>)</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/><sp/>zungql_(m,<sp/>n,<sp/>k,<sp/>a,<sp/>lda,<sp/>tau,<sp/>work,<sp/>lwork,<sp/>info<sp/>);</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>UNI_MKL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/lapack_wrapper.hpp"/>
  </compounddef>
</doxygen>
