<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Cytnx</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md_dox"/> <heading level="1">Stable Version:</heading>
</para>
<para><ulink url="https://github.com/kaihsin/Cytnx/tree/v0.7.6">v0.7.6</ulink></para>
<para><heading level="1">Feature:</heading>
</para>
<para><heading level="2">Python x C++</heading>
</para>
<para>Benefit from both side. One can do simple prototype on python side and easy transfer to C++ with small effort!</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>c++<sp/>version:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classcytnx_1_1Tensor" kindref="compound">cytnx::Tensor</ref><sp/>A({3,4,5},<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type</ref>.Double,<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device</ref>.cpu)</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".py"><codeline><highlight class="comment">#<sp/>python<sp/>version:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cytnx</highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">cytnx.Tensor</ref>([3,4,5],dtype=cytnx.Type.Double,device=cytnx.Device.cpu)</highlight></codeline>
</programlisting></para>
<para><heading level="2">1. All the Storage and Tensor can now have mulitple type support.</heading>
</para>
<para>The avaliable types are :</para>
<para><table rows="12" cols="3"><row>
<entry thead="yes"><para>cytnx type   </para>
</entry><entry thead="yes"><para>c++ type   </para>
</entry><entry thead="yes"><para>Type object    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_double   </para>
</entry><entry thead="no"><para>double   </para>
</entry><entry thead="no"><para>Type.Double    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_float   </para>
</entry><entry thead="no"><para>float   </para>
</entry><entry thead="no"><para>Type.Float    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_uint64   </para>
</entry><entry thead="no"><para>uint64_t   </para>
</entry><entry thead="no"><para>Type.Uint64    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_uint32   </para>
</entry><entry thead="no"><para>uint32_t   </para>
</entry><entry thead="no"><para>Type.Uint32    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_uint16   </para>
</entry><entry thead="no"><para>uint16_t   </para>
</entry><entry thead="no"><para>Type.Uint16    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_int64   </para>
</entry><entry thead="no"><para>int64_t   </para>
</entry><entry thead="no"><para>Type.Int64    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_int32   </para>
</entry><entry thead="no"><para>int32_t   </para>
</entry><entry thead="no"><para>Type.Int32    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_int16   </para>
</entry><entry thead="no"><para>int16_t   </para>
</entry><entry thead="no"><para>Type.Int16    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_complex128   </para>
</entry><entry thead="no"><para>std::complex&lt;double&gt;   </para>
</entry><entry thead="no"><para>Type.ComplexDouble    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_complex64   </para>
</entry><entry thead="no"><para>std::complex&lt;float&gt;   </para>
</entry><entry thead="no"><para>Type.ComplexFloat    </para>
</entry></row>
<row>
<entry thead="no"><para>cytnx_bool   </para>
</entry><entry thead="no"><para>bool   </para>
</entry><entry thead="no"><para>Type.Bool   </para>
</entry></row>
</table>
</para>
<para><heading level="2">2. Multiple devices support.</heading>
</para>
<para><itemizedlist>
<listitem><para>simple moving btwn CPU and GPU (see below)</para>
</listitem></itemizedlist>
</para>
<para><heading level="1">Objects:</heading>
</para>
<para><itemizedlist>
<listitem><para><ref refid="classcytnx_1_1Storage" kindref="compound">Storage </ref> [binded]</para>
</listitem><listitem><para><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor </ref> [binded]</para>
</listitem><listitem><para><ref refid="classcytnx_1_1Bond" kindref="compound">Bond </ref> [binded]</para>
</listitem><listitem><para><ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor </ref> [c++ only]</para>
</listitem><listitem><para><ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry </ref> [binded]</para>
</listitem><listitem><para><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor </ref> [binded]</para>
</listitem><listitem><para><ref refid="classcytnx_1_1Network" kindref="compound">Network </ref> [binded]</para>
</listitem></itemizedlist>
</para>
<para><heading level="1">linear algebra functions:</heading>
</para>
<para>See <ref refid="namespacecytnx_1_1linalg" kindref="compound">cytnx::linalg </ref> for further details</para>
<para><table rows="39" cols="5"><row>
<entry thead="yes"><para>func   </para>
</entry><entry thead="yes"><para>inplace   </para>
</entry><entry thead="yes"><para>CPU   </para>
</entry><entry thead="yes"><para>GPU   </para>
</entry><entry thead="yes"><para>callby tn    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1ac61bd0f99306496fae81f8601fa4070c" kindref="member">Add</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a9918295b0d2d78fa475390e91ccbf57b" kindref="member">Sub</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a8705f85e347439577708173ab963f909" kindref="member">Mul</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1affc6138760ac67505ae194edf14525e8" kindref="member">Div</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1aea125f2928934007725809426bb77e38" kindref="member">Cpr</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a56d73db3d0cdd3a2ca5ed5f88f0738ff" kindref="member">Mod</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para>+,+=[tn]   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y (<ref refid="classcytnx_1_1Tensor_1a2744949ae1bbbef4a852b11153617b5d" kindref="member">Tensor.Add_</ref>)    </para>
</entry></row>
<row>
<entry thead="no"><para>-,-=[tn]   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y (<ref refid="classcytnx_1_1Tensor_1aff0275bf4752791ebc51b3f02b456115" kindref="member">Tensor.Sub_</ref>)    </para>
</entry></row>
<row>
<entry thead="no"><para>*,*=[tn]   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y (<ref refid="classcytnx_1_1Tensor_1a9eb8827f29f8932c24d8315017b7c7e2" kindref="member">Tensor.Mul_</ref>)    </para>
</entry></row>
<row>
<entry thead="no"><para>/,/=[tn]   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y (<ref refid="classcytnx_1_1Tensor_1a7e079fdaf9bb56c21e1300dbf08e7223" kindref="member">Tensor.Div_</ref>)    </para>
</entry></row>
<row>
<entry thead="no"><para>== [tn]   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y (<ref refid="" kindref="compound">Tensor.Cpr_</ref>)    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1ad3681539523188fce02d6332cfa1ffd1" kindref="member">Svd</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para>*<ref refid="namespacecytnx_1_1linalg_1a73ad52d4027c912fe24ffdffc2d893f8" kindref="member">Svd_truncate</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1af819d2fc4522d2a6287aa16dfbe3f787" kindref="member">InvM</ref>   </para>
</entry><entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1ac414e561888051c1fbacde18c9039fbf" kindref="member">InvM_</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a8680f6a91b7110d68c1d9e9a4da700d6" kindref="member">Inv</ref>   </para>
</entry><entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1aa664cc05d63056151c826d8457791c5d" kindref="member">Inv_</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a470d0886432554a35ecaf961451c0806" kindref="member">Conj</ref>   </para>
</entry><entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1adc3233bf8bc3eb6a435340f912412801" kindref="member">Conj_</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1aac38382cbc0e8202411c96a0ff636471" kindref="member">Exp</ref>   </para>
</entry><entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1aaab08439dde94ee87939d07933ede6e3" kindref="member">Exp_</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a5831918722e5d18f4eaf37834b8fbf77" kindref="member">Expf</ref>   </para>
</entry><entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a5de1faf71c76cdc6b7fa5ba3a3e21bbb" kindref="member">Expf_</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para>*<ref refid="namespacecytnx_1_1linalg_1ae394378db613a244ad518504047669c0" kindref="member">ExpH</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para>*<ref refid="namespacecytnx_1_1linalg_1ad5c478aa9da366c15ec7a2351dc99d93" kindref="member">ExpM</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a63fb9c9751ff27d22f84a52a876cc6fc" kindref="member">Eigh</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a53feb441b4b1bd263714ed33e093728f" kindref="member">Matmul</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a5913f0bdd6cc130aeb927f42a874a149" kindref="member">Diag</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para>*<ref refid="namespacecytnx_1_1linalg_1a242f1b9c1ee7938ba050121773ab4b55" kindref="member">Tensordot</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a3e8edc89fdabb9c0f9b342198a31798b" kindref="member">Outer</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1abc22428de7f69d2afc9a27fca76bfe15" kindref="member">Kron</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a9cd2be179860bb4742ebe320fa063680" kindref="member">Norm</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1aa69a91a5651fce55380cf800c6030d73" kindref="member">Vectordot</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>.Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a5a502c7d0a6a46f0e695f211a42ab9dc" kindref="member">Tridiag</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para>*<ref refid="namespacecytnx_1_1linalg_1a215dbfd2aa7ef898450de7afff726bca" kindref="member">Dot</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a243ceac5dc7d4a8c983b0e7693b97489" kindref="member">Eig</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1af2e15ace1ea23939174fdea1829430fd" kindref="member">Pow</ref>   </para>
</entry><entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a31c366a1a4ea1c78e855cb6a79cb6115" kindref="member">Pow_</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a3ded6435c7b47eb348d03783bfe72611" kindref="member">Abs</ref>   </para>
</entry><entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a30687e6240a889c04637b33ef90c2525" kindref="member">Abs_</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a194461432b34c60984a02569a4d9c903" kindref="member">Qr</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1ac3a4d9f746e4d05555de50ac9fca9a77" kindref="member">Qdr</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>N    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a25b5f2fdfb550aabc9cc41daa963e1fb" kindref="member">Min</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="namespacecytnx_1_1linalg_1a93ef263824e2dcdab4832ea628959d19" kindref="member">Max</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para>*<ref refid="namespacecytnx_1_1linalg_1a2345742316261ec8d04ceb2797c6b521" kindref="member">Trace</ref>   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>N   </para>
</entry><entry thead="no"><para>N   </para>
</entry></row>
</table>
</para>
<para><verbatim>iterative solver

    \link cytnx::linalg::Lanczos_ER Lanczos_ER\endlink 


* this is a high level linalg 

^ this is temporary disable

. this is floating point type only
</verbatim> <heading level="1">Container Generators</heading>
</para>
<para>Tensor: <ref refid="namespacecytnx_1ab8a79a03fb0465f3eb2641017f3f1755" kindref="member">zeros()</ref>, <ref refid="namespacecytnx_1a83fb7bbe73368751a0d0f535d4a10a33" kindref="member">ones()</ref>, <ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange()</ref>, <ref refid="namespacecytnx_1af8aa7e619c030f80c54e4d26b576484b" kindref="member">identity()</ref>, <ref refid="namespacecytnx_1affbd9073156ce86d5e5c03742603c631" kindref="member">eye()</ref>,</para>
<para><heading level="1">Physics Category</heading>
</para>
<para>Tensor: <ref refid="namespacecytnx_1_1physics_1a9f018f04ccd068e899a8fcfe2e9b82d4" kindref="member">spin()</ref> <ref refid="namespacecytnx_1_1physics_1a1c6ebefa40751712dfb8976b015f48d6" kindref="member">pauli()</ref></para>
<para><heading level="1">Random</heading>
</para>
<para>See <ref refid="namespacecytnx_1_1random" kindref="compound">cytnx::random </ref> for further details</para>
<para><table rows="3" cols="5"><row>
<entry thead="yes"><para>func   </para>
</entry><entry thead="yes"><para>Tn   </para>
</entry><entry thead="yes"><para>Stor   </para>
</entry><entry thead="yes"><para>CPU   </para>
</entry><entry thead="yes"><para>GPU    </para>
</entry></row>
<row>
<entry thead="no"><para>*<ref refid="namespacecytnx_1_1random_1ac456ace342f35864d3a927b3ce9fccbd" kindref="member">Make_normal</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y    </para>
</entry></row>
<row>
<entry thead="no"><para>^<ref refid="namespacecytnx_1_1random_1a11ab0d554038b6339bf33a67c4977b70" kindref="member">normal</ref>   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>x   </para>
</entry><entry thead="no"><para>Y   </para>
</entry><entry thead="no"><para>Y   </para>
</entry></row>
</table>
</para>
<para><itemizedlist>
<listitem><para>this is initializer</para>
</listitem></itemizedlist>
</para>
<para>^ this is generator</para>
<para>[Note] The difference of initializer and generator is that initializer is used to initialize the Tensor, and generator generates a new Tensor.</para>
<para><heading level="1">conda install</heading>
</para>
<para>[Currently Linux only]</para>
<para>without CUDA<itemizedlist>
<listitem><para>python 3.6/3.7/3.8: conda install -c kaihsinwu cytnx</para>
</listitem></itemizedlist>
</para>
<para>with CUDA<itemizedlist>
<listitem><para>python 3.6/3.7/3.8: conda install -c kaihsinwu cytnx_cuda</para>
</listitem></itemizedlist>
</para>
<para><heading level="1">Some snippets:</heading>
</para>
<para><heading level="2">Storage</heading>
</para>
<para><itemizedlist>
<listitem><para>Memory container with GPU/CPU support. maintain type conversions (type casting btwn Storages) and moving btwn devices.</para>
</listitem><listitem><para>Generic type object, the behavior is very similar to python. <programlisting filename=".cpp"><codeline><highlight class="normal">Storage<sp/>A(400,<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;400;i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>A.at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(i)<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Storage<sp/>B<sp/>=<sp/>A;<sp/></highlight><highlight class="comment">//<sp/>A<sp/>and<sp/>B<sp/>share<sp/>same<sp/>memory,<sp/>this<sp/>is<sp/>similar<sp/>as<sp/>python<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Storage<sp/>C<sp/>=<sp/>A.to(<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cuda+0);<sp/></highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para><heading level="2">Tensor</heading>
</para>
<para><itemizedlist>
<listitem><para>A tensor, API very similar to numpy and pytorch.</para>
</listitem><listitem><para>simple moving btwn CPU and GPU: <programlisting filename=".cpp"><codeline><highlight class="normal">Tensor<sp/>A({3,4},<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double,<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cpu);<sp/></highlight><highlight class="comment">//<sp/>create<sp/>tensor<sp/>on<sp/>CPU<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>B({3,4},<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double,<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cuda+0);<sp/></highlight><highlight class="comment">//<sp/>create<sp/>tensor<sp/>on<sp/>GPU<sp/>with<sp/>gpu-id=0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>C<sp/>=<sp/>B;<sp/></highlight><highlight class="comment">//<sp/>C<sp/>and<sp/>B<sp/>share<sp/>same<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>move<sp/>A<sp/>to<sp/>gpu</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>D<sp/>=<sp/>A.to(<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cuda+0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>inplace<sp/>move<sp/>A<sp/>to<sp/>gpu</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A.to_(<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cuda+0);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Type conversion in between avaliable: <programlisting filename=".cpp"><codeline><highlight class="normal">Tensor<sp/>A({3,4},<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double);</highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>B<sp/>=<sp/>A.astype(<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Uint64);<sp/></highlight><highlight class="comment">//<sp/>cast<sp/>double<sp/>to<sp/>uint64_t</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>vitual swap and permute. All the permute and swap will not change the underlying memory</para>
</listitem><listitem><para>Use Contiguous() when needed to actual moving the memory layout. <programlisting filename=".cpp"><codeline><highlight class="normal">Tensor<sp/>A({3,4,5,2},<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double);</highlight></codeline>
<codeline><highlight class="normal">A.permute_(0,3,1,2);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>not<sp/>change<sp/>the<sp/>memory,<sp/>only<sp/>the<sp/>shape<sp/>info<sp/>is<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>A.is_contiguous()<sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>be<sp/>false!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A.contiguous_();<sp/></highlight><highlight class="comment">//<sp/>call<sp/>Configuous()<sp/>to<sp/>actually<sp/>move<sp/>the<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>A.is_contiguous()<sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>be<sp/>true!</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>access single element using .at <programlisting filename=".cpp"><codeline><highlight class="normal">Tensor<sp/>A({3,4,5},<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>A.at&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;(0,2,2);</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>access elements with python slices similarity: <programlisting filename=".cpp"><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Accessor<sp/><ref refid="DenseUniTensor_8cpp_1abb126f94f3d42e9104cf6bb7d4c035b8" kindref="member">ac</ref>;</highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>A({3,4,5},<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double);</highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>out<sp/>=<sp/>A(0,</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;1:4&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>equivalent<sp/>to<sp/>python:<sp/>out<sp/>=<sp/>A[0,:,1:4]<sp/><sp/><sp/><sp/></highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
<para><heading level="1">Fast Examples</heading>
</para>
<para><verbatim>See test.cpp for using C++ .
See test.py for using python  
</verbatim> <heading level="1">Developer</heading>
</para>
<para><verbatim>Kai-Hsin Wu (Boston Univ.) kaihsinwu@gmail.com 
</verbatim> <heading level="1">Contributors</heading>
</para>
<para><verbatim>Ying-Jer Kao (NTU, Taiwan): setuptool, cmake
Yen-Hsin Wu (NTU, Taiwan): Network optimization
Yu-Hsueh Chen (NTU, Taiwan): example, and testing
Po-Kwan Wu (OSU): Icon optimization    
Wen-Han Kao (UMN, USA) : testing of conda install 
Ke Hsu (NTU, Taiwan): Lstsq, linalg funcitons and examples  
</verbatim> <heading level="1">Refereces:</heading>
</para>
<para><verbatim>* example/DMRG:
    https://www.tensors.net/dmrg
</verbatim> </para>
    </detaileddescription>
    <location file="dox.md"/>
  </compounddef>
</doxygen>
