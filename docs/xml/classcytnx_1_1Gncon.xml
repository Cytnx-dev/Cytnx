<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classcytnx_1_1Gncon" kind="class" language="C++" prot="public">
    <compoundname>cytnx::Gncon</compoundname>
    <includes refid="Gncon_8hpp" local="no">Gncon.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a1edbe6357fc885dc741898dd0f85825a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::Fromfile</definition>
        <argsstring>(const std::string &amp;fname, const int &amp;Gncon_type=GNType.Regular)</argsstring>
        <name>Fromfile</name>
        <qualifiedname>cytnx::Gncon::Fromfile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>Gncon_type</declname>
          <defval>GNType.Regular</defval>
        </param>
        <briefdescription>
<para>Construct <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> from <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Gncon_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref>. This can be [GNType.Regular] or [GNType.Fermion.]. Currently, only Regular <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> is support!</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2">note:</heading>
</para>
<para><orderedlist>
<listitem><para>each <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file cannot have more than 1024 lines.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">detail:</heading>
</para>
<para>Format of a <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file:</para>
<para><itemizedlist>
<listitem><para>each line defines a <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>, that takes the format &apos;[name] : [Labels]&apos;</para>
</listitem><listitem><para>the name can be any alphabets A-Z, a-z</para>
</listitem><listitem><para>There are two reserved name: &apos;TOUT&apos; and &apos;ORDER&apos; (all capital)</para>
</listitem><listitem><para>One can use &apos;TOUT&apos; line to specify the output <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>&apos;s bond order using labels</para>
</listitem><listitem><para>The &apos;ORDER&apos; line is used to specify the contraction order</para>
</listitem></itemizedlist>
</para>
<para>About [Labels]:</para>
<para><itemizedlist>
<listitem><para>each label should seperate by a comma &quot;,&quot;</para>
</listitem><listitem><para>one &apos;;&apos; is needed and used to seperate Rowrank and column rank</para>
</listitem></itemizedlist>
</para>
<para>About [ORDER]:</para>
<para><itemizedlist>
<listitem><para>The contraction order, it can be specify using the standard mathmetical bracket ruls.</para>
</listitem><listitem><para>Without specify this line, the default contraction order will be from the first line to the last line</para>
</listitem></itemizedlist>
</para>
<para><heading level="2">example <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file:</heading>
</para>
<para><programlisting filename="example/Gncon/example.net"></programlisting></para>
<para><heading level="2">example code for load the <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Gncon/Fromfile.cpp"></programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim></verbatim> <heading level="3">python API</heading>
</para>
<para><programlisting filename="example/Gncon/Fromfile.py"></programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim></verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="253" column="10" bodyfile="include/Gncon.hpp" bodystart="253" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1ae992acb8b77264cfd321f9b62819fa86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::FromString</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;contents, const int &amp;Gncon_type=GNType.Regular)</argsstring>
        <name>FromString</name>
        <qualifiedname>cytnx::Gncon::FromString</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>contents</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>Gncon_type</declname>
          <defval>GNType.Regular</defval>
        </param>
        <briefdescription>
<para>Construct <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> from a list of strings, where each string is the same as each line in <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contents</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file descriptions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Gncon_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref>. This can be [GNType.Regular] or [GNType.Fermion.]. Currently, only Regular <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> is support!</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2">note:</heading>
</para>
<para><orderedlist>
<listitem><para>contents cannot have more than 1024 lines/strings.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">detail:</heading>
</para>
<para>Format of each string follows the same policy as Fromfile.</para>
<para><heading level="2">example code for load the <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> file:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Gncon/FromString.cpp"></programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim></verbatim> <heading level="3">python API</heading>
</para>
<para><programlisting filename="example/Gncon/FromString.py"></programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim></verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="290" column="10" bodyfile="include/Gncon.hpp" bodystart="290" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a11a519faac8a2c8812982cd56fb0b9ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::Gncon::Gncon</definition>
        <argsstring>(const std::string &amp;fname, const int &amp;Gncon_type=GNType.Regular)</argsstring>
        <name>Gncon</name>
        <qualifiedname>cytnx::Gncon::Gncon</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>Gncon_type</declname>
          <defval>GNType.Regular</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="312" column="5" bodyfile="include/Gncon.hpp" bodystart="312" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1aebe7edd6154c1355bafe31200f8b5ef3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::PutUniTensor</definition>
        <argsstring>(const std::string &amp;name, const UniTensor &amp;utensor)</argsstring>
        <name>PutUniTensor</name>
        <qualifiedname>cytnx::Gncon::PutUniTensor</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>utensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="316" column="10" bodyfile="include/Gncon.hpp" bodystart="316" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1aeebe14a7c80f78b8ee3cdecfa330002e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::PutUniTensor</definition>
        <argsstring>(const cytnx_uint64 &amp;idx, const UniTensor &amp;utensor)</argsstring>
        <name>PutUniTensor</name>
        <qualifiedname>cytnx::Gncon::PutUniTensor</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>utensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="319" column="10" bodyfile="include/Gncon.hpp" bodystart="319" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a632b205da7e362819485dabab267b0e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::PutUniTensors</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;name, const std::vector&lt; UniTensor &gt; &amp;utensors)</argsstring>
        <name>PutUniTensors</name>
        <qualifiedname>cytnx::Gncon::PutUniTensors</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &gt; &amp;</type>
          <declname>utensors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="322" column="10" bodyfile="include/Gncon.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a86dd9782446c79e371e9d351bf1db235" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cytnx::Gncon::getOptimalOrder</definition>
        <argsstring>(const int &amp;Gncon_type=GNType.Regular)</argsstring>
        <name>getOptimalOrder</name>
        <qualifiedname>cytnx::Gncon::getOptimalOrder</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>Gncon_type</declname>
          <defval>GNType.Regular</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="326" column="17" bodyfile="include/Gncon.hpp" bodystart="326" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1af09a8396d351c080a20db07c947dd9d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::Gncon::Launch</definition>
        <argsstring>(const bool &amp;optimal, const std::string &amp;contract_order=&quot;&quot;, const int &amp;Gncon_type=GNType.Regular)</argsstring>
        <name>Launch</name>
        <qualifiedname>cytnx::Gncon::Launch</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>optimal</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>contract_order</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>Gncon_type</declname>
          <defval>GNType.Regular</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="333" column="15" bodyfile="include/Gncon.hpp" bodystart="333" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a5467b52fdbdbcce08eac42bf75ff2afa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>cytnx::Gncon::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="341" column="10" bodyfile="include/Gncon.hpp" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a26ddc41c593b98e8423bb7d4b1f9b551" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref></type>
        <definition>Gncon cytnx::Gncon::clone</definition>
        <argsstring>()</argsstring>
        <name>clone</name>
        <qualifiedname>cytnx::Gncon::clone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="346" column="11" bodyfile="include/Gncon.hpp" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a3bd858141e4bf61196ad84394db8d9a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::PrintNet</definition>
        <argsstring>()</argsstring>
        <name>PrintNet</name>
        <qualifiedname>cytnx::Gncon::PrintNet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="351" column="10" bodyfile="include/Gncon.hpp" bodystart="351" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a9cbd49b2812985febef51c4ca4b60f8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Gncon::Savefile</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>Savefile</name>
        <qualifiedname>cytnx::Gncon::Savefile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="353" column="10" bodyfile="include/Gncon.hpp" bodystart="353" bodyend="353"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcytnx_1_1Gncon_1a32765f6792474fb8e52936c892f9aaa0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref></type>
        <definition>static Gncon cytnx::Gncon::Contract</definition>
        <argsstring>(const std::vector&lt; UniTensor &gt; &amp;tensors, const std::string &amp;Tout, const std::vector&lt; std::string &gt; &amp;alias={}, const std::string &amp;contract_order=&quot;&quot;)</argsstring>
        <name>Contract</name>
        <qualifiedname>cytnx::Gncon::Contract</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &gt; &amp;</type>
          <declname>tensors</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>Tout</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>alias</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>contract_order</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Gncon.hpp" line="302" column="18" bodyfile="include/Gncon.hpp" bodystart="302" bodyend="310"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/Gncon.hpp" line="194" column="3" bodyfile="include/Gncon.hpp" bodystart="194" bodyend="354"/>
    <listofallmembers>
      <member refid="classcytnx_1_1Gncon_1a5467b52fdbdbcce08eac42bf75ff2afa" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>clear</name></member>
      <member refid="classcytnx_1_1Gncon_1a26ddc41c593b98e8423bb7d4b1f9b551" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>clone</name></member>
      <member refid="classcytnx_1_1Gncon_1a32765f6792474fb8e52936c892f9aaa0" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>Contract</name></member>
      <member refid="classcytnx_1_1Gncon_1a1edbe6357fc885dc741898dd0f85825a" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>Fromfile</name></member>
      <member refid="classcytnx_1_1Gncon_1ae992acb8b77264cfd321f9b62819fa86" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>FromString</name></member>
      <member refid="classcytnx_1_1Gncon_1a86dd9782446c79e371e9d351bf1db235" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>getOptimalOrder</name></member>
      <member refid="classcytnx_1_1Gncon_1a11a519faac8a2c8812982cd56fb0b9ad" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>Gncon</name></member>
      <member refid="classcytnx_1_1Gncon_1af09a8396d351c080a20db07c947dd9d0" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>Launch</name></member>
      <member refid="classcytnx_1_1Gncon_1a3bd858141e4bf61196ad84394db8d9a6" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>PrintNet</name></member>
      <member refid="classcytnx_1_1Gncon_1aebe7edd6154c1355bafe31200f8b5ef3" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>PutUniTensor</name></member>
      <member refid="classcytnx_1_1Gncon_1aeebe14a7c80f78b8ee3cdecfa330002e" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>PutUniTensor</name></member>
      <member refid="classcytnx_1_1Gncon_1a632b205da7e362819485dabab267b0e9" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>PutUniTensors</name></member>
      <member refid="classcytnx_1_1Gncon_1a9cbd49b2812985febef51c4ca4b60f8e" prot="public" virt="non-virtual"><scope>cytnx::Gncon</scope><name>Savefile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
