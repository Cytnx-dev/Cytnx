<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classcytnx_1_1Bond" kind="class" language="C++" prot="public">
    <compoundname>cytnx::Bond</compoundname>
    <includes refid="Bond_8hpp" local="no">Bond.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcytnx_1_1Bond_1a80ee6b9a0dd288e74d885f6f288b5a0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::Bond::Bond</definition>
        <argsstring>(const cytnx_uint64 &amp;dim, const bondType &amp;bd_type=bondType::BD_REG, const std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp;in_qnums={}, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Bond</name>
        <qualifiedname>cytnx::Bond::Bond</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
          <defval><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efabd7a05c57c46feedff6d9a4bfc136329" kindref="member">bondType::BD_REG</ref></defval>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
          <declname>in_qnums</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="159" column="5" bodyfile="include/Bond.hpp" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ad7ed392eb1b39599c02bbfbe54c37bd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::Bond::Bond</definition>
        <argsstring>(const bondType &amp;bd_type, const std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp;in_qnums, const std::vector&lt; cytnx_uint64 &gt; &amp;degs, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Bond</name>
        <qualifiedname>cytnx::Bond::Bond</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
          <declname>in_qnums</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>degs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="166" column="5" bodyfile="include/Bond.hpp" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1afb6df33abf8e641b8774695410c20df5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::Bond::Bond</definition>
        <argsstring>(const bondType &amp;bd_type, const std::initializer_list&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp;in_qnums, const std::vector&lt; cytnx_uint64 &gt; &amp;degs, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Bond</name>
        <qualifiedname>cytnx::Bond::Bond</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
        </param>
        <param>
          <type>const std::initializer_list&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
          <declname>in_qnums</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>degs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="173" column="5" bodyfile="include/Bond.hpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a67dc45b1aee78ed58c04b7fa886f06c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::Bond::Bond</definition>
        <argsstring>(const bondType &amp;bd_type, const std::vector&lt; cytnx::Qs &gt; &amp;in_qnums, const std::vector&lt; cytnx_uint64 &gt; &amp;degs, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Bond</name>
        <qualifiedname>cytnx::Bond::Bond</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Qs" kindref="compound">cytnx::Qs</ref> &gt; &amp;</type>
          <declname>in_qnums</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>degs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="180" column="5" bodyfile="include/Bond.hpp" bodystart="180" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ac77af41f1ce762a13c83c2cdee57c3a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::Bond::Bond</definition>
        <argsstring>(const bondType &amp;bd_type, const std::vector&lt; std::pair&lt; std::vector&lt; cytnx_int64 &gt;, cytnx_uint64 &gt; &gt; &amp;in_qnums_dims, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Bond</name>
        <qualifiedname>cytnx::Bond::Bond</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt;, <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &gt; &amp;</type>
          <declname>in_qnums_dims</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="189" column="5" bodyfile="include/Bond.hpp" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a707a803fa98fb6a87b5f3c3b3000509f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::Init</definition>
        <argsstring>(const cytnx_uint64 &amp;dim, const bondType &amp;bd_type=bondType::BD_REG, const std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp;in_qnums={}, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Init</name>
        <qualifiedname>cytnx::Bond::Init</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
          <defval><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efabd7a05c57c46feedff6d9a4bfc136329" kindref="member">bondType::BD_REG</ref></defval>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
          <declname>in_qnums</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>init a bond object </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of the bond (rank) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bd_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag of the bond, it can be BD_BRA, BD_KET as physical tagged; or BD_REG as regular bond (rank) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_qnums</parametername>
</parameternamelist>
<parameterdescription>
<para>the quantum number(s) of the bond. it should be a 2d vector with shape (# of symmetry, dim) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_syms</parametername>
</parameternamelist>
<parameterdescription>
<para>the symmetry object of the bond. [Note] if qnums are provided, the default symmetry type is <ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1 </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
description:<orderedlist>
<listitem><para>each bond can be tagged with BD_BRA or BD_KET that represent the bond is defined in Bra space or Ket space.</para>
</listitem><listitem><para>the bond can have arbitrary multiple symmetries, with the type of each symmetry associate to the qnums are provided with the in_syms.</para>
</listitem></orderedlist>
</para>
<para>[Note]<orderedlist>
<listitem><para>if quantum number(s) are provided (which means the bond is with symmetry) then the bond MUST be tagged with either BD_BRA or BD_KET</para>
</listitem><listitem><para>if the bond is non-symmetry, then it can be tagged with BD_BRA or BD_KET, or BD_REG depending on the usage.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Bond/Init.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>create<sp/>a<sp/>non-symmetry,<sp/>regular<sp/>bond<sp/>(BD_REG)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>dimension<sp/>10</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>2.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>create<sp/>a<sp/>non-symmetry<sp/>bond<sp/>tagged<sp/>with<sp/>BD_IN</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>dimension<sp/>10</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_b<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(10,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efa236cc2f8a468e7190902edda6ca8ee29" kindref="member">BD_IN</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>3.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>crate<sp/>a<sp/>symmetry<sp/>bond,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>single<sp/>U1<sp/>(default)<sp/>symmetry<sp/>and<sp/>qnums<sp/>=<sp/>(0,2,-1,3)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_c<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efa236cc2f8a468e7190902edda6ca8ee29" kindref="member">BD_IN</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(3)&gt;&gt;1});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>3.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>crate<sp/>a<sp/>symmetry<sp/>bond,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>U1<sp/>x<sp/>Z2<sp/>multiple<sp/>symmetry</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>qnums<sp/>=<sp/>U1:(0,2,-1,3)<sp/>x<sp/>Z2:(0,1,1,0)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_d<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efa6bb366661f9937d42c2284dfac2910da" kindref="member">BD_OUT</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(3,<sp/>0)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_d<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: REGULAR 

Dim = 10 |type: KET&gt;     

Dim = 4 |type: KET&gt;     
 U1::  +0 +2 -1 +3

Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0

</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Bond/Init.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_a<sp/>=<sp/>Bond(10)</highlight></codeline>
<codeline><highlight class="normal">print(bd_a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_b<sp/>=<sp/>Bond(10,BD_KET)</highlight></codeline>
<codeline><highlight class="normal">print(bd_b)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_c<sp/>=<sp/>Bond(BD_IN,[Qs(0)&gt;&gt;1,Qs(2)&gt;&gt;1,Qs(-1)&gt;&gt;1,Qs(3)&gt;&gt;1])</highlight></codeline>
<codeline><highlight class="normal">print(bd_c)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_d<sp/>=<sp/>Bond(BD_OUT,[Qs(0<sp/>,0)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(2<sp/>,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-1,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(3<sp/>,0)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)])</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(bd_d)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: REGULAR 


Dim = 10 |type: KET&gt;     


Dim = 4 |type: KET&gt;     
 U1::  +0 +2 -1 +3


Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0


</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="228" column="10" bodyfile="include/Bond.hpp" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ae7a70f6506d6035ec022ab03099a915d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::Init</definition>
        <argsstring>(const bondType &amp;bd_type, const std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp;in_qnums, const std::vector&lt; cytnx_uint64 &gt; &amp;degs, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Init</name>
        <qualifiedname>cytnx::Bond::Init</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
          <declname>in_qnums</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>degs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>init a bond object </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag of the bond, it can be BD_BRA, BD_KET as physical tagged and cannot be BD_REG (regular bond). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_qnums</parametername>
</parameternamelist>
<parameterdescription>
<para>the quantum number(s) of the bond. it should be a 2d vector with shape (# of unique qnum labels, # of symmetry). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>degs</parametername>
</parameternamelist>
<parameterdescription>
<para>the degeneracy correspond to each qunatum number sets specified in the qnums, the size should match the # of rows of passed-in qnums. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_syms</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of symmetry objects of the bond, the size should match the # of cols of passed-in qnums. [Note] if qnums are provided, the default symmetry type is <ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1 </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
description:<orderedlist>
<listitem><para>each bond can be tagged with BD_BRA or BD_KET that represent the bond is defined in Bra space or Ket space.</para>
</listitem><listitem><para>the bond can have arbitrary multiple symmetries, with the type of each symmetry associate to the qnums are provided with the in_syms.</para>
</listitem></orderedlist>
</para>
<para>[Note]<orderedlist>
<listitem><para>if quantum number(s) are provided (which means the bond is with symmetry) then the bond MUST be tagged with either BD_BRA or BD_KET</para>
</listitem><listitem><para>if the bond is non-symmetry, then it can be tagged with BD_BRA or BD_KET, or BD_REG depending on the usage.</para>
</listitem><listitem><para>the &quot;bond dimension&quot; is the sum over all numbers specified in degs. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="259" column="10" bodyfile="include/Bond.hpp" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a3034fd7472ae82db9b45742c43dd66d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::Init</definition>
        <argsstring>(const bondType &amp;bd_type, const std::vector&lt; std::pair&lt; std::vector&lt; cytnx_int64 &gt;, cytnx_uint64 &gt; &gt; &amp;in_qnums_dims, const std::vector&lt; Symmetry &gt; &amp;in_syms={})</argsstring>
        <name>Init</name>
        <qualifiedname>cytnx::Bond::Init</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>bd_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt;, <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &gt; &amp;</type>
          <declname>in_qnums_dims</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
          <declname>in_syms</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="264" column="10" bodyfile="include/Bond.hpp" bodystart="264" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a8517743cec9589ed551114ea7e55fbb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref></type>
        <definition>bondType cytnx::Bond::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>cytnx::Bond::type</qualifiedname>
        <briefdescription>
<para>return the current tag type </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[bondType] can be BD_BRA, BD_KET or BD_REG </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="286" column="14" bodyfile="include/Bond.hpp" bodystart="286" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ab4f05193a012bd9a077374b5f305e898" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp; cytnx::Bond::qnums</definition>
        <argsstring>() const</argsstring>
        <name>qnums</name>
        <qualifiedname>cytnx::Bond::qnums</qualifiedname>
        <briefdescription>
<para>return the current quantum number set(s) by reference </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[2d vector] with shape: (dim, # of <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="295" column="23" bodyfile="include/Bond.hpp" bodystart="295" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a01299b8751c7d71c1bc2a6afe900da2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
        <definition>std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp; cytnx::Bond::qnums</definition>
        <argsstring>()</argsstring>
        <name>qnums</name>
        <qualifiedname>cytnx::Bond::qnums</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="296" column="17" bodyfile="include/Bond.hpp" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a491a89aa4434d4056dd3e5de7e70e1e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; cytnx::Bond::qnums_clone</definition>
        <argsstring>() const</argsstring>
        <name>qnums_clone</name>
        <qualifiedname>cytnx::Bond::qnums_clone</qualifiedname>
        <briefdescription>
<para>return copy of the current quantum number set(s) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[2d vector] with shape: (dim, # of <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="304" column="17" bodyfile="include/Bond.hpp" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1aa072647e03a4c797479445bd41b9eacf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref></type>
        <definition>cytnx_uint64 cytnx::Bond::dim</definition>
        <argsstring>() const</argsstring>
        <name>dim</name>
        <qualifiedname>cytnx::Bond::dim</qualifiedname>
        <briefdescription>
<para>return the dimension of the bond </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[cytnx_uint64] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="313" column="18" bodyfile="include/Bond.hpp" bodystart="313" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1acd46a218add6a88c1cc9035b06adb7b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a335d8fee19dee02206dbecec6e5ec610" kindref="member">cytnx_uint32</ref></type>
        <definition>cytnx_uint32 cytnx::Bond::Nsym</definition>
        <argsstring>() const</argsstring>
        <name>Nsym</name>
        <qualifiedname>cytnx::Bond::Nsym</qualifiedname>
        <briefdescription>
<para>return the number of symmetries </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[cytnx_uint32] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="320" column="18" bodyfile="include/Bond.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a408221e843ca57b779f5a5717188a8a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Symmetry &gt; &amp; cytnx::Bond::syms</definition>
        <argsstring>() const</argsstring>
        <name>syms</name>
        <qualifiedname>cytnx::Bond::syms</qualifiedname>
        <briefdescription>
<para>return the vector of symmetry objects by reference. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[vector of <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="328" column="23" bodyfile="include/Bond.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1abc64fadea2b867f4649df8e775803a39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt; &amp;</type>
        <definition>std::vector&lt; Symmetry &gt; &amp; cytnx::Bond::syms</definition>
        <argsstring>()</argsstring>
        <name>syms</name>
        <qualifiedname>cytnx::Bond::syms</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="329" column="17" bodyfile="include/Bond.hpp" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a95a33764b6adf5644e91578c908504ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt;</type>
        <definition>std::vector&lt; Symmetry &gt; cytnx::Bond::syms_clone</definition>
        <argsstring>() const</argsstring>
        <name>syms_clone</name>
        <qualifiedname>cytnx::Bond::syms_clone</qualifiedname>
        <briefdescription>
<para>return copy of the vector of symmetry objects. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[vector of <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="337" column="17" bodyfile="include/Bond.hpp" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a01be559109c1c7ecaccd0916a2954239" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
        <definition>Bond &amp; cytnx::Bond::set_type</definition>
        <argsstring>(const bondType &amp;new_bondType)</argsstring>
        <name>set_type</name>
        <qualifiedname>cytnx::Bond::set_type</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>new_bondType</declname>
        </param>
        <briefdescription>
<para>change the tag-type of the instance <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_bondType</parametername>
</parameternamelist>
<parameterdescription>
<para>the new tag-type, it can be BD_BRA,BD_KET or BD_REG </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="344" column="10" bodyfile="include/Bond.hpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a31c8ff7b0817c37e67a80a225f5bd758" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref></type>
        <definition>Bond cytnx::Bond::retype</definition>
        <argsstring>(const bondType &amp;new_bondType)</argsstring>
        <name>retype</name>
        <qualifiedname>cytnx::Bond::retype</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" kindref="member">bondType</ref> &amp;</type>
          <declname>new_bondType</declname>
        </param>
        <briefdescription>
<para>create a new instance of <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> with type changed to the new tag-type: </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_bondType</parametername>
</parameternamelist>
<parameterdescription>
<para>the new tag-type, it can be BD_BRA,BD_KET or BD_REG</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] This is equivalent to <ref refid="classcytnx_1_1Bond_1a8c4d6443ffe7c3f3ecd8c474fd9a18eb" kindref="member">Bond.clone()</ref>.<ref refid="classcytnx_1_1Bond_1a01be559109c1c7ecaccd0916a2954239" kindref="member">set_type()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="357" column="10" bodyfile="include/Bond.hpp" bodystart="357" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a6f47360919864f12affe9fda49b03994" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref></type>
        <definition>Bond cytnx::Bond::redirect</definition>
        <argsstring>() const</argsstring>
        <name>redirect</name>
        <qualifiedname>cytnx::Bond::redirect</qualifiedname>
        <briefdescription>
<para>create a new instance of <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> with type changed in btwn BRA / KET: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="367" column="10" bodyfile="include/Bond.hpp" bodystart="367" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1aa023d872df52de5594b963e109ab7723" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
        <definition>Bond &amp; cytnx::Bond::redirect_</definition>
        <argsstring>()</argsstring>
        <name>redirect_</name>
        <qualifiedname>cytnx::Bond::redirect_</qualifiedname>
        <briefdescription>
<para>create a new instance of <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> with type changed in btwn BRA / KET: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="377" column="10" bodyfile="include/Bond.hpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a6272e30153df85944fc98bf5419dc1c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::clear_type</definition>
        <argsstring>()</argsstring>
        <name>clear_type</name>
        <qualifiedname>cytnx::Bond::clear_type</qualifiedname>
        <briefdescription>
<para>change the tag-type to the default value BD_REG </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="387" column="10" bodyfile="include/Bond.hpp" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a8c4d6443ffe7c3f3ecd8c474fd9a18eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref></type>
        <definition>Bond cytnx::Bond::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>cytnx::Bond::clone</qualifiedname>
        <briefdescription>
<para>return a copy of the instance <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[<ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>] a new instance of <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> that have the same contents</para>
</simplesect>
<heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Bond/clone.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>create<sp/>a<sp/>non-symmetry,<sp/>regular<sp/>bond<sp/>(BD_REG)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>dimension<sp/>10</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_b<sp/>=<sp/>bd_a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_c<sp/>=<sp/>bd_a.<ref refid="classcytnx_1_1Bond_1a8c4d6443ffe7c3f3ecd8c474fd9a18eb" kindref="member">clone</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>is(bd_b,<sp/>bd_a)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>true,<sp/>the<sp/>same<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>is(bd_c,<sp/>bd_a)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>false,<sp/>different<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(bd_b<sp/>==<sp/>bd_a)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>true,<sp/>same<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(bd_c<sp/>==<sp/>bd_a)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>true,<sp/>same<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: REGULAR 

1
0
1
1
</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Bond/clone.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_a<sp/>=<sp/>Bond(10)</highlight></codeline>
<codeline><highlight class="normal">print(bd_a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_b<sp/>=<sp/>bd_a;</highlight></codeline>
<codeline><highlight class="normal">bd_c<sp/>=<sp/>bd_a.clone();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(bd_b<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>bd_a)<sp/></highlight><highlight class="comment">#true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(bd_c<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>bd_a)<sp/></highlight><highlight class="comment">#false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(bd_b<sp/>==<sp/>bd_a)<sp/></highlight><highlight class="comment">#true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(bd_c<sp/>==<sp/>bd_a)<sp/></highlight><highlight class="comment">#true</highlight><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: REGULAR 


True
False
True
True
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="403" column="10" bodyfile="include/Bond.hpp" bodystart="403" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ab8645d03cf115b59e946f329f3bba122" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::combineBond_</definition>
        <argsstring>(const Bond &amp;bd_in, const bool &amp;is_grp=true)</argsstring>
        <name>combineBond_</name>
        <qualifiedname>cytnx::Bond::combineBond_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bd_in</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_grp</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>combine the input bond with self, inplacely </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the bond that to be combined with self.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBondinplace.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>create<sp/>a<sp/>non-symmetry,<sp/>regular<sp/>bond<sp/>(BD_REG)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>dimension<sp/>10</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_b<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bd_a.<ref refid="classcytnx_1_1Bond_1ab8645d03cf115b59e946f329f3bba122" kindref="member">combineBond_</ref>(bd_b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>2.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>symmetry<sp/>bonds,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>U1<sp/>x<sp/>Z2<sp/>multiple<sp/>symmetry</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_c<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-4,<sp/>1)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_d<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(3,<sp/>0)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_d<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bd_c.<ref refid="classcytnx_1_1Bond_1ab8645d03cf115b59e946f329f3bba122" kindref="member">combineBond_</ref>(bd_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: REGULAR 

Dim = 5 |type: REGULAR 

Dim = 50 |type: REGULAR 

Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1

Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0

Dim = 12 |type: &lt;BRA     
 U1::  +0 +2 -1 +3 +2 +4 +1 +5 -4 -2 -5 -1
 Z2::  +1 +0 +0 +1 +0 +1 +1 +0 +1 +0 +0 +1

</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBondinplace.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal">bd_a<sp/>=<sp/>Bond(10)</highlight></codeline>
<codeline><highlight class="normal">print(bd_a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_b<sp/>=<sp/>Bond(5)</highlight></codeline>
<codeline><highlight class="normal">print(bd_b)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_a.combineBond_(bd_b)</highlight></codeline>
<codeline><highlight class="normal">print(bd_a)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_c<sp/>=<sp/>Bond(BD_BRA,[Qs(0,1)&gt;&gt;1,Qs(2,0)&gt;&gt;1,Qs(-4,1)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">print(bd_c)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_d<sp/>=<sp/>Bond(BD_BRA,[Qs(0,0)&gt;&gt;1,Qs(2,1)&gt;&gt;1,Qs(-1,1)&gt;&gt;1,Qs(3,0)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)])</highlight></codeline>
<codeline><highlight class="normal">print(bd_d)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">bd_c.combineBond_(bd_d)</highlight></codeline>
<codeline><highlight class="normal">print(bd_c)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: REGULAR 


Dim = 5 |type: REGULAR 


Dim = 50 |type: REGULAR 


Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1


Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0


Dim = 12 |type: &lt;BRA     
 U1::  +0 +2 -1 +3 +2 +4 +1 +5 -4 -2 -5 -1
 Z2::  +1 +0 +0 +1 +0 +1 +1 +0 +1 +0 +0 +1


</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="423" column="10" bodyfile="include/Bond.hpp" bodystart="423" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a4714d9891e02b2aebf6756ec68c25e5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref></type>
        <definition>Bond cytnx::Bond::combineBond</definition>
        <argsstring>(const Bond &amp;bd_in, const bool &amp;is_grp=true) const</argsstring>
        <name>combineBond</name>
        <qualifiedname>cytnx::Bond::combineBond</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bd_in</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_grp</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>combine the input bond with self, and return a new combined <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bd_in</parametername>
</parameternamelist>
<parameterdescription>
<para>the bond that to be combined. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>] a new combined bond instance.</para>
</simplesect>
<heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBond.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>create<sp/>a<sp/>non-symmetry,<sp/>regular<sp/>bond<sp/>(BD_REG)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>dimension<sp/>10</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(10,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_b<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(15,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_c<sp/>=<sp/>bd_a.<ref refid="classcytnx_1_1Bond_1a4714d9891e02b2aebf6756ec68c25e5c" kindref="member">combineBond</ref>(bd_b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>2.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>symmetry<sp/>bonds,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>U1<sp/>x<sp/>Z2<sp/>multiple<sp/>symmetry</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_d<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-4,<sp/>1)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_e<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(3,<sp/>0)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_f<sp/>=<sp/>bd_d.<ref refid="classcytnx_1_1Bond_1a4714d9891e02b2aebf6756ec68c25e5c" kindref="member">combineBond</ref>(bd_e);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_f<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_d<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_e<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 150 |type: KET&gt;     

Dim = 10 |type: KET&gt;     

Dim = 15 |type: KET&gt;     

Dim = 12 |type: &lt;BRA     
 U1::  +0 +2 -1 +3 +2 +4 +1 +5 -4 -2 -5 -1
 Z2::  +1 +0 +0 +1 +0 +1 +1 +0 +1 +0 +0 +1

Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1

Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0

</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBond.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_a<sp/>=<sp/>Bond(10,BD_KET)</highlight></codeline>
<codeline><highlight class="normal">bd_b<sp/>=<sp/>Bond(15,BD_KET)</highlight></codeline>
<codeline><highlight class="normal">bd_c<sp/>=<sp/>bd_a.combineBond(bd_b)</highlight></codeline>
<codeline><highlight class="normal">print(bd_a)</highlight></codeline>
<codeline><highlight class="normal">print(bd_b)</highlight></codeline>
<codeline><highlight class="normal">print(bd_c)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_d<sp/>=<sp/>Bond(BD_BRA,[Qs(0,1)&gt;&gt;1,Qs(2,0)&gt;&gt;1,Qs(-4,1)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">bd_e<sp/>=<sp/>Bond(BD_BRA,[Qs(0,0)&gt;&gt;1,Qs(2,1)&gt;&gt;1,Qs(-1,1)&gt;&gt;1,Qs(3,0)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)])</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_f<sp/>=<sp/>bd_d.combineBond(bd_e)</highlight></codeline>
<codeline><highlight class="normal">print(bd_f)</highlight></codeline>
<codeline><highlight class="normal">print(bd_d)</highlight></codeline>
<codeline><highlight class="normal">print(bd_e)</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: KET&gt;     


Dim = 15 |type: KET&gt;     


Dim = 150 |type: KET&gt;     


Dim = 12 |type: &lt;BRA     
 U1::  +0 +2 -1 +3 +2 +4 +1 +5 -4 -2 -5 -1
 Z2::  +1 +0 +0 +1 +0 +1 +1 +0 +1 +0 +0 +1


Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1


Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0


</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="442" column="10" bodyfile="include/Bond.hpp" bodystart="442" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a5282d90bef238154945707bffca76875" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref></type>
        <definition>Bond cytnx::Bond::combineBonds</definition>
        <argsstring>(const std::vector&lt; Bond &gt; &amp;bds, const bool &amp;is_grp=true)</argsstring>
        <name>combineBonds</name>
        <qualifiedname>cytnx::Bond::combineBonds</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bds</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_grp</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>combine multiple input bonds with self, and return a new combined <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bds</parametername>
</parameternamelist>
<parameterdescription>
<para>the bonds that to be combined with self. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>] a new combined bond instance.</para>
</simplesect>
<heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBonds.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>multiple<sp/>KET<sp/>bonds</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(10,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_b<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(4,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_c<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(5,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_d<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(2,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>this<sp/>will<sp/>not<sp/>create<sp/>copy<sp/>instances<sp/>for<sp/>each<sp/>Bond<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>it<sp/>is<sp/>both<sp/>memory<sp/>efficient<sp/>and<sp/>fast!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_all<sp/>=<sp/>bd_a.<ref refid="classcytnx_1_1Bond_1a5282d90bef238154945707bffca76875" kindref="member">combineBonds</ref>({bd_b,<sp/>bd_c,<sp/>bd_d});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_d<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_all<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>2.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>symmetry<sp/>bonds,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>U1<sp/>x<sp/>Z2<sp/>multiple<sp/>symmetry</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_sym_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-4,<sp/>1)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_sym_b<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(3,<sp/>0)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_sym_c<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(1,<sp/>1)&gt;&gt;2,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-2,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>0)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_sym_d<sp/>=<sp/>bd_sym_a.<ref refid="classcytnx_1_1Bond_1a5282d90bef238154945707bffca76875" kindref="member">combineBonds</ref>({bd_sym_b,<sp/>bd_sym_c});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_d<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: KET&gt;     

Dim = 4 |type: KET&gt;     

Dim = 5 |type: KET&gt;     

Dim = 2 |type: KET&gt;     

Dim = 400 |type: KET&gt;     

Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1

Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0

Dim = 5 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0
 Z2::  +1 +1 +1 +0 +0

Dim = 60 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0 +3 +3 +1 +0 +2 +0 +0 -2 -3 -1 +4 +4 +2 +1 +3 +3 +3 +1 +0 +2 +5 +5 +3 +2 +4 +2 +2 +0 -1 +1 +6 +6 +4 +3 +5 -3 -3 -5 -6 -4 -1 -1 -3 -4 -2 -4 -4 -6 -7 -5 +0 +0 -2 -3 -1
 Z2::  +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1

</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBonds.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_a<sp/>=<sp/>Bond(10,BD_KET);</highlight></codeline>
<codeline><highlight class="normal">bd_b<sp/>=<sp/>Bond(4,BD_KET);</highlight></codeline>
<codeline><highlight class="normal">bd_c<sp/>=<sp/>Bond(5,BD_KET);</highlight></codeline>
<codeline><highlight class="normal">bd_d<sp/>=<sp/>Bond(2,BD_KET);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_all<sp/>=<sp/>bd_a.combineBonds([bd_b,bd_c,bd_d]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_a<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_b<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_c<sp/>)<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_d<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_all<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_sym_a<sp/>=<sp/>Bond(BD_BRA,[Qs(0,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(2,0)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-4,1)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">bd_sym_b<sp/>=<sp/>Bond(BD_BRA,[Qs(0<sp/>,0)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(2<sp/>,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-1,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(3<sp/>,0)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)]);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_sym_c<sp/>=<sp/>Bond(BD_BRA,[Qs(1<sp/>,1)&gt;&gt;2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-1,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-2,0)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(0<sp/>,0)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)]);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_sym_d<sp/>=<sp/>bd_sym_a.combineBonds([bd_sym_b,bd_sym_c]);</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_a<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_b<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_c<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_d<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: KET&gt;     


Dim = 4 |type: KET&gt;     


Dim = 5 |type: KET&gt;     


Dim = 2 |type: KET&gt;     


Dim = 400 |type: KET&gt;     


Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1


Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0


Dim = 5 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0
 Z2::  +1 +1 +1 +0 +0


Dim = 60 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0 +3 +3 +1 +0 +2 +0 +0 -2 -3 -1 +4 +4 +2 +1 +3 +3 +3 +1 +0 +2 +5 +5 +3 +2 +4 +2 +2 +0 -1 +1 +6 +6 +4 +3 +5 -3 -3 -5 -6 -4 -1 -1 -3 -4 -2 -4 -4 -6 -7 -5 +0 +0 -2 -3 -1
 Z2::  +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1


</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="463" column="10" bodyfile="include/Bond.hpp" bodystart="463" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a38a40e58d24fb4d75597df25b7bf8918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::combineBonds_</definition>
        <argsstring>(const std::vector&lt; Bond &gt; &amp;bds, const bool &amp;is_grp=true)</argsstring>
        <name>combineBonds_</name>
        <qualifiedname>cytnx::Bond::combineBonds_</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bds</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_grp</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>combine multiple input bonds with self, inplacely </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bds</parametername>
</parameternamelist>
<parameterdescription>
<para>the bonds that to be combined with self.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBonds_.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>1.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>multiple<sp/>KET<sp/>bonds</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(10,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_b<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(4,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_c<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(5,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_d<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(2,<sp/><ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" kindref="member">BD_KET</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_d<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bd_a.<ref refid="classcytnx_1_1Bond_1a38a40e58d24fb4d75597df25b7bf8918" kindref="member">combineBonds_</ref>({bd_b,<sp/>bd_c,<sp/>bd_d});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>2.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>combine<sp/>symmetry<sp/>bonds,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>U1<sp/>x<sp/>Z2<sp/>multiple<sp/>symmetry</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_sym_a<sp/>=<sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-4,<sp/>1)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_sym_b<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(2,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(3,<sp/>0)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref><sp/>bd_sym_c<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref>(<ref refid="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" kindref="member">BD_BRA</ref>,<sp/>{<ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(1,<sp/>1)&gt;&gt;2,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-1,<sp/>1)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(-2,<sp/>0)&gt;&gt;1,<sp/><ref refid="classcytnx_1_1Qs" kindref="compound">Qs</ref>(0,<sp/>0)&gt;&gt;1},<sp/>{<ref refid="classcytnx_1_1Symmetry_1a9218fd66fc9cca64cd3d792e0019592a" kindref="member">Symmetry::U1</ref>(),<sp/><ref refid="classcytnx_1_1Symmetry_1a066083aa705f8fc749b3bbb606f89359" kindref="member">Symmetry::Zn</ref>(2)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_b<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_c<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bd_sym_a.<ref refid="classcytnx_1_1Bond_1a38a40e58d24fb4d75597df25b7bf8918" kindref="member">combineBonds_</ref>({bd_sym_b,<sp/>bd_sym_c});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>bd_sym_a<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: KET&gt;     

Dim = 4 |type: KET&gt;     

Dim = 5 |type: KET&gt;     

Dim = 2 |type: KET&gt;     

Dim = 400 |type: KET&gt;     

Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1

Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0

Dim = 5 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0
 Z2::  +1 +1 +1 +0 +0

Dim = 60 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0 +3 +3 +1 +0 +2 +0 +0 -2 -3 -1 +4 +4 +2 +1 +3 +3 +3 +1 +0 +2 +5 +5 +3 +2 +4 +2 +2 +0 -1 +1 +6 +6 +4 +3 +5 -3 -3 -5 -6 -4 -1 -1 -3 -4 -2 -4 -4 -6 -7 -5 +0 +0 -2 -3 -1
 Z2::  +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1

</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Bond/combineBonds_.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_a<sp/>=<sp/>Bond(10,BD_KET);</highlight></codeline>
<codeline><highlight class="normal">bd_b<sp/>=<sp/>Bond(4,BD_KET);</highlight></codeline>
<codeline><highlight class="normal">bd_c<sp/>=<sp/>Bond(5,BD_KET);</highlight></codeline>
<codeline><highlight class="normal">bd_d<sp/>=<sp/>Bond(2,BD_KET);</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_a<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_b<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_c<sp/>)<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_d<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_a.combineBonds_([bd_b,bd_c,bd_d]);</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_a<sp/>)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_sym_a<sp/>=<sp/>Bond(BD_BRA,[Qs(0,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(2,0)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-4,1)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">bd_sym_b<sp/>=<sp/>Bond(BD_BRA,[Qs(0<sp/>,0)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(2<sp/>,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-1,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(3<sp/>,0)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)]);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bd_sym_c<sp/>=<sp/>Bond(BD_BRA,[Qs(1<sp/>,1)&gt;&gt;2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-1,1)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(-2,0)&gt;&gt;1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qs(0<sp/>,0)&gt;&gt;1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Symmetry.U1(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetry.Zn(2)]);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_a<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_b<sp/>)</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_c<sp/>)</highlight></codeline>
<codeline><highlight class="normal">bd_sym_a.combineBonds_([bd_sym_b,bd_sym_c]);</highlight></codeline>
<codeline><highlight class="normal">print(<sp/>bd_sym_a<sp/>)</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Dim = 10 |type: KET&gt;     


Dim = 4 |type: KET&gt;     


Dim = 5 |type: KET&gt;     


Dim = 2 |type: KET&gt;     


Dim = 400 |type: KET&gt;     


Dim = 3 |type: &lt;BRA     
 U1::  +0 +2 -4
 Z2::  +1 +0 +1


Dim = 4 |type: &lt;BRA     
 U1::  +0 +2 -1 +3
 Z2::  +0 +1 +1 +0


Dim = 5 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0
 Z2::  +1 +1 +1 +0 +0


Dim = 60 |type: &lt;BRA     
 U1::  +1 +1 -1 -2 +0 +3 +3 +1 +0 +2 +0 +0 -2 -3 -1 +4 +4 +2 +1 +3 +3 +3 +1 +0 +2 +5 +5 +3 +2 +4 +2 +2 +0 -1 +1 +6 +6 +4 +3 +5 -3 -3 -5 -6 -4 -1 -1 -3 -4 -2 -4 -4 -6 -7 -5 +0 +0 -2 -3 -1
 Z2::  +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1 +1 +1 +1 +0 +0 +1 +1 +1 +0 +0 +0 +0 +0 +1 +1


</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="485" column="10" bodyfile="include/Bond.hpp" bodystart="485" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1acf017e64c9629e0a03ee996a4375b06c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; cytnx::Bond::getUniqueQnums</definition>
        <argsstring>(std::vector&lt; cytnx_uint64 &gt; &amp;counts)</argsstring>
        <name>getUniqueQnums</name>
        <qualifiedname>cytnx::Bond::getUniqueQnums</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>counts</declname>
        </param>
        <briefdescription>
<para>return a sorted qnum sets by removing all the duplicate qnum sets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unique_qnums </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="496" column="17" bodyfile="include/Bond.hpp" bodystart="496" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1aa5985c9247209576081c8dc8a97b7c6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; cytnx::Bond::getUniqueQnums</definition>
        <argsstring>()</argsstring>
        <name>getUniqueQnums</name>
        <qualifiedname>cytnx::Bond::getUniqueQnums</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="499" column="17" bodyfile="include/Bond.hpp" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a121d5fb24f782cf66889771146af5da8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref></type>
        <definition>cytnx_uint64 cytnx::Bond::getDegeneracy</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;qnum) const</argsstring>
        <name>getDegeneracy</name>
        <qualifiedname>cytnx::Bond::getDegeneracy</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <briefdescription>
<para>return the degeneracy of specify qnum set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>degeneracy</para>
</simplesect>
<heading level="2">[Note]</heading>
</para>
<para>if the bond has no symmetries, return 0. if the degeneracy queried does not exist, return 0, and the indicies is empty </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="513" column="18" bodyfile="include/Bond.hpp" bodystart="513" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a8d714304116d09bd23e6f05d05aaf7dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref></type>
        <definition>cytnx_uint64 cytnx::Bond::getDegeneracy</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;qnum, std::vector&lt; cytnx_uint64 &gt; &amp;indices) const</argsstring>
        <name>getDegeneracy</name>
        <qualifiedname>cytnx::Bond::getDegeneracy</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="517" column="18" bodyfile="include/Bond.hpp" bodystart="517" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a7de5eb6ed487a48bd9a1f0ef168531b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
        <definition>std::vector&lt; cytnx_uint64 &gt; &amp; cytnx::Bond::getDegeneracies</definition>
        <argsstring>()</argsstring>
        <name>getDegeneracies</name>
        <qualifiedname>cytnx::Bond::getDegeneracies</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="523" column="18" bodyfile="include/Bond.hpp" bodystart="523" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a7275210ee5fa1e3e4ba86928b694f687" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; cytnx_uint64 &gt; &amp; cytnx::Bond::getDegeneracies</definition>
        <argsstring>() const</argsstring>
        <name>getDegeneracies</name>
        <qualifiedname>cytnx::Bond::getDegeneracies</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="526" column="24" bodyfile="include/Bond.hpp" bodystart="526" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a17c1a184dc318c03baddc829171bf01e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt;</type>
        <definition>std::vector&lt; cytnx_uint64 &gt; cytnx::Bond::group_duplicates_</definition>
        <argsstring>()</argsstring>
        <name>group_duplicates_</name>
        <qualifiedname>cytnx::Bond::group_duplicates_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="532" column="17" bodyfile="include/Bond.hpp" bodystart="532" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a5c7a08632dd9e9ac4d6eca53c90ab8bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref></type>
        <definition>Bond cytnx::Bond::group_duplicates</definition>
        <argsstring>(std::vector&lt; cytnx_uint64 &gt; &amp;mapper) const</argsstring>
        <name>group_duplicates</name>
        <qualifiedname>cytnx::Bond::group_duplicates</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>mapper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="536" column="10" bodyfile="include/Bond.hpp" bodystart="536" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1acd82fa191fc9a25f12ae37899a3aea1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::Bond::has_duplicate_qnums</definition>
        <argsstring>() const</argsstring>
        <name>has_duplicate_qnums</name>
        <qualifiedname>cytnx::Bond::has_duplicate_qnums</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="542" column="10" bodyfile="include/Bond.hpp" bodystart="542" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ad18be3898c20c341162a6536fe2e3275" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; cytnx::Bond::calc_reverse_qnums</definition>
        <argsstring>()</argsstring>
        <name>calc_reverse_qnums</name>
        <qualifiedname>cytnx::Bond::calc_reverse_qnums</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="546" column="17" bodyfile="include/Bond.hpp" bodystart="546" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1af1b9953c2262fb7eb41e92f65c741f20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::Save</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>Save</name>
        <qualifiedname>cytnx::Bond::Save</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="550" column="10" bodyfile="src/Bond.cpp" bodystart="584" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ac8bf81d181d2847dded0a51ec451fb5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Bond::Save</definition>
        <argsstring>(const char *fname) const</argsstring>
        <name>Save</name>
        <qualifiedname>cytnx::Bond::Save</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="551" column="10" bodyfile="src/Bond.cpp" bodystart="593" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1afdf23503375937b9fc5fb892685fe056" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::Bond::operator==</definition>
        <argsstring>(const Bond &amp;rhs) const</argsstring>
        <name>operator==</name>
        <qualifiedname>cytnx::Bond::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="560" column="10" bodyfile="src/Bond.cpp" bodystart="563" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1ae2e27cb3fd963f0bb9d599097fa1feb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::Bond::operator!=</definition>
        <argsstring>(const Bond &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <qualifiedname>cytnx::Bond::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="561" column="10" bodyfile="src/Bond.cpp" bodystart="582" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a58e9304701945d156b88fafa8c64971d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref></type>
        <definition>Bond cytnx::Bond::operator*</definition>
        <argsstring>(const Bond &amp;rhs) const</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::Bond::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="563" column="10" bodyfile="include/Bond.hpp" bodystart="563" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a3eb1aba2986bf720dafd48fff2180b49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
        <definition>Bond &amp; cytnx::Bond::operator*=</definition>
        <argsstring>(const Bond &amp;rhs)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Bond::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="565" column="10" bodyfile="include/Bond.hpp" bodystart="565" bodyend="568"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcytnx_1_1Bond_1a553d5676f47535d00090db04947497bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">cytnx::Bond</ref></type>
        <definition>Bond cytnx::Bond::Load</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>Load</name>
        <qualifiedname>cytnx::Bond::Load</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="552" column="24" bodyfile="src/Bond.cpp" bodystart="604" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Bond_1a5f4f9cfd532b527120874cbd45fd133e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Bond" kindref="compound">cytnx::Bond</ref></type>
        <definition>Bond cytnx::Bond::Load</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>Load</name>
        <qualifiedname>cytnx::Bond::Load</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="553" column="24" bodyfile="src/Bond.cpp" bodystart="616" bodyend="626"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>the object contains auxiliary properties for each <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> rank (bond) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/Bond.hpp" line="147" column="3" bodyfile="include/Bond.hpp" bodystart="147" bodyend="569"/>
    <listofallmembers>
      <member refid="classcytnx_1_1Bond_1a80ee6b9a0dd288e74d885f6f288b5a0c" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Bond</name></member>
      <member refid="classcytnx_1_1Bond_1ad7ed392eb1b39599c02bbfbe54c37bd1" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Bond</name></member>
      <member refid="classcytnx_1_1Bond_1afb6df33abf8e641b8774695410c20df5" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Bond</name></member>
      <member refid="classcytnx_1_1Bond_1a67dc45b1aee78ed58c04b7fa886f06c1" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Bond</name></member>
      <member refid="classcytnx_1_1Bond_1ac77af41f1ce762a13c83c2cdee57c3a4" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Bond</name></member>
      <member refid="classcytnx_1_1Bond_1ad18be3898c20c341162a6536fe2e3275" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>calc_reverse_qnums</name></member>
      <member refid="classcytnx_1_1Bond_1a6272e30153df85944fc98bf5419dc1c8" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>clear_type</name></member>
      <member refid="classcytnx_1_1Bond_1a8c4d6443ffe7c3f3ecd8c474fd9a18eb" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>clone</name></member>
      <member refid="classcytnx_1_1Bond_1a4714d9891e02b2aebf6756ec68c25e5c" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>combineBond</name></member>
      <member refid="classcytnx_1_1Bond_1ab8645d03cf115b59e946f329f3bba122" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>combineBond_</name></member>
      <member refid="classcytnx_1_1Bond_1a5282d90bef238154945707bffca76875" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>combineBonds</name></member>
      <member refid="classcytnx_1_1Bond_1a38a40e58d24fb4d75597df25b7bf8918" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>combineBonds_</name></member>
      <member refid="classcytnx_1_1Bond_1aa072647e03a4c797479445bd41b9eacf" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>dim</name></member>
      <member refid="classcytnx_1_1Bond_1a7de5eb6ed487a48bd9a1f0ef168531b9" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>getDegeneracies</name></member>
      <member refid="classcytnx_1_1Bond_1a7275210ee5fa1e3e4ba86928b694f687" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>getDegeneracies</name></member>
      <member refid="classcytnx_1_1Bond_1a121d5fb24f782cf66889771146af5da8" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>getDegeneracy</name></member>
      <member refid="classcytnx_1_1Bond_1a8d714304116d09bd23e6f05d05aaf7dd" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>getDegeneracy</name></member>
      <member refid="classcytnx_1_1Bond_1acf017e64c9629e0a03ee996a4375b06c" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>getUniqueQnums</name></member>
      <member refid="classcytnx_1_1Bond_1aa5985c9247209576081c8dc8a97b7c6a" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>getUniqueQnums</name></member>
      <member refid="classcytnx_1_1Bond_1a5c7a08632dd9e9ac4d6eca53c90ab8bd" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>group_duplicates</name></member>
      <member refid="classcytnx_1_1Bond_1a17c1a184dc318c03baddc829171bf01e" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>group_duplicates_</name></member>
      <member refid="classcytnx_1_1Bond_1acd82fa191fc9a25f12ae37899a3aea1e" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>has_duplicate_qnums</name></member>
      <member refid="classcytnx_1_1Bond_1a707a803fa98fb6a87b5f3c3b3000509f" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Init</name></member>
      <member refid="classcytnx_1_1Bond_1ae7a70f6506d6035ec022ab03099a915d" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Init</name></member>
      <member refid="classcytnx_1_1Bond_1a3034fd7472ae82db9b45742c43dd66d3" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Init</name></member>
      <member refid="classcytnx_1_1Bond_1a553d5676f47535d00090db04947497bf" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Load</name></member>
      <member refid="classcytnx_1_1Bond_1a5f4f9cfd532b527120874cbd45fd133e" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Load</name></member>
      <member refid="classcytnx_1_1Bond_1acd46a218add6a88c1cc9035b06adb7b6" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Nsym</name></member>
      <member refid="classcytnx_1_1Bond_1ae2e27cb3fd963f0bb9d599097fa1feb7" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>operator!=</name></member>
      <member refid="classcytnx_1_1Bond_1a58e9304701945d156b88fafa8c64971d" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>operator*</name></member>
      <member refid="classcytnx_1_1Bond_1a3eb1aba2986bf720dafd48fff2180b49" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Bond_1afdf23503375937b9fc5fb892685fe056" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>operator==</name></member>
      <member refid="classcytnx_1_1Bond_1ab4f05193a012bd9a077374b5f305e898" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>qnums</name></member>
      <member refid="classcytnx_1_1Bond_1a01299b8751c7d71c1bc2a6afe900da2c" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>qnums</name></member>
      <member refid="classcytnx_1_1Bond_1a491a89aa4434d4056dd3e5de7e70e1e7" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>qnums_clone</name></member>
      <member refid="classcytnx_1_1Bond_1a6f47360919864f12affe9fda49b03994" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>redirect</name></member>
      <member refid="classcytnx_1_1Bond_1aa023d872df52de5594b963e109ab7723" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>redirect_</name></member>
      <member refid="classcytnx_1_1Bond_1a31c8ff7b0817c37e67a80a225f5bd758" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>retype</name></member>
      <member refid="classcytnx_1_1Bond_1af1b9953c2262fb7eb41e92f65c741f20" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Save</name></member>
      <member refid="classcytnx_1_1Bond_1ac8bf81d181d2847dded0a51ec451fb5c" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>Save</name></member>
      <member refid="classcytnx_1_1Bond_1a01be559109c1c7ecaccd0916a2954239" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>set_type</name></member>
      <member refid="classcytnx_1_1Bond_1a408221e843ca57b779f5a5717188a8a8" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>syms</name></member>
      <member refid="classcytnx_1_1Bond_1abc64fadea2b867f4649df8e775803a39" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>syms</name></member>
      <member refid="classcytnx_1_1Bond_1a95a33764b6adf5644e91578c908504ca" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>syms_clone</name></member>
      <member refid="classcytnx_1_1Bond_1a8517743cec9589ed551114ea7e55fbb1" prot="public" virt="non-virtual"><scope>cytnx::Bond</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
