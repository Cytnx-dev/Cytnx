<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classcytnx_1_1Tensor" kind="class" language="C++" prot="public">
    <compoundname>cytnx::Tensor</compoundname>
    <includes refid="Tensor_8hpp" local="no">Tensor.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab355c158b0ba1abb20a344c092fb8942" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::Save</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>Save</name>
        <qualifiedname>cytnx::Tensor::Save</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Save current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> to file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>file name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
description: save the <ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref> to file with file path specify with input param &apos;fname&apos; with postfix &quot;.cytn&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="619" column="10" bodyfile="src/Tensor.cpp" bodystart="876" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a7465b1ca730e16718c220dfca046412c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::Save</definition>
        <argsstring>(const char *fname) const</argsstring>
        <name>Save</name>
        <qualifiedname>cytnx::Tensor::Save</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="620" column="10" bodyfile="src/Tensor.cpp" bodystart="885" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a55d945916b1e3771f100523a5e1de319" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::Tofile</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>Tofile</name>
        <qualifiedname>cytnx::Tensor::Tofile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="621" column="10" bodyfile="src/Tensor.cpp" bodystart="852" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a65f8d6a498df94116ed294c10033ac8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::Tofile</definition>
        <argsstring>(const char *fname) const</argsstring>
        <name>Tofile</name>
        <qualifiedname>cytnx::Tensor::Tofile</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="622" column="10" bodyfile="src/Tensor.cpp" bodystart="860" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad6ca11678a82d78dfa5bd4d62760f75c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::Tofile</definition>
        <argsstring>(std::fstream &amp;f) const</argsstring>
        <name>Tofile</name>
        <qualifiedname>cytnx::Tensor::Tofile</qualifiedname>
        <param>
          <type>std::fstream &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="623" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aee8c0febe1794bd79edc52f2caac9cc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::Init</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;shape, const unsigned int &amp;dtype=Type.Double, const int &amp;device=-1, const bool &amp;init_zero=true)</argsstring>
        <name>Init</name>
        <qualifiedname>cytnx::Tensor::Init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>init_zero</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>initialize a <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>the shape of tensor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of tensor. This can be any of type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that tensor to be created. This can be cytnx::Device.cpu or cytnx::Device.cuda+&lt;gpuid&gt;</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note]<orderedlist>
<listitem><para>the content of <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> created will be un-initialize! See <ref refid="namespacecytnx_1ab8a79a03fb0465f3eb2641017f3f1755" kindref="member">zeros()</ref>, <ref refid="namespacecytnx_1a83fb7bbe73368751a0d0f535d4a10a33" kindref="member">ones() </ref> or <ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange() </ref> for generating an <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/Init.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>Create<sp/>a<sp/>Tensor<sp/>with</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>shape<sp/>(3,4,5),</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>dtype<sp/>=Type.Double<sp/>[default],</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>device=Device.cpu<sp/>[default]</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Create<sp/>a<sp/>Tensor<sp/>with</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>shape<sp/>(3,4,5),</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>dtype<sp/>=Type.Uint64,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>device=Device.cpu<sp/>[default],</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[Note]<sp/>the<sp/>dtype<sp/>can<sp/>be<sp/>any<sp/>one<sp/>of<sp/>the<sp/>supported<sp/>type.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B({3,<sp/>4,<sp/>5},<sp/><ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Uint64);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>Initialize<sp/>a<sp/>Tensor<sp/>with</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>shape<sp/>(3,4,5),</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>dtype<sp/>=Type.Double,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>device=Device.cuda+0,<sp/>(on<sp/>gpu<sp/>with<sp/>gpu-id=0)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>[Note]<sp/>the<sp/>gpu<sp/>device<sp/>can<sp/>be<sp/>set<sp/>with<sp/>Device.cuda+&lt;gpu-id&gt;</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>C({3,<sp/>4,<sp/>5},<sp/><ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double,<sp/><ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cuda<sp/>+<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>C<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>Create<sp/>an<sp/>empty<sp/>Tensor,<sp/>and<sp/>init<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>D;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>D.<ref refid="classcytnx_1_1Tensor_1aee8c0febe1794bd79edc52f2caac9cc3" kindref="member">Init</ref>({3,<sp/>4,<sp/>5},<sp/><ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double,<sp/><ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cpu);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



Total elem: 60
type  : Uint64
cytnx device: CPU
Shape : (3,4,5)
[[[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]]


</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/Init.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#1.<sp/>Create<sp/>a<sp/>Tensor<sp/>with<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>shape<sp/>(3,4,5),</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>dtype<sp/>=Type.Double<sp/>[default],</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>device=Device.cpu<sp/>[default]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Tensor([3,4,5])</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#2.<sp/>Create<sp/>a<sp/>Tensor<sp/>with<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>shape<sp/>(3,4,5),</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>dtype<sp/>=Type.Uint64,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>device=Device.cpu<sp/>[default],</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>[Note]<sp/>the<sp/>dtype<sp/>can<sp/>be<sp/>any<sp/>one<sp/>of<sp/>the<sp/>supported<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>Tensor([3,4,5],dtype=Type.Uint64)</highlight></codeline>
<codeline><highlight class="normal">print(B)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#3.<sp/>Initialize<sp/>a<sp/>Tensor<sp/>with<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>shape<sp/>(3,4,5),</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>dtype<sp/>=Type.Double,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>device=Device.cuda+0,<sp/>(on<sp/>gpu<sp/>with<sp/>gpu-id=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>[Note]<sp/>the<sp/>gpu<sp/>device<sp/>can<sp/>be<sp/>set<sp/>with<sp/>Device.cuda+&lt;gpu-id&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">C<sp/>=<sp/>Tensor([3,4,5],dtype=Type.Double,device=Device.cuda+0);</highlight></codeline>
<codeline><highlight class="normal">print(C)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#4.<sp/>Create<sp/>an<sp/>empty<sp/>Tensor,<sp/>and<sp/>init<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">D<sp/>=<sp/>Tensor()</highlight></codeline>
<codeline><highlight class="normal">D.Init([3,4,5],dtype=Type.Double,device=Device.cpu);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]]




Total elem: 60
type  : Uint64
cytnx device: CPU
Shape : (3,4,5)
[[[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]]




Total elem: 60
type  : Double (Float64)
cytnx device: CUDA/GPU-id:0
Shape : (3,4,5)
[[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="690" column="10" bodyfile="include/Tensor.hpp" bodystart="690" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a1b1568fca101fb372411927b5c5ba9d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::Tensor::Tensor</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;shape, const unsigned int &amp;dtype=Type.Double, const int &amp;device=-1, const bool &amp;init_zero=1)</argsstring>
        <name>Tensor</name>
        <qualifiedname>cytnx::Tensor::Tensor</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>init_zero</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="707" column="5" bodyfile="include/Tensor.hpp" bodystart="707" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a4472af6f8e825a13440e832bf82fb627" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int cytnx::Tensor::dtype</definition>
        <argsstring>() const</argsstring>
        <name>dtype</name>
        <qualifiedname>cytnx::Tensor::dtype</qualifiedname>
        <briefdescription>
<para>the dtype-id of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[cytnx_uint64] the dtype_id of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="736" column="18" bodyfile="include/Tensor.hpp" bodystart="736" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ac6d3310eb4defbdacf662dcd81d8fe09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int cytnx::Tensor::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <qualifiedname>cytnx::Tensor::device</qualifiedname>
        <briefdescription>
<para>the device-id of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[cytnx_int64] the device_id of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="743" column="9" bodyfile="include/Tensor.hpp" bodystart="743" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a9e09106c7529e8be90caa52e1541e498" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cytnx::Tensor::dtype_str</definition>
        <argsstring>() const</argsstring>
        <name>dtype_str</name>
        <qualifiedname>cytnx::Tensor::dtype_str</qualifiedname>
        <briefdescription>
<para>the dtype (in string) of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[std::string] the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="750" column="17" bodyfile="include/Tensor.hpp" bodystart="750" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a335f7625fa01784f49b2223238d0c14e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cytnx::Tensor::device_str</definition>
        <argsstring>() const</argsstring>
        <name>device_str</name>
        <qualifiedname>cytnx::Tensor::device_str</qualifiedname>
        <briefdescription>
<para>the device (in string) of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[std::string] the device of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="757" column="17" bodyfile="include/Tensor.hpp" bodystart="757" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; cytnx_uint64 &gt; &amp; cytnx::Tensor::shape</definition>
        <argsstring>() const</argsstring>
        <name>shape</name>
        <qualifiedname>cytnx::Tensor::shape</qualifiedname>
        <briefdescription>
<para>the shape of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[std::vector&lt;cytnx_uint64&gt;] the shape of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="764" column="23" bodyfile="include/Tensor.hpp" bodystart="764" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aa3ee5ed793cacd43d3fadbd92d7920a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref></type>
        <definition>cytnx_uint64 cytnx::Tensor::rank</definition>
        <argsstring>() const</argsstring>
        <name>rank</name>
        <qualifiedname>cytnx::Tensor::rank</qualifiedname>
        <briefdescription>
<para>the rank of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[cytnx_uint64] the rank of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="770" column="18" bodyfile="include/Tensor.hpp" bodystart="770" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a5e2248e9babdb786167ed349df9084ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>cytnx::Tensor::clone</qualifiedname>
        <briefdescription>
<para>return a clone of the current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>]</para>
</simplesect>
description:<linebreak/>
 In C++ API, the behavior of assignment operator is designed to have same behavior as python,<linebreak/>
 to have a copy of the current tensor, we call clone to return a copy.</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/clone.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A;<sp/><sp/></highlight><highlight class="comment">//<sp/>B<sp/>shares<sp/>same<sp/>object<sp/>with<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>C<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1a5e2248e9babdb786167ed349df9084ae" kindref="member">clone</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>is()<sp/>to<sp/>check<sp/>if<sp/>two<sp/>variable<sp/>shares<sp/>same<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>is(B,<sp/>A)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>is(C,<sp/>A)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>1
0
</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/clone.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Tensor([3,4,5])</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A</highlight></codeline>
<codeline><highlight class="normal">C<sp/>=<sp/>A.clone()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(B<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>A)</highlight></codeline>
<codeline><highlight class="normal">print(C<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>True
False
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="790" column="12" bodyfile="include/Tensor.hpp" bodystart="790" bodyend="794"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1acf7f697a9434f9bc98a7d00a555ee982" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::to</definition>
        <argsstring>(const int &amp;device) const</argsstring>
        <name>to</name>
        <qualifiedname>cytnx::Tensor::to</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>copy a tensor to new device </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device-id that is moving to. it can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>]</para>
</simplesect>
description:<linebreak/>
 if the device-id is the same as current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>&apos;s device, then return self.<linebreak/>
 otherwise, return a copy of instance that located on the target device. <linebreak/>
 see also: <ref refid="classcytnx_1_1Tensor_1a114a31fbb8bf4a90f150b6a67e42183a" kindref="member">Tensor.to_ </ref> <linebreak/>
 <heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/to.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>tensor<sp/>to<sp/>different<sp/>device<sp/>by<sp/>creating<sp/>a<sp/>clone<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1acf7f697a9434f9bc98a7d00a555ee982" kindref="member">to</ref>(<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cuda<sp/>+<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1a335f7625fa01784f49b2223238d0c14e" kindref="member">device_str</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.device_str()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim></verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/to.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Tensor([3,4,5])</highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A.to(Device.cuda+0);</highlight></codeline>
<codeline><highlight class="normal">print(B.device_str())</highlight></codeline>
<codeline><highlight class="normal">print(A.device_str())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>cytnx device: CUDA/GPU-id:0
cytnx device: CPU
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="816" column="12" bodyfile="include/Tensor.hpp" bodystart="816" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a114a31fbb8bf4a90f150b6a67e42183a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::to_</definition>
        <argsstring>(const int &amp;device)</argsstring>
        <name>to_</name>
        <qualifiedname>cytnx::Tensor::to_</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>move the current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> to the device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device-id that is moving to. it can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
description:<linebreak/>
 see also: <ref refid="classcytnx_1_1Tensor_1acf7f697a9434f9bc98a7d00a555ee982" kindref="member">Tensor.to </ref><linebreak/>
 <heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/to_.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>instance<sp/>tensor<sp/>to<sp/>different<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a114a31fbb8bf4a90f150b6a67e42183a" kindref="member">to_</ref>(<ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">Device</ref>.cuda<sp/>+<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.device_str()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim></verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/to_.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Tensor([3,4,5])</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A.to_(Device.cuda+0);</highlight></codeline>
<codeline><highlight class="normal">print(A.device_str())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>cytnx device: CUDA/GPU-id:0
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="839" column="10" bodyfile="include/Tensor.hpp" bodystart="839" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aa66028524d53c79d62714b96cd274ccd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const bool &amp;</type>
        <definition>const bool &amp; cytnx::Tensor::is_contiguous</definition>
        <argsstring>() const</argsstring>
        <name>is_contiguous</name>
        <qualifiedname>cytnx::Tensor::is_contiguous</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="841" column="16" bodyfile="include/Tensor.hpp" bodystart="841" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a4239ec84bd34f634a822eeff416f4d63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::permute_</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;rnks)</argsstring>
        <name>permute_</name>
        <qualifiedname>cytnx::Tensor::permute_</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>rnks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="843" column="12" bodyfile="include/Tensor.hpp" bodystart="843" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1adbdc402a8c4d6d738523a888bcf9c0c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::permute</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;rnks) const</argsstring>
        <name>permute</name>
        <qualifiedname>cytnx::Tensor::permute</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>rnks</declname>
        </param>
        <briefdescription>
<para>perform tensor permute on the <ref refid="classcytnx_1_1Tensor" kindref="compound">cytnx::Tensor</ref> and return a new instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rnks</parametername>
</parameternamelist>
<parameterdescription>
<para>the permute indices, should have No. of elements equal to the rank of tensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] a permuted new <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></para>
</simplesect>
<heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/permute.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.<ref refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" kindref="member">shape</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1adbdc402a8c4d6d738523a888bcf9c0c2" kindref="member">permute</ref>({0,<sp/>2,<sp/>1});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" kindref="member">shape</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>is(B,<sp/>A)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>be<sp/>false,<sp/>different<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1a0eca35d876d22d96d1aef9f959a946fe" kindref="member">same_data</ref>(A)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>be<sp/>true,<sp/>since<sp/>no<sp/>new<sp/>pointer/memory<sp/>is<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Vector Print:
Total Elements:3
[3, 4, 5]

Vector Print:
Total Elements:3
[3, 5, 4]

0
1
</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/permute.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Tensor([3,4,5])</highlight></codeline>
<codeline><highlight class="normal">print(A.shape())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A.permute(0,2,1)</highlight></codeline>
<codeline><highlight class="normal">print(B.shape())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(B<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>A)<sp/></highlight><highlight class="comment">#False</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(B.same_data(A))<sp/></highlight><highlight class="comment">#True</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>[3, 4, 5]
[3, 5, 4]
False
True
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="871" column="12" bodyfile="include/Tensor.hpp" bodystart="871" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a4d7da181303c588f2ab84bffda435525" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::contiguous</definition>
        <argsstring>() const</argsstring>
        <name>contiguous</name>
        <qualifiedname>cytnx::Tensor::contiguous</qualifiedname>
        <briefdescription>
<para>Make the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> contiguous by coalescing the memory (storage). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] a new <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> that is with contiguous memory (storage).</para>
</simplesect>
See also <ref refid="classcytnx_1_1Tensor_1a3d4342299e6951dae13b6136b89f1d53" kindref="member">Tensor::contiguous_() </ref></para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/contiguous.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.<ref refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" kindref="member">shape</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1adbdc402a8c4d6d738523a888bcf9c0c2" kindref="member">permute</ref>({0,<sp/>2,<sp/>1});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" kindref="member">shape</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[Note]<sp/>permute<sp/>will<sp/>not<sp/>actually<sp/>move<sp/>the<sp/>internal<sp/>memory<sp/>(storage)<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>called<sp/>non-contiguous<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>memory<sp/>layout<sp/>will<sp/>only<sp/>move<sp/>when<sp/>Tensor.contiguous()<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>C<sp/>=<sp/>B.<ref refid="classcytnx_1_1Tensor_1a4d7da181303c588f2ab84bffda435525" kindref="member">contiguous</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>moving<sp/>the<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1aa66028524d53c79d62714b96cd274ccd" kindref="member">is_contiguous</ref>()<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>C.<ref refid="classcytnx_1_1Tensor_1aa66028524d53c79d62714b96cd274ccd" kindref="member">is_contiguous</ref>()<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>C.<ref refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" kindref="member">shape</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>C.<ref refid="classcytnx_1_1Tensor_1a0eca35d876d22d96d1aef9f959a946fe" kindref="member">same_data</ref>(B)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1a0eca35d876d22d96d1aef9f959a946fe" kindref="member">same_data</ref>(A)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Vector Print:
Total Elements:3
[3, 4, 5]

Vector Print:
Total Elements:3
[3, 5, 4]

0
1
Vector Print:
Total Elements:3
[3, 5, 4]

0
1
</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/contiguous.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Tensor([3,4,5])</highlight></codeline>
<codeline><highlight class="normal">print(A.shape())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A.permute(0,2,1)</highlight></codeline>
<codeline><highlight class="normal">print(B.shape())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">C<sp/>=<sp/>B.contiguous()</highlight></codeline>
<codeline><highlight class="normal">print(B.is_contiguous())<sp/></highlight><highlight class="comment">#false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(C.is_contiguous())<sp/></highlight><highlight class="comment">#true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(C.shape())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>[3, 4, 5]
[3, 5, 4]
False
True
[3, 5, 4]
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="900" column="12" bodyfile="include/Tensor.hpp" bodystart="900" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a3d4342299e6951dae13b6136b89f1d53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::contiguous_</definition>
        <argsstring>()</argsstring>
        <name>contiguous_</name>
        <qualifiedname>cytnx::Tensor::contiguous_</qualifiedname>
        <briefdescription>
<para>Make the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> contiguous by coalescing the memory (storage), inplacely. </para>
        </briefdescription>
        <detaileddescription>
<para>See also <ref refid="classcytnx_1_1Tensor_1a4d7da181303c588f2ab84bffda435525" kindref="member">Tensor::contiguous() </ref></para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/contiguous_.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.<ref refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" kindref="member">shape</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1adbdc402a8c4d6d738523a888bcf9c0c2" kindref="member">permute</ref>({0,<sp/>2,<sp/>1});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" kindref="member">shape</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//[Note]<sp/>permute<sp/>will<sp/>not<sp/>actually<sp/>move<sp/>the<sp/>internal<sp/>memory<sp/>(storage)<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>called<sp/>non-contiguous<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>memory<sp/>layout<sp/>will<sp/>only<sp/>move<sp/>when<sp/>Tensor.contiguous()<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1aa66028524d53c79d62714b96cd274ccd" kindref="member">is_contiguous</ref>()<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>B.<ref refid="classcytnx_1_1Tensor_1a3d4342299e6951dae13b6136b89f1d53" kindref="member">contiguous_</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>moving<sp/>the<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B.<ref refid="classcytnx_1_1Tensor_1aa66028524d53c79d62714b96cd274ccd" kindref="member">is_contiguous</ref>()<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>Vector Print:
Total Elements:3
[3, 4, 5]

Vector Print:
Total Elements:3
[3, 5, 4]

0
1
</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/contiguous_.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>Tensor([3,4,5])</highlight></codeline>
<codeline><highlight class="normal">print(A.shape())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A.permute(0,2,1)</highlight></codeline>
<codeline><highlight class="normal">print(B.shape())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(B.is_contiguous())<sp/></highlight><highlight class="comment">#false</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B.contiguous_()</highlight></codeline>
<codeline><highlight class="normal">print(B.is_contiguous())<sp/></highlight><highlight class="comment">#true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>[3, 4, 5]
[3, 5, 4]
False
True
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="921" column="12" bodyfile="include/Tensor.hpp" bodystart="921" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a3723449528b9a20dd46c32c9e042b8f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::reshape_</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;new_shape)</argsstring>
        <name>reshape_</name>
        <qualifiedname>cytnx::Tensor::reshape_</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
<para>reshape the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>, inplacely </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>the new shape of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
See also <ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">Tensor::reshape() </ref></para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/reshape_.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange</ref>(60);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>two<sp/>ways<sp/>you<sp/>can<sp/>assign<sp/>the<sp/>argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>1:<sp/>more<sp/>like<sp/>&apos;c++&apos;<sp/>way:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a3723449528b9a20dd46c32c9e042b8f0" kindref="member">reshape_</ref>({5,<sp/>12});<sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>the<sp/>braket{}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>2:<sp/>more<sp/>like<sp/>&apos;python&apos;<sp/>way:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a3723449528b9a20dd46c32c9e042b8f0" kindref="member">reshape_</ref>(5,<sp/>4,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (60)
[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (5,12)
[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 ]
 [1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 ]
 [2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 ]
 [3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 ]
 [4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (5,4,3)
[[[0.00000e+00 1.00000e+00 2.00000e+00 ]
  [3.00000e+00 4.00000e+00 5.00000e+00 ]
  [6.00000e+00 7.00000e+00 8.00000e+00 ]
  [9.00000e+00 1.00000e+01 1.10000e+01 ]]
 [[1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 ]
  [1.80000e+01 1.90000e+01 2.00000e+01 ]
  [2.10000e+01 2.20000e+01 2.30000e+01 ]]
 [[2.40000e+01 2.50000e+01 2.60000e+01 ]
  [2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 ]
  [3.30000e+01 3.40000e+01 3.50000e+01 ]]
 [[3.60000e+01 3.70000e+01 3.80000e+01 ]
  [3.90000e+01 4.00000e+01 4.10000e+01 ]
  [4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 ]]
 [[4.80000e+01 4.90000e+01 5.00000e+01 ]
  [5.10000e+01 5.20000e+01 5.30000e+01 ]
  [5.40000e+01 5.50000e+01 5.60000e+01 ]
  [5.70000e+01 5.80000e+01 5.90000e+01 ]]]


</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/reshape_.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>arange(60)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal">A.reshape_(5,12)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (60)
[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]




Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (5,12)
[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 ]
 [1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 ]
 [2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 ]
 [3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 ]
 [4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]



</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="942" column="10" bodyfile="include/Tensor.hpp" bodystart="942" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::reshape</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;new_shape) const</argsstring>
        <name>reshape</name>
        <qualifiedname>cytnx::Tensor::reshape</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
<para>return a new <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> that is reshaped. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_shape</parametername>
</parameternamelist>
<parameterdescription>
<para>the new shape of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>]</para>
</simplesect>
See also <ref refid="classcytnx_1_1Tensor_1a3723449528b9a20dd46c32c9e042b8f0" kindref="member">Tensor::reshape_() </ref></para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/reshape.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange</ref>(60);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>two<sp/>ways<sp/>you<sp/>can<sp/>give<sp/>argument<sp/>to<sp/>reshape:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>1:<sp/>more<sp/>like<sp/>&apos;C++&apos;<sp/>way:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">reshape</ref>({5,<sp/>12});<sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>the<sp/>braket{}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>2:<sp/>more<sp/>like<sp/>&apos;python&apos;<sp/>way:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B2<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">reshape</ref>(5,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (60)
[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (5,12)
[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 ]
 [1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 ]
 [2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 ]
 [3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 ]
 [4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]


</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/reshape.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>arange(60)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A.reshape(5,12)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal">print(B)</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (60)
[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]




Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (5,12)
[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 1.00000e+01 1.10000e+01 ]
 [1.20000e+01 1.30000e+01 1.40000e+01 1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 ]
 [2.40000e+01 2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 3.50000e+01 ]
 [3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 4.50000e+01 4.60000e+01 4.70000e+01 ]
 [4.80000e+01 4.90000e+01 5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]



</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="977" column="12" bodyfile="include/Tensor.hpp" bodystart="977" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a15e7c245ee923c77e02209dc5cfe5198" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::reshape</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;new_shape) const</argsstring>
        <name>reshape</name>
        <qualifiedname>cytnx::Tensor::reshape</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="983" column="12" bodyfile="include/Tensor.hpp" bodystart="983" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a32e42ecf5755144b071de1be9d13c692" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::reshape</definition>
        <argsstring>(const std::initializer_list&lt; cytnx_int64 &gt; &amp;new_shape) const</argsstring>
        <name>reshape</name>
        <qualifiedname>cytnx::Tensor::reshape</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>new_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="991" column="12" bodyfile="include/Tensor.hpp" bodystart="991" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a7b996d3281e7375b29a7cfe4273b299f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::astype</definition>
        <argsstring>(const int &amp;new_type) const</argsstring>
        <name>astype</name>
        <qualifiedname>cytnx::Tensor::astype</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>new_type</declname>
        </param>
        <briefdescription>
<para>return a new <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> that cast to different dtype. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the new dtype. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>]</para>
</simplesect>
<heading level="2">Note:</heading>
</para>
<para>If the new_type is the same as dtype of the current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>, return self.</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/astype.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1ab8a79a03fb0465f3eb2641017f3f1755" kindref="member">zeros</ref>({3,<sp/>4,<sp/>5},<sp/><ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1a7b996d3281e7375b29a7cfe4273b299f" kindref="member">astype</ref>(<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Uint64);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>type<sp/>is<sp/>the<sp/>same<sp/>as<sp/>current<sp/>dtype,<sp/>return<sp/>self.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>C<sp/>=<sp/>A.<ref refid="classcytnx_1_1Tensor_1a7b996d3281e7375b29a7cfe4273b299f" kindref="member">astype</ref>(<ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Double);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>is(C,<sp/>A)<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>be<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]]


Total elem: 60
type  : Uint64
cytnx device: CPU
Shape : (3,4,5)
[[[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]]

1
</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/astype.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>zeros([3,4,5],dtype=Type.Double)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A.astype(Type.Uint64)</highlight></codeline>
<codeline><highlight class="normal">print(B)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">C<sp/>=<sp/>A.astype(Type.Double)</highlight></codeline>
<codeline><highlight class="normal">print(C<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]
 [[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]]




Total elem: 60
type  : Uint64
cytnx device: CPU
Shape : (3,4,5)
[[[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]
 [[                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]
  [                  0                   0                   0                   0                   0 ]]]



True
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1021" column="12" bodyfile="include/Tensor.hpp" bodystart="1021" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; cytnx::Tensor::at</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator)</argsstring>
        <name>at</name>
        <qualifiedname>cytnx::Tensor::at</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
<para>[C++ only] get an element at specific location. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>locator</parametername>
</parameternamelist>
<parameterdescription>
<para>the location of the element </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[ref]</para>
</simplesect>
<heading level="2">Note:</heading>
</para>
<para><orderedlist>
<listitem><para>This is for C++ API only!</para>
</listitem><listitem><para>need template instantiation to resolve the type, which should be consist with the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. An error will be issued if the template type is inconsist with the current dtype of <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>.</para>
</listitem><listitem><para>For python API, use [] directly to get element.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/at.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange</ref>(30,<sp/><ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Float).<ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">reshape</ref>(2,<sp/>3,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>type<sp/>resolver<sp/>should<sp/>be<sp/>consist<sp/>with<sp/>the<sp/>dtype</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.<ref refid="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" kindref="member">at</ref>&lt;<ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref>&gt;(0,<sp/>0,<sp/>2)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>return<sp/>is<sp/>a<sp/>ref.,<sp/>can<sp/>be<sp/>modify<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" kindref="member">at</ref>&lt;<ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref>&gt;(0,<sp/>0,<sp/>2)<sp/>=<sp/>999;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.<ref refid="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" kindref="member">at</ref>&lt;<ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref>&gt;(0,<sp/>0,<sp/>2)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Note]<sp/>there<sp/>are<sp/>two<sp/>way<sp/>to<sp/>give<sp/>argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>1:<sp/>more<sp/>like<sp/>&apos;c++&apos;<sp/>way:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(alternatively,<sp/>you<sp/>can<sp/>also<sp/>simply<sp/>give<sp/>a<sp/>std::vector)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" kindref="member">at</ref>&lt;<ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref>&gt;({0,<sp/>0,<sp/>2});<sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>the<sp/>braket{}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>2:<sp/>more<sp/>like<sp/>&apos;python&apos;<sp/>way:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" kindref="member">at</ref>&lt;<ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref>&gt;(0,<sp/>0,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim></verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1054" column="7" bodyfile="include/Tensor.hpp" bodystart="1054" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af7a99f7f160be535a5ac7ac9bcdba730" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T &amp; cytnx::Tensor::at</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator) const</argsstring>
        <name>at</name>
        <qualifiedname>cytnx::Tensor::at</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1058" column="13" bodyfile="include/Tensor.hpp" bodystart="1058" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a59bb8b7cf3d142d49c51d694e58ace68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; cytnx::Tensor::item</definition>
        <argsstring>()</argsstring>
        <name>item</name>
        <qualifiedname>cytnx::Tensor::item</qualifiedname>
        <briefdescription>
<para>get an from a rank-0 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[T]</para>
</simplesect>
<heading level="2">Note:</heading>
</para>
<para><orderedlist>
<listitem><para>This can only be called on a rank-0 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> (scalar). For C++ API, a template instantiation of type is needed to resolve the type, which should be connsist with the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. An error will be issued if the template type if inconsist with the current dtype of <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>.</para>
</listitem><listitem><para>Although the return is by reference in C++ part, the return in python is not.</para>
</listitem><listitem><para>From 2., We recommend user to use at&lt;T&gt; (C++ API) and [] (python API) to modify the value of the element to have consistant syntax across two languages.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/item.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a83fb7bbe73368751a0d0f535d4a10a33" kindref="member">ones</ref>(1,<sp/><ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">Type</ref>.Uint64);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>type<sp/>resolver<sp/>should<sp/>be<sp/>consist<sp/>with<sp/>the<sp/>dtype</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A.<ref refid="classcytnx_1_1Tensor_1a59bb8b7cf3d142d49c51d694e58ace68" kindref="member">item</ref>&lt;<ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref>&gt;()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 1
type  : Uint64
cytnx device: CPU
Shape : (1)
[                  1 ]


1
</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/item.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>ones(1,Type.Uint64)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(A.item())</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 1
type  : Uint64
cytnx device: CPU
Shape : (1)
[                  1 ]



1
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1104" column="7" bodyfile="include/Tensor.hpp" bodystart="1104" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad7b928e4cb89d40cbd99aefab9aa0075" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::get</definition>
        <argsstring>(const std::vector&lt; cytnx::Accessor &gt; &amp;accessors) const</argsstring>
        <name>get</name>
        <qualifiedname>cytnx::Tensor::get</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Accessor" kindref="compound">cytnx::Accessor</ref> &gt; &amp;</type>
          <declname>accessors</declname>
        </param>
        <briefdescription>
<para>get elements using <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> (C++ API) / slices (python API) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>]</para>
</simplesect>
See also <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> for cordinate with <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> in C++ API.</para>
<para><heading level="2">Note:</heading>
</para>
<para><orderedlist>
<listitem><para>the return will be a new <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> instance, which not share memory with the current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">Equivalently:</heading>
</para>
<para>One can also using more intruisive way to get the slice using [] operator.</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/get.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref><sp/><ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>In<sp/>C++<sp/>API,<sp/>generally,<sp/>there<sp/>are<sp/>two<sp/>ways<sp/>you<sp/>can<sp/>access<sp/>Tensor.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>Using<sp/>operator():</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>more<sp/>of<sp/>&apos;python&apos;<sp/>way.</highlight></codeline>
<codeline><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>Using<sp/>low-level<sp/>API<sp/>or<sp/>operator[]:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>more<sp/>of<sp/>&apos;c++&apos;<sp/>way.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange</ref>(60).<ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">reshape</ref>({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>1,<sp/>Using<sp/>operator():</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/>A(2,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2:5:1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>[Note]</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>equivalent<sp/>as:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>Tensor<sp/>B<sp/>=<sp/>A(2,ac::all(),ac::range(2,5,1));</highlight></codeline>
<codeline><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>also<sp/>cytnx::Accessor.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Method<sp/>2,<sp/>Using<sp/>operator[]<sp/>or<sp/>low-level<sp/>API<sp/>get():</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B2<sp/>=<sp/>A[{<ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>(2),<sp/><ref refid="classcytnx_1_1Accessor_1a71b8c4af7182a2c9144929bdef9ff4fd" kindref="member">ac::all</ref>(),<sp/><ref refid="classcytnx_1_1Accessor_1a7a5a508a58b71897c3dd162195aceaa9" kindref="member">ac::range</ref>(2,<sp/>5,<sp/>1)}];<sp/><sp/></highlight><highlight class="comment">//<sp/>remember<sp/>the<sp/>{}braket</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B2<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>[Note]</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>You<sp/>can<sp/>also<sp/>use<sp/>the<sp/>low-level<sp/>API<sp/>get()<sp/>as</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>Tensor<sp/>B2<sp/>=<sp/>A.get({ac(2),ac::all(),ac::range(2,5,1)});</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]



Total elem: 12
type  : Double (Float64)
cytnx device: CPU
Shape : (4,3)
[[4.20000e+01 4.30000e+01 4.40000e+01 ]
 [4.70000e+01 4.80000e+01 4.90000e+01 ]
 [5.20000e+01 5.30000e+01 5.40000e+01 ]
 [5.70000e+01 5.80000e+01 5.90000e+01 ]]



Total elem: 12
type  : Double (Float64)
cytnx device: CPU
Shape : (4,3)
[[4.20000e+01 4.30000e+01 4.40000e+01 ]
 [4.70000e+01 4.80000e+01 4.90000e+01 ]
 [5.20000e+01 5.30000e+01 5.40000e+01 ]
 [5.70000e+01 5.80000e+01 5.90000e+01 ]]


</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/get.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>arange(60).reshape(3,4,5)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>A[2,:,2:5:1]</highlight></codeline>
<codeline><highlight class="normal">print(B)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]




Total elem: 12
type  : Double (Float64)
cytnx device: CPU
Shape : (4,3)
[[4.20000e+01 4.30000e+01 4.40000e+01 ]
 [4.70000e+01 4.80000e+01 4.90000e+01 ]
 [5.20000e+01 5.30000e+01 5.40000e+01 ]
 [5.70000e+01 5.80000e+01 5.90000e+01 ]]



</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1153" column="12" bodyfile="include/Tensor.hpp" bodystart="1153" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a771f1f5b51f89abd8df4166e602214ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::set</definition>
        <argsstring>(const std::vector&lt; cytnx::Accessor &gt; &amp;accessors, const Tensor &amp;rhs)</argsstring>
        <name>set</name>
        <qualifiedname>cytnx::Tensor::set</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Accessor" kindref="compound">cytnx::Accessor</ref> &gt; &amp;</type>
          <declname>accessors</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>set elements with the input <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> using <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> (C++ API) / slices (python API) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accessors</parametername>
</parameternamelist>
<parameterdescription>
<para>the list(vector) of accessors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2">Note:</heading>
</para>
<para>the shape of the input <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> should be the same as the shape that indicated using <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref>. The memory is not shared with the input <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>.</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/set.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref><sp/><ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>define<sp/>two<sp/>Tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange</ref>(60).<ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">reshape</ref>({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/><ref refid="namespacecytnx_1ab8a79a03fb0465f3eb2641017f3f1755" kindref="member">zeros</ref>({4,<sp/>3});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I.<sp/>To<sp/>set<sp/>part<sp/>of<sp/>A<sp/>with<sp/>Tesnor<sp/>B,<sp/>or<sp/>constant:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Method<sp/>1]<sp/>Using<sp/>direct<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A(2,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2:5:1&quot;</highlight><highlight class="normal">)<sp/>=<sp/>B;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A(2,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2:5:1&quot;</highlight><highlight class="normal">)<sp/>=<sp/>999;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>this<sp/>is<sp/>the<sp/>same<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A(ac(2),ac::all(),ac::range(2,5,1))<sp/>=<sp/>B;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A[{ac(2),ac::all(),ac::range(2,5,1)}]<sp/>=<sp/>B;<sp/>//<sp/>note<sp/>that<sp/>braket{}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Method<sp/>2]<sp/>Using<sp/>low-level<sp/>API<sp/>set():</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a771f1f5b51f89abd8df4166e602214ac" kindref="member">set</ref>({<ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>(2),<sp/><ref refid="classcytnx_1_1Accessor_1a71b8c4af7182a2c9144929bdef9ff4fd" kindref="member">ac::all</ref>(),<sp/><ref refid="classcytnx_1_1Accessor_1a7a5a508a58b71897c3dd162195aceaa9" kindref="member">ac::range</ref>(2,<sp/>5,<sp/>1)},<sp/>B);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a771f1f5b51f89abd8df4166e602214ac" kindref="member">set</ref>({<ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>(2),<sp/><ref refid="classcytnx_1_1Accessor_1a71b8c4af7182a2c9144929bdef9ff4fd" kindref="member">ac::all</ref>(),<sp/><ref refid="classcytnx_1_1Accessor_1a7a5a508a58b71897c3dd162195aceaa9" kindref="member">ac::range</ref>(0,<sp/>2,<sp/>1)},<sp/>999);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]



Total elem: 12
type  : Double (Float64)
cytnx device: CPU
Shape : (4,3)
[[0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [4.50000e+01 4.60000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [5.00000e+01 5.10000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [5.50000e+01 5.60000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]]]


</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/set.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>arange(60).reshape(3,4,5)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>zeros([4,3])</highlight></codeline>
<codeline><highlight class="normal">print(B)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A[2,:,2:5:1]<sp/>=<sp/>B</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A[0,:,0:2:1]<sp/>=<sp/>999</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]




Total elem: 12
type  : Double (Float64)
cytnx device: CPU
Shape : (4,3)
[[0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]]




Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]




Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[9.99000e+02 9.99000e+02 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [9.99000e+02 9.99000e+02 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [9.99000e+02 9.99000e+02 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [9.99000e+02 9.99000e+02 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1187" column="10" bodyfile="include/Tensor.hpp" bodystart="1187" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad93d654b978add6b2f0dfb9f91490209" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cytnx::Tensor::set</definition>
        <argsstring>(const std::vector&lt; cytnx::Accessor &gt; &amp;accessors, const T &amp;rc)</argsstring>
        <name>set</name>
        <qualifiedname>cytnx::Tensor::set</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Accessor" kindref="compound">cytnx::Accessor</ref> &gt; &amp;</type>
          <declname>accessors</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
<para>set elements with the input constant using <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> (C++ API) / slices (python API) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accessors</parametername>
</parameternamelist>
<parameterdescription>
<para>the list(vector) of accessors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rc</parametername>
</parameternamelist>
<parameterdescription>
<para>[Const]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
See also <ref refid="classcytnx_1_1Tensor_1a0c7f2bac2a03be7d22769c7cb896afbe" kindref="member">Tensor::fill </ref> for filling all elements with assigned constant.</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/set.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref><sp/><ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>define<sp/>two<sp/>Tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange</ref>(60).<ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">reshape</ref>({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>B<sp/>=<sp/><ref refid="namespacecytnx_1ab8a79a03fb0465f3eb2641017f3f1755" kindref="member">zeros</ref>({4,<sp/>3});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>B<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I.<sp/>To<sp/>set<sp/>part<sp/>of<sp/>A<sp/>with<sp/>Tesnor<sp/>B,<sp/>or<sp/>constant:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Method<sp/>1]<sp/>Using<sp/>direct<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A(2,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2:5:1&quot;</highlight><highlight class="normal">)<sp/>=<sp/>B;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A(2,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2:5:1&quot;</highlight><highlight class="normal">)<sp/>=<sp/>999;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>this<sp/>is<sp/>the<sp/>same<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A(ac(2),ac::all(),ac::range(2,5,1))<sp/>=<sp/>B;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A[{ac(2),ac::all(),ac::range(2,5,1)}]<sp/>=<sp/>B;<sp/>//<sp/>note<sp/>that<sp/>braket{}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Method<sp/>2]<sp/>Using<sp/>low-level<sp/>API<sp/>set():</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a771f1f5b51f89abd8df4166e602214ac" kindref="member">set</ref>({<ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>(2),<sp/><ref refid="classcytnx_1_1Accessor_1a71b8c4af7182a2c9144929bdef9ff4fd" kindref="member">ac::all</ref>(),<sp/><ref refid="classcytnx_1_1Accessor_1a7a5a508a58b71897c3dd162195aceaa9" kindref="member">ac::range</ref>(2,<sp/>5,<sp/>1)},<sp/>B);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a771f1f5b51f89abd8df4166e602214ac" kindref="member">set</ref>({<ref refid="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" kindref="member">ac</ref>(2),<sp/><ref refid="classcytnx_1_1Accessor_1a71b8c4af7182a2c9144929bdef9ff4fd" kindref="member">ac::all</ref>(),<sp/><ref refid="classcytnx_1_1Accessor_1a7a5a508a58b71897c3dd162195aceaa9" kindref="member">ac::range</ref>(0,<sp/>2,<sp/>1)},<sp/>999);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]



Total elem: 12
type  : Double (Float64)
cytnx device: CPU
Shape : (4,3)
[[0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [4.50000e+01 4.60000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [5.00000e+01 5.10000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [5.50000e+01 5.60000e+01 9.99000e+02 9.99000e+02 9.99000e+02 ]]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [9.99000e+02 9.99000e+02 0.00000e+00 0.00000e+00 0.00000e+00 ]]]


</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/Tensor/set.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>arange(60).reshape(3,4,5)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">B<sp/>=<sp/>zeros([4,3])</highlight></codeline>
<codeline><highlight class="normal">print(B)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A[2,:,2:5:1]<sp/>=<sp/>B</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A[0,:,0:2:1]<sp/>=<sp/>999</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]




Total elem: 12
type  : Double (Float64)
cytnx device: CPU
Shape : (4,3)
[[0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 ]]




Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]




Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[9.99000e+02 9.99000e+02 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [9.99000e+02 9.99000e+02 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [9.99000e+02 9.99000e+02 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [9.99000e+02 9.99000e+02 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [4.50000e+01 4.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.00000e+01 5.10000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]
  [5.50000e+01 5.60000e+01 0.00000e+00 0.00000e+00 0.00000e+00 ]]]



</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1210" column="10" bodyfile="include/Tensor.hpp" bodystart="1210" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1afaa4a4eba4bd98b371fc101fbcfef743" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref> &amp;</type>
        <definition>Storage &amp; cytnx::Tensor::storage</definition>
        <argsstring>() const</argsstring>
        <name>storage</name>
        <qualifiedname>cytnx::Tensor::storage</qualifiedname>
        <briefdescription>
<para>return the storage of current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[<ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref>]</para>
</simplesect>
<heading level="2">Note:</heading>
</para>
<para><orderedlist>
<listitem><para>The return storage shares the same instance of the storage of current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. Use <ref refid="classcytnx_1_1Storage_1aed0530dd20f3fb352d45653ba46a3d50" kindref="member">Storage.clone() </ref> to create a new instance of the returned <ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref>. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1230" column="13" bodyfile="include/Tensor.hpp" bodystart="1230" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a0c7f2bac2a03be7d22769c7cb896afbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cytnx::Tensor::fill</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>fill</name>
        <qualifiedname>cytnx::Tensor::fill</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>fill all the element of current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with the value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>the assigned value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/Tensor/fill.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>A<sp/>=<sp/><ref refid="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" kindref="member">arange</ref>(60).<ref refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" kindref="member">reshape</ref>({3,<sp/>4,<sp/>5});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>A.<ref refid="classcytnx_1_1Tensor_1a0c7f2bac2a03be7d22769c7cb896afbe" kindref="member">fill</ref>(999);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>A<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]



Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]]
 [[9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]]
 [[9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]]]


</verbatim> <heading level="3">python API</heading>
</para>
<para><programlisting filename="example/Tensor/fill.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A<sp/>=<sp/>arange(60).reshape(3,4,5)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">A.fill(999)</highlight></codeline>
<codeline><highlight class="normal">print(A)</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>
Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[0.00000e+00 1.00000e+00 2.00000e+00 3.00000e+00 4.00000e+00 ]
  [5.00000e+00 6.00000e+00 7.00000e+00 8.00000e+00 9.00000e+00 ]
  [1.00000e+01 1.10000e+01 1.20000e+01 1.30000e+01 1.40000e+01 ]
  [1.50000e+01 1.60000e+01 1.70000e+01 1.80000e+01 1.90000e+01 ]]
 [[2.00000e+01 2.10000e+01 2.20000e+01 2.30000e+01 2.40000e+01 ]
  [2.50000e+01 2.60000e+01 2.70000e+01 2.80000e+01 2.90000e+01 ]
  [3.00000e+01 3.10000e+01 3.20000e+01 3.30000e+01 3.40000e+01 ]
  [3.50000e+01 3.60000e+01 3.70000e+01 3.80000e+01 3.90000e+01 ]]
 [[4.00000e+01 4.10000e+01 4.20000e+01 4.30000e+01 4.40000e+01 ]
  [4.50000e+01 4.60000e+01 4.70000e+01 4.80000e+01 4.90000e+01 ]
  [5.00000e+01 5.10000e+01 5.20000e+01 5.30000e+01 5.40000e+01 ]
  [5.50000e+01 5.60000e+01 5.70000e+01 5.80000e+01 5.90000e+01 ]]]




Total elem: 60
type  : Double (Float64)
cytnx device: CPU
Shape : (3,4,5)
[[[9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]]
 [[9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]]
 [[9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]
  [9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 9.99000e+02 ]]]



</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1248" column="10" bodyfile="include/Tensor.hpp" bodystart="1248" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aeae314f040e27b581d73c82b33ab6a59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::Tensor::equiv</definition>
        <argsstring>(const Tensor &amp;rhs)</argsstring>
        <name>equiv</name>
        <qualifiedname>cytnx::Tensor::equiv</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1252" column="10" bodyfile="include/Tensor.hpp" bodystart="1252" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ac863dbd316a4771a95810a2e9b922c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::real</definition>
        <argsstring>()</argsstring>
        <name>real</name>
        <qualifiedname>cytnx::Tensor::real</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1257" column="12" bodyfile="src/Tensor.cpp" bodystart="970" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1accd77970630990baca3a18638b23fe95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::imag</definition>
        <argsstring>()</argsstring>
        <name>imag</name>
        <qualifiedname>cytnx::Tensor::imag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1258" column="12" bodyfile="src/Tensor.cpp" bodystart="977" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a84d7c47ea4cdb206a8ad70b8b3783876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const T &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1262" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a22b227a075c948ca2f8ac2aad8974190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const T &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1264" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a0409dea9e50793f689eba740638b86a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const T &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1266" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a09164f6960b922ee005a6039a64a773b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const T &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1268" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aafd7446e798d34427d4e6a9571861111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Add</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Add</name>
        <qualifiedname>cytnx::Tensor::Add</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1290" column="12" bodyfile="include/Tensor.hpp" bodystart="1290" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2744949ae1bbbef4a852b11153617b5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Add_</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Add_</name>
        <qualifiedname>cytnx::Tensor::Add_</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1294" column="12" bodyfile="include/Tensor.hpp" bodystart="1294" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a4648eef7874bad42d6d7b15fb1598644" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Sub</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Sub</name>
        <qualifiedname>cytnx::Tensor::Sub</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1299" column="12" bodyfile="include/Tensor.hpp" bodystart="1299" bodyend="1301"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aff0275bf4752791ebc51b3f02b456115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Sub_</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Sub_</name>
        <qualifiedname>cytnx::Tensor::Sub_</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1303" column="12" bodyfile="include/Tensor.hpp" bodystart="1303" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a443885c8f02ab5352d81255e4650cf32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Mul</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Mul</name>
        <qualifiedname>cytnx::Tensor::Mul</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1308" column="12" bodyfile="include/Tensor.hpp" bodystart="1308" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a9eb8827f29f8932c24d8315017b7c7e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Mul_</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Mul_</name>
        <qualifiedname>cytnx::Tensor::Mul_</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1312" column="12" bodyfile="include/Tensor.hpp" bodystart="1312" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1add04fc004ccab102743f3e392f6bb482" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Div</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Div</name>
        <qualifiedname>cytnx::Tensor::Div</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1317" column="12" bodyfile="include/Tensor.hpp" bodystart="1317" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a7e079fdaf9bb56c21e1300dbf08e7223" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Div_</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Div_</name>
        <qualifiedname>cytnx::Tensor::Div_</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1321" column="12" bodyfile="include/Tensor.hpp" bodystart="1321" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aeee6153da17147b82857e342e2a35c52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Cpr</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Cpr</name>
        <qualifiedname>cytnx::Tensor::Cpr</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1326" column="12" bodyfile="include/Tensor.hpp" bodystart="1326" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ae41aecc16a039a59e2902a31e8eea243" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Mod</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>Mod</name>
        <qualifiedname>cytnx::Tensor::Mod</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1337" column="12" bodyfile="include/Tensor.hpp" bodystart="1337" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a0bb7ebda69ea886804cec7d23249b5e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::Tensor::operator-</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1341" column="12" bodyfile="include/Tensor.hpp" bodystart="1341" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab6679015cd4b8d0c33207a28986a0b75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::flatten</definition>
        <argsstring>() const</argsstring>
        <name>flatten</name>
        <qualifiedname>cytnx::Tensor::flatten</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1343" column="12" bodyfile="include/Tensor.hpp" bodystart="1343" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab026b0d58ba0bfbaaa20d5b4ac420c2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::flatten_</definition>
        <argsstring>()</argsstring>
        <name>flatten_</name>
        <qualifiedname>cytnx::Tensor::flatten_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1350" column="10" bodyfile="include/Tensor.hpp" bodystart="1350" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a68a91d1554a4550eac7d339240fa9d02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::append</definition>
        <argsstring>(const Tensor &amp;rhs)</argsstring>
        <name>append</name>
        <qualifiedname>cytnx::Tensor::append</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1355" column="10" bodyfile="include/Tensor.hpp" bodystart="1355" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a01b8ab0509a7685a84dfed745a7f1596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::Tensor::append</definition>
        <argsstring>(const Storage &amp;srhs)</argsstring>
        <name>append</name>
        <qualifiedname>cytnx::Tensor::append</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref> &amp;</type>
          <declname>srhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1390" column="10" bodyfile="include/Tensor.hpp" bodystart="1390" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a1fb350e321d7228a1970da4d3f4dfa31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cytnx::Tensor::append</definition>
        <argsstring>(const T &amp;rhs)</argsstring>
        <name>append</name>
        <qualifiedname>cytnx::Tensor::append</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1442" column="10" bodyfile="include/Tensor.hpp" bodystart="1442" bodyend="1453"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a0eca35d876d22d96d1aef9f959a946fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::Tensor::same_data</definition>
        <argsstring>(const Tensor &amp;rhs) const</argsstring>
        <name>same_data</name>
        <qualifiedname>cytnx::Tensor::same_data</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1455" column="10" bodyfile="src/Tensor.cpp" bodystart="1338" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af286c5442012735856d4030806fd6573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt; Tensor &gt; cytnx::Tensor::Svd</definition>
        <argsstring>(const bool &amp;is_U=true, const bool &amp;is_vT=true) const</argsstring>
        <name>Svd</name>
        <qualifiedname>cytnx::Tensor::Svd</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>is_U</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_vT</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1458" column="17" bodyfile="src/Tensor.cpp" bodystart="1287" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a5eaf4c8f99f9776e4461a1f676345ae5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt; Tensor &gt; cytnx::Tensor::Eigh</definition>
        <argsstring>(const bool &amp;is_V=true, const bool &amp;row_v=false) const</argsstring>
        <name>Eigh</name>
        <qualifiedname>cytnx::Tensor::Eigh</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>is_V</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>row_v</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1459" column="17" bodyfile="src/Tensor.cpp" bodystart="1290" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af099f62bda6ff3b15f89d7d33f2786ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::InvM_</definition>
        <argsstring>()</argsstring>
        <name>InvM_</name>
        <qualifiedname>cytnx::Tensor::InvM_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1460" column="12" bodyfile="src/Tensor.cpp" bodystart="1294" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a0cd186f9e001ee836ef4712eca40f049" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::InvM</definition>
        <argsstring>() const</argsstring>
        <name>InvM</name>
        <qualifiedname>cytnx::Tensor::InvM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1461" column="12" bodyfile="src/Tensor.cpp" bodystart="1298" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a043e2b24d2765149fd8255936221d924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Inv_</definition>
        <argsstring>(const double &amp;clip)</argsstring>
        <name>Inv_</name>
        <qualifiedname>cytnx::Tensor::Inv_</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>clip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1462" column="12" bodyfile="src/Tensor.cpp" bodystart="1299" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a46740b4d5f24bfc3d3ce95b151dc6799" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Inv</definition>
        <argsstring>(const double &amp;clip) const</argsstring>
        <name>Inv</name>
        <qualifiedname>cytnx::Tensor::Inv</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>clip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1463" column="12" bodyfile="src/Tensor.cpp" bodystart="1303" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab87b5428c5fb510da02fd3bbe316bbfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Conj_</definition>
        <argsstring>()</argsstring>
        <name>Conj_</name>
        <qualifiedname>cytnx::Tensor::Conj_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1465" column="12" bodyfile="src/Tensor.cpp" bodystart="1305" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a89af177fad9c00c3d09d2c587de2d77a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Conj</definition>
        <argsstring>() const</argsstring>
        <name>Conj</name>
        <qualifiedname>cytnx::Tensor::Conj</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1466" column="12" bodyfile="src/Tensor.cpp" bodystart="1309" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aefdef16a685cea5b47b682a3c7837da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Exp_</definition>
        <argsstring>()</argsstring>
        <name>Exp_</name>
        <qualifiedname>cytnx::Tensor::Exp_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1467" column="12" bodyfile="src/Tensor.cpp" bodystart="1311" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aa85b2277ea048c00bef949fc2e7091db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Exp</definition>
        <argsstring>() const</argsstring>
        <name>Exp</name>
        <qualifiedname>cytnx::Tensor::Exp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1468" column="12" bodyfile="src/Tensor.cpp" bodystart="1315" bodyend="1315"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a7889abcab99ca9800c0cbccbd6767819" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Norm</definition>
        <argsstring>() const</argsstring>
        <name>Norm</name>
        <qualifiedname>cytnx::Tensor::Norm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1469" column="12" bodyfile="src/Tensor.cpp" bodystart="1316" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ac5bd2525bacc3713694a063074538e20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Pow</definition>
        <argsstring>(const cytnx_double &amp;p) const</argsstring>
        <name>Pow</name>
        <qualifiedname>cytnx::Tensor::Pow</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1470" column="12" bodyfile="src/Tensor.cpp" bodystart="1318" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a977738a47390feeab721a599fc21ec28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Pow_</definition>
        <argsstring>(const cytnx_double &amp;p)</argsstring>
        <name>Pow_</name>
        <qualifiedname>cytnx::Tensor::Pow_</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1471" column="12" bodyfile="src/Tensor.cpp" bodystart="1320" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a8d2f499d0c79e4c46909d2341c374723" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Trace</definition>
        <argsstring>(const cytnx_uint64 &amp;a=0, const cytnx_uint64 &amp;b=1) const</argsstring>
        <name>Trace</name>
        <qualifiedname>cytnx::Tensor::Trace</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>a</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>b</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1472" column="12" bodyfile="src/Tensor.cpp" bodystart="1333" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a312a8b7b963199a98e59d9f6a97c32e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Abs</definition>
        <argsstring>() const</argsstring>
        <name>Abs</name>
        <qualifiedname>cytnx::Tensor::Abs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1473" column="12" bodyfile="src/Tensor.cpp" bodystart="1329" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aa8e04d45e4c5b8e6f334e2be38433e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::Abs_</definition>
        <argsstring>()</argsstring>
        <name>Abs_</name>
        <qualifiedname>cytnx::Tensor::Abs_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1474" column="12" bodyfile="src/Tensor.cpp" bodystart="1325" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1adb752367adea78b251e5a584276c1f40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Max</definition>
        <argsstring>() const</argsstring>
        <name>Max</name>
        <qualifiedname>cytnx::Tensor::Max</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1475" column="12" bodyfile="src/Tensor.cpp" bodystart="1330" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af540bb4dc6887bf29289722101899a57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Min</definition>
        <argsstring>() const</argsstring>
        <name>Min</name>
        <qualifiedname>cytnx::Tensor::Min</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="1476" column="12" bodyfile="src/Tensor.cpp" bodystart="1331" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2b8faf316fcdb12ace04abc254894e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const Tensor &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="986" column="10" bodyfile="src/Tensor.cpp" bodystart="986" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab12439bd65f734450b8c38a272cd49a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_complex128 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a401ce1c8c4599b9a1a860e9e225e6b9e" kindref="member">cytnx_complex128</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="996" column="10" bodyfile="src/Tensor.cpp" bodystart="996" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad46d7c655ac2c606e445221dd1c39199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_complex64 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a63d2515ecaa35660c85571236e61fec7" kindref="member">cytnx_complex64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1001" column="10" bodyfile="src/Tensor.cpp" bodystart="1001" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a5b282f7a37f7e49ab7121ebb3cb22cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_double &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1006" column="10" bodyfile="src/Tensor.cpp" bodystart="1006" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af00a0225cdd740c8760cb988fcffd6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_float &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1011" column="10" bodyfile="src/Tensor.cpp" bodystart="1011" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1add9291af117caaa0e0d05eb1a0610262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_int64 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1016" column="10" bodyfile="src/Tensor.cpp" bodystart="1016" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aad0d3e44a7d4a57b92f32c501a4185cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_uint64 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1021" column="10" bodyfile="src/Tensor.cpp" bodystart="1021" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a1bba94b0cc3707c177f5155eb2e63868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_int32 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a6504b8a7b459f70c0a24d4ea2893a976" kindref="member">cytnx_int32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1026" column="10" bodyfile="src/Tensor.cpp" bodystart="1026" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ac2b761ca53212fc5f4e2d02d9f4760ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_uint32 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a335d8fee19dee02206dbecec6e5ec610" kindref="member">cytnx_uint32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1031" column="10" bodyfile="src/Tensor.cpp" bodystart="1031" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af5dcbc5be9cae20ceca0efd3eee00ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_int16 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a5f27130c68405db77c52f17c3a084f62" kindref="member">cytnx_int16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1036" column="10" bodyfile="src/Tensor.cpp" bodystart="1036" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aacaa0e5e2e6e1b8df817eb245bfe9ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_uint16 &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a7f757c129de8dd3de3a4f2d802aa9bbb" kindref="member">cytnx_uint16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1041" column="10" bodyfile="src/Tensor.cpp" bodystart="1041" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a6c28ee27c111f59b2b0df5bbc41305e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const cytnx_bool &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a33aeeaf2c3d5b78b26cc6440916acbf2" kindref="member">cytnx_bool</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1046" column="10" bodyfile="src/Tensor.cpp" bodystart="1046" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a475ee664aa8c7a310b985c714b773153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=</definition>
        <argsstring>(const Scalar &amp;rc)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::Tensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1051" column="10" bodyfile="src/Tensor.cpp" bodystart="1051" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aeec97774cd9a706b18275c01531aeb6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const Tensor &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1061" column="10" bodyfile="src/Tensor.cpp" bodystart="1061" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2b6a6c64c7c78f6e327109b19f73bd70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_complex128 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a401ce1c8c4599b9a1a860e9e225e6b9e" kindref="member">cytnx_complex128</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1071" column="10" bodyfile="src/Tensor.cpp" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2c06c92faaadcdf86ec3f1fa6a49d682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_complex64 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a63d2515ecaa35660c85571236e61fec7" kindref="member">cytnx_complex64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1076" column="10" bodyfile="src/Tensor.cpp" bodystart="1076" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad0774a00e3cd4fd16db96aab22f27d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_double &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1081" column="10" bodyfile="src/Tensor.cpp" bodystart="1081" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad0ed1d38d02d1dab99dcd5b7de5253ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_float &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1086" column="10" bodyfile="src/Tensor.cpp" bodystart="1086" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a6e86d24c74f2b26a594c743beb2aee35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_int64 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1091" column="10" bodyfile="src/Tensor.cpp" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a964287761cd657eeb69f543ab6f46cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_uint64 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1096" column="10" bodyfile="src/Tensor.cpp" bodystart="1096" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a0f5afb967b7523d625b96d93894281c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_int32 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a6504b8a7b459f70c0a24d4ea2893a976" kindref="member">cytnx_int32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1101" column="10" bodyfile="src/Tensor.cpp" bodystart="1101" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a16652a24a546859bed5e0dc7e135b98c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_uint32 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a335d8fee19dee02206dbecec6e5ec610" kindref="member">cytnx_uint32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1106" column="10" bodyfile="src/Tensor.cpp" bodystart="1106" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a69f8e2bb3e453d55249f0ec4fa7fa9d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_int16 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a5f27130c68405db77c52f17c3a084f62" kindref="member">cytnx_int16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1111" column="10" bodyfile="src/Tensor.cpp" bodystart="1111" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2e0093fdf3748efaeaaa4e605602ec90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_uint16 &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a7f757c129de8dd3de3a4f2d802aa9bbb" kindref="member">cytnx_uint16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1116" column="10" bodyfile="src/Tensor.cpp" bodystart="1116" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad7e99f6d83a7e8621cc1127ec7a66901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const cytnx_bool &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a33aeeaf2c3d5b78b26cc6440916acbf2" kindref="member">cytnx_bool</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1121" column="10" bodyfile="src/Tensor.cpp" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a6161004fe27673d6eca2858df5324289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=</definition>
        <argsstring>(const Scalar &amp;rc)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::Tensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1126" column="10" bodyfile="src/Tensor.cpp" bodystart="1126" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aba46864b9e09a1bf4a97fea83e459b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const Tensor &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1136" column="10" bodyfile="src/Tensor.cpp" bodystart="1136" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ac2114a8a99e86729eb0a50e451355ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_complex128 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a401ce1c8c4599b9a1a860e9e225e6b9e" kindref="member">cytnx_complex128</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1146" column="10" bodyfile="src/Tensor.cpp" bodystart="1146" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a9d716adbd73ae6265b8b28900a27d284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_complex64 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a63d2515ecaa35660c85571236e61fec7" kindref="member">cytnx_complex64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1151" column="10" bodyfile="src/Tensor.cpp" bodystart="1151" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab2eb1d4e90922e13b98dd313059a0698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_double &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1156" column="10" bodyfile="src/Tensor.cpp" bodystart="1156" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ae860ace17e670b774aba874b8efcf9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_float &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1161" column="10" bodyfile="src/Tensor.cpp" bodystart="1161" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1abd8acfa6ebeebfdcbd13102ebe677d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_int64 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1166" column="10" bodyfile="src/Tensor.cpp" bodystart="1166" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ae3173c86fef21ec9137a149211a64f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_uint64 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1171" column="10" bodyfile="src/Tensor.cpp" bodystart="1171" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2652f5158ecab6b2843f030b69cfb4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_int32 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a6504b8a7b459f70c0a24d4ea2893a976" kindref="member">cytnx_int32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1176" column="10" bodyfile="src/Tensor.cpp" bodystart="1176" bodyend="1179"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1adf02bca2315d84489d601d4430a705bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_uint32 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a335d8fee19dee02206dbecec6e5ec610" kindref="member">cytnx_uint32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1181" column="10" bodyfile="src/Tensor.cpp" bodystart="1181" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a3b30c26ff85446eed5d865e6491bcc8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_int16 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a5f27130c68405db77c52f17c3a084f62" kindref="member">cytnx_int16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1186" column="10" bodyfile="src/Tensor.cpp" bodystart="1186" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ad2c6f3e5625908c8ebb7d2a72f32a6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_uint16 &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a7f757c129de8dd3de3a4f2d802aa9bbb" kindref="member">cytnx_uint16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1191" column="10" bodyfile="src/Tensor.cpp" bodystart="1191" bodyend="1194"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab8591570364d4b41d875363bef709e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const cytnx_bool &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a33aeeaf2c3d5b78b26cc6440916acbf2" kindref="member">cytnx_bool</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1196" column="10" bodyfile="src/Tensor.cpp" bodystart="1196" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2ed4731096f39b4bf84eaa548d4ba53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=</definition>
        <argsstring>(const Scalar &amp;rc)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::Tensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1201" column="10" bodyfile="src/Tensor.cpp" bodystart="1201" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a4e542f266b3e4e1d2ff47df445bc403c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const Tensor &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1212" column="10" bodyfile="src/Tensor.cpp" bodystart="1212" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1aa4130962f2f93b2e343c87d224d20bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_complex128 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a401ce1c8c4599b9a1a860e9e225e6b9e" kindref="member">cytnx_complex128</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1222" column="10" bodyfile="src/Tensor.cpp" bodystart="1222" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a144c0887163bb2af2408fc5aa839651b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_complex64 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a63d2515ecaa35660c85571236e61fec7" kindref="member">cytnx_complex64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1227" column="10" bodyfile="src/Tensor.cpp" bodystart="1227" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ab829d78c91a6219cdcc6f0b405026dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_double &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1232" column="10" bodyfile="src/Tensor.cpp" bodystart="1232" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1abc01ca46711120855a25f3b717d46fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_float &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1237" column="10" bodyfile="src/Tensor.cpp" bodystart="1237" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af7caa66f558da956a0cefb832bd8fb23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_int64 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1242" column="10" bodyfile="src/Tensor.cpp" bodystart="1242" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1af80e3f554940b8415df02072a20553bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_uint64 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1247" column="10" bodyfile="src/Tensor.cpp" bodystart="1247" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a31046ece0a3114203125d330248cef17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_int32 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a6504b8a7b459f70c0a24d4ea2893a976" kindref="member">cytnx_int32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1252" column="10" bodyfile="src/Tensor.cpp" bodystart="1252" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a9837dbc551a0aa4e693e17aa2f318cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_uint32 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a335d8fee19dee02206dbecec6e5ec610" kindref="member">cytnx_uint32</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1258" column="10" bodyfile="src/Tensor.cpp" bodystart="1258" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a8aad7a413db36167844659fcbee27ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_int16 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a5f27130c68405db77c52f17c3a084f62" kindref="member">cytnx_int16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1263" column="10" bodyfile="src/Tensor.cpp" bodystart="1263" bodyend="1266"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a115341b9b82729cdae991cb2001afe5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_uint16 &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a7f757c129de8dd3de3a4f2d802aa9bbb" kindref="member">cytnx_uint16</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1268" column="10" bodyfile="src/Tensor.cpp" bodystart="1268" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1ae36d337225893c6e6dbd1cc23908c866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const cytnx_bool &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a33aeeaf2c3d5b78b26cc6440916acbf2" kindref="member">cytnx_bool</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1273" column="10" bodyfile="src/Tensor.cpp" bodystart="1273" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a6d025a62ec655d68292db8ab0ab8f5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=</definition>
        <argsstring>(const Scalar &amp;rc)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::Tensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1278" column="10" bodyfile="src/Tensor.cpp" bodystart="1278" bodyend="1281"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a4100edea617039a2b9a0ee3ca2b2aa36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Load</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>Load</name>
        <qualifiedname>cytnx::Tensor::Load</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Load current <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> to file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>file name</para>
</parameterdescription>
</parameteritem>
</parameterlist>
description: load the <ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref> from file with file path specify with input param &apos;fname&apos; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="632" column="19" bodyfile="src/Tensor.cpp" bodystart="922" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a2a11de9a3ecd1411ef9231c8092628ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Load</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>Load</name>
        <qualifiedname>cytnx::Tensor::Load</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="633" column="19" bodyfile="src/Tensor.cpp" bodystart="933" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1afda200022018b04ca0a29dfb45b7f53c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Fromfile</definition>
        <argsstring>(const std::string &amp;fname, const unsigned int &amp;dtype, const cytnx_int64 &amp;count=-1)</argsstring>
        <name>Fromfile</name>
        <qualifiedname>cytnx::Tensor::Fromfile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>count</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="634" column="19" bodyfile="src/Tensor.cpp" bodystart="915" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1a1af3441ab3d1bd45f5ead47eead6b81e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::Tensor::Fromfile</definition>
        <argsstring>(const char *fname, const unsigned int &amp;dtype, const cytnx_int64 &amp;count=-1)</argsstring>
        <name>Fromfile</name>
        <qualifiedname>cytnx::Tensor::Fromfile</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>count</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="636" column="19" bodyfile="src/Tensor.cpp" bodystart="919" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1Tensor_1afd3a86c7edd3af568060dfb6bfa5aecb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>static Tensor cytnx::Tensor::from_storage</definition>
        <argsstring>(const Storage &amp;in)</argsstring>
        <name>from_storage</name>
        <qualifiedname>cytnx::Tensor::from_storage</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Tensor.hpp" line="723" column="19" bodyfile="include/Tensor.hpp" bodystart="723" bodyend="729"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>an tensor (multi-dimensional array) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/Tensor.hpp" line="335" column="3" bodyfile="include/Tensor.hpp" bodystart="335" bodyend="1478"/>
    <listofallmembers>
      <member refid="classcytnx_1_1Tensor_1a312a8b7b963199a98e59d9f6a97c32e6" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Abs</name></member>
      <member refid="classcytnx_1_1Tensor_1aa8e04d45e4c5b8e6f334e2be38433e07" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Abs_</name></member>
      <member refid="classcytnx_1_1Tensor_1aafd7446e798d34427d4e6a9571861111" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Add</name></member>
      <member refid="classcytnx_1_1Tensor_1a2744949ae1bbbef4a852b11153617b5d" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Add_</name></member>
      <member refid="classcytnx_1_1Tensor_1a68a91d1554a4550eac7d339240fa9d02" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>append</name></member>
      <member refid="classcytnx_1_1Tensor_1a01b8ab0509a7685a84dfed745a7f1596" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>append</name></member>
      <member refid="classcytnx_1_1Tensor_1a1fb350e321d7228a1970da4d3f4dfa31" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>append</name></member>
      <member refid="classcytnx_1_1Tensor_1a7b996d3281e7375b29a7cfe4273b299f" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>astype</name></member>
      <member refid="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>at</name></member>
      <member refid="classcytnx_1_1Tensor_1af7a99f7f160be535a5ac7ac9bcdba730" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>at</name></member>
      <member refid="classcytnx_1_1Tensor_1a5e2248e9babdb786167ed349df9084ae" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>clone</name></member>
      <member refid="classcytnx_1_1Tensor_1a89af177fad9c00c3d09d2c587de2d77a" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Conj</name></member>
      <member refid="classcytnx_1_1Tensor_1ab87b5428c5fb510da02fd3bbe316bbfa" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Conj_</name></member>
      <member refid="classcytnx_1_1Tensor_1a4d7da181303c588f2ab84bffda435525" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>contiguous</name></member>
      <member refid="classcytnx_1_1Tensor_1a3d4342299e6951dae13b6136b89f1d53" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>contiguous_</name></member>
      <member refid="classcytnx_1_1Tensor_1aeee6153da17147b82857e342e2a35c52" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Cpr</name></member>
      <member refid="classcytnx_1_1Tensor_1ac6d3310eb4defbdacf662dcd81d8fe09" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>device</name></member>
      <member refid="classcytnx_1_1Tensor_1a335f7625fa01784f49b2223238d0c14e" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>device_str</name></member>
      <member refid="classcytnx_1_1Tensor_1add04fc004ccab102743f3e392f6bb482" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Div</name></member>
      <member refid="classcytnx_1_1Tensor_1a7e079fdaf9bb56c21e1300dbf08e7223" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Div_</name></member>
      <member refid="classcytnx_1_1Tensor_1a4472af6f8e825a13440e832bf82fb627" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>dtype</name></member>
      <member refid="classcytnx_1_1Tensor_1a9e09106c7529e8be90caa52e1541e498" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>dtype_str</name></member>
      <member refid="classcytnx_1_1Tensor_1a5eaf4c8f99f9776e4461a1f676345ae5" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Eigh</name></member>
      <member refid="classcytnx_1_1Tensor_1aeae314f040e27b581d73c82b33ab6a59" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>equiv</name></member>
      <member refid="classcytnx_1_1Tensor_1aa85b2277ea048c00bef949fc2e7091db" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Exp</name></member>
      <member refid="classcytnx_1_1Tensor_1aefdef16a685cea5b47b682a3c7837da2" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Exp_</name></member>
      <member refid="classcytnx_1_1Tensor_1a0c7f2bac2a03be7d22769c7cb896afbe" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>fill</name></member>
      <member refid="classcytnx_1_1Tensor_1ab6679015cd4b8d0c33207a28986a0b75" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>flatten</name></member>
      <member refid="classcytnx_1_1Tensor_1ab026b0d58ba0bfbaaa20d5b4ac420c2e" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>flatten_</name></member>
      <member refid="classcytnx_1_1Tensor_1afd3a86c7edd3af568060dfb6bfa5aecb" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>from_storage</name></member>
      <member refid="classcytnx_1_1Tensor_1afda200022018b04ca0a29dfb45b7f53c" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Fromfile</name></member>
      <member refid="classcytnx_1_1Tensor_1a1af3441ab3d1bd45f5ead47eead6b81e" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Fromfile</name></member>
      <member refid="classcytnx_1_1Tensor_1ad7b928e4cb89d40cbd99aefab9aa0075" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>get</name></member>
      <member refid="classcytnx_1_1Tensor_1accd77970630990baca3a18638b23fe95" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>imag</name></member>
      <member refid="classcytnx_1_1Tensor_1aee8c0febe1794bd79edc52f2caac9cc3" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Init</name></member>
      <member refid="classcytnx_1_1Tensor_1a46740b4d5f24bfc3d3ce95b151dc6799" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Inv</name></member>
      <member refid="classcytnx_1_1Tensor_1a043e2b24d2765149fd8255936221d924" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Inv_</name></member>
      <member refid="classcytnx_1_1Tensor_1a0cd186f9e001ee836ef4712eca40f049" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>InvM</name></member>
      <member refid="classcytnx_1_1Tensor_1af099f62bda6ff3b15f89d7d33f2786ba" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>InvM_</name></member>
      <member refid="classcytnx_1_1Tensor_1aa66028524d53c79d62714b96cd274ccd" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>is_contiguous</name></member>
      <member refid="classcytnx_1_1Tensor_1a59bb8b7cf3d142d49c51d694e58ace68" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>item</name></member>
      <member refid="classcytnx_1_1Tensor_1a4100edea617039a2b9a0ee3ca2b2aa36" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Load</name></member>
      <member refid="classcytnx_1_1Tensor_1a2a11de9a3ecd1411ef9231c8092628ec" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Load</name></member>
      <member refid="classcytnx_1_1Tensor_1adb752367adea78b251e5a584276c1f40" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Max</name></member>
      <member refid="classcytnx_1_1Tensor_1af540bb4dc6887bf29289722101899a57" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Min</name></member>
      <member refid="classcytnx_1_1Tensor_1ae41aecc16a039a59e2902a31e8eea243" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Mod</name></member>
      <member refid="classcytnx_1_1Tensor_1a443885c8f02ab5352d81255e4650cf32" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Mul</name></member>
      <member refid="classcytnx_1_1Tensor_1a9eb8827f29f8932c24d8315017b7c7e2" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Mul_</name></member>
      <member refid="classcytnx_1_1Tensor_1a7889abcab99ca9800c0cbccbd6767819" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Norm</name></member>
      <member refid="classcytnx_1_1Tensor_1a0409dea9e50793f689eba740638b86a1" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1aba46864b9e09a1bf4a97fea83e459b86" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1ac2114a8a99e86729eb0a50e451355ba8" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1a9d716adbd73ae6265b8b28900a27d284" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1ab2eb1d4e90922e13b98dd313059a0698" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1ae860ace17e670b774aba874b8efcf9f6" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1abd8acfa6ebeebfdcbd13102ebe677d90" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1ae3173c86fef21ec9137a149211a64f31" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1a2652f5158ecab6b2843f030b69cfb4b7" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1adf02bca2315d84489d601d4430a705bf" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1a3b30c26ff85446eed5d865e6491bcc8a" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1ad2c6f3e5625908c8ebb7d2a72f32a6f8" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1ab8591570364d4b41d875363bef709e34" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1a2ed4731096f39b4bf84eaa548d4ba53b" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1Tensor_1a84d7c47ea4cdb206a8ad70b8b3783876" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1a2b8faf316fcdb12ace04abc254894e8b" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1ab12439bd65f734450b8c38a272cd49a3" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1ad46d7c655ac2c606e445221dd1c39199" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1a5b282f7a37f7e49ab7121ebb3cb22cfe" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1af00a0225cdd740c8760cb988fcffd6e4" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1add9291af117caaa0e0d05eb1a0610262" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1aad0d3e44a7d4a57b92f32c501a4185cc" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1a1bba94b0cc3707c177f5155eb2e63868" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1ac2b761ca53212fc5f4e2d02d9f4760ea" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1af5dcbc5be9cae20ceca0efd3eee00ec0" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1aacaa0e5e2e6e1b8df817eb245bfe9ac1" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1a6c28ee27c111f59b2b0df5bbc41305e6" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1a475ee664aa8c7a310b985c714b773153" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1Tensor_1a0bb7ebda69ea886804cec7d23249b5e9" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-</name></member>
      <member refid="classcytnx_1_1Tensor_1a22b227a075c948ca2f8ac2aad8974190" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1aeec97774cd9a706b18275c01531aeb6c" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a2b6a6c64c7c78f6e327109b19f73bd70" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a2c06c92faaadcdf86ec3f1fa6a49d682" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1ad0774a00e3cd4fd16db96aab22f27d1d" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1ad0ed1d38d02d1dab99dcd5b7de5253ef" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a6e86d24c74f2b26a594c743beb2aee35" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a964287761cd657eeb69f543ab6f46cc1" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a0f5afb967b7523d625b96d93894281c2" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a16652a24a546859bed5e0dc7e135b98c" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a69f8e2bb3e453d55249f0ec4fa7fa9d2" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a2e0093fdf3748efaeaaa4e605602ec90" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1ad7e99f6d83a7e8621cc1127ec7a66901" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a6161004fe27673d6eca2858df5324289" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1Tensor_1a09164f6960b922ee005a6039a64a773b" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1a4e542f266b3e4e1d2ff47df445bc403c" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1aa4130962f2f93b2e343c87d224d20bd9" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1a144c0887163bb2af2408fc5aa839651b" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1ab829d78c91a6219cdcc6f0b405026dcd" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1abc01ca46711120855a25f3b717d46fc3" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1af7caa66f558da956a0cefb832bd8fb23" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1af80e3f554940b8415df02072a20553bc" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1a31046ece0a3114203125d330248cef17" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1a9837dbc551a0aa4e693e17aa2f318cba" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1a8aad7a413db36167844659fcbee27ce1" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1a115341b9b82729cdae991cb2001afe5a" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1ae36d337225893c6e6dbd1cc23908c866" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1a6d025a62ec655d68292db8ab0ab8f5d0" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1Tensor_1adbdc402a8c4d6d738523a888bcf9c0c2" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>permute</name></member>
      <member refid="classcytnx_1_1Tensor_1a4239ec84bd34f634a822eeff416f4d63" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>permute_</name></member>
      <member refid="classcytnx_1_1Tensor_1ac5bd2525bacc3713694a063074538e20" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Pow</name></member>
      <member refid="classcytnx_1_1Tensor_1a977738a47390feeab721a599fc21ec28" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Pow_</name></member>
      <member refid="classcytnx_1_1Tensor_1aa3ee5ed793cacd43d3fadbd92d7920a4" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>rank</name></member>
      <member refid="classcytnx_1_1Tensor_1ac863dbd316a4771a95810a2e9b922c4e" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>real</name></member>
      <member refid="classcytnx_1_1Tensor_1a57aea99887adf41da14fd7578ef9bf13" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>reshape</name></member>
      <member refid="classcytnx_1_1Tensor_1a15e7c245ee923c77e02209dc5cfe5198" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>reshape</name></member>
      <member refid="classcytnx_1_1Tensor_1a32e42ecf5755144b071de1be9d13c692" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>reshape</name></member>
      <member refid="classcytnx_1_1Tensor_1a3723449528b9a20dd46c32c9e042b8f0" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>reshape_</name></member>
      <member refid="classcytnx_1_1Tensor_1a0eca35d876d22d96d1aef9f959a946fe" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>same_data</name></member>
      <member refid="classcytnx_1_1Tensor_1ab355c158b0ba1abb20a344c092fb8942" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Save</name></member>
      <member refid="classcytnx_1_1Tensor_1a7465b1ca730e16718c220dfca046412c" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Save</name></member>
      <member refid="classcytnx_1_1Tensor_1a771f1f5b51f89abd8df4166e602214ac" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>set</name></member>
      <member refid="classcytnx_1_1Tensor_1ad93d654b978add6b2f0dfb9f91490209" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>set</name></member>
      <member refid="classcytnx_1_1Tensor_1af36ef858677f13dcda8512fd9b5ae475" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>shape</name></member>
      <member refid="classcytnx_1_1Tensor_1afaa4a4eba4bd98b371fc101fbcfef743" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>storage</name></member>
      <member refid="classcytnx_1_1Tensor_1a4648eef7874bad42d6d7b15fb1598644" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Sub</name></member>
      <member refid="classcytnx_1_1Tensor_1aff0275bf4752791ebc51b3f02b456115" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Sub_</name></member>
      <member refid="classcytnx_1_1Tensor_1af286c5442012735856d4030806fd6573" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Svd</name></member>
      <member refid="classcytnx_1_1Tensor_1a1b1568fca101fb372411927b5c5ba9d4" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Tensor</name></member>
      <member refid="classcytnx_1_1Tensor_1acf7f697a9434f9bc98a7d00a555ee982" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>to</name></member>
      <member refid="classcytnx_1_1Tensor_1a114a31fbb8bf4a90f150b6a67e42183a" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>to_</name></member>
      <member refid="classcytnx_1_1Tensor_1a55d945916b1e3771f100523a5e1de319" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Tofile</name></member>
      <member refid="classcytnx_1_1Tensor_1a65f8d6a498df94116ed294c10033ac8c" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Tofile</name></member>
      <member refid="classcytnx_1_1Tensor_1ad6ca11678a82d78dfa5bd4d62760f75c" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Tofile</name></member>
      <member refid="classcytnx_1_1Tensor_1a8d2f499d0c79e4c46909d2341c374723" prot="public" virt="non-virtual"><scope>cytnx::Tensor</scope><name>Trace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
