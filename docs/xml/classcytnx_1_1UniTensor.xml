<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="classcytnx_1_1UniTensor" kind="class" language="C++" prot="public">
    <compoundname>cytnx::UniTensor</compoundname>
    <includes refid="UniTensor_8hpp" local="no">UniTensor.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a3908e5f31c276031e4a9bdf3539b3fbd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::UniTensor::UniTensor</definition>
        <argsstring>(const Tensor &amp;in_tensor, const bool &amp;is_diag=false, const cytnx_int64 &amp;rowrank=-1)</argsstring>
        <name>UniTensor</name>
        <qualifiedname>cytnx::UniTensor::UniTensor</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in_tensor</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_diag</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> with <ref refid="classcytnx_1_1Tensor" kindref="compound">cytnx::Tensor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classcytnx_1_1Tensor" kindref="compound">cytnx::Tensor</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_diag</parametername>
</parameternamelist>
<parameterdescription>
<para>if the current <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> is a diagonal <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. This will requires input of <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> to be 1D. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowrank</parametername>
</parameternamelist>
<parameterdescription>
<para>the rowrank of the outcome <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note]<orderedlist>
<listitem><para>The constructed <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> will have same rank as the input <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>, with default labels, and a shared view (shared instance) of interal block as the input <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>.</para>
</listitem><listitem><para>The constructed <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> is always untagged.</para>
</listitem><listitem><para>[Important] The internal block of <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> is a referece of input <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. That is, they share the same memory. All the change afterward on <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> block will change in input <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> as well. Use <ref refid="classcytnx_1_1Tensor_1a5e2248e9babdb786167ed349df9084ae" kindref="member">Tensor.clone()</ref> if a shared view is not the case.</para>
</listitem></orderedlist>
</para>
<para><heading level="2">Example:</heading>
</para>
<para><heading level="3">c++ API:</heading>
</para>
<para><programlisting filename="example/UniTensor/fromTensor.cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cytnx_8hpp" kindref="compound">cytnx.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecytnx" kindref="compound">cytnx</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref><sp/>T<sp/>=<sp/><ref refid="namespacecytnx_1ab8a79a03fb0465f3eb2641017f3f1755" kindref="member">zeros</ref>({4,<sp/>4});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref><sp/>CyT<sp/>=<sp/><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>(T,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>un-tagged<sp/>CyTensor<sp/>from<sp/>Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CyT.print_diagram();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;before:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>T<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>CyT<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>is<sp/>a<sp/>shared<sp/>view,<sp/>so<sp/>a<sp/>change<sp/>to<sp/>CyT<sp/>will<sp/>affect<sp/>Tensor<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CyT.<ref refid="classcytnx_1_1Tensor_1a55f6e4c4106c0964f23fb06ac63d75ec" kindref="member">at</ref>&lt;<ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref>&gt;({0,<sp/>0})<sp/>=<sp/>1.456;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;after:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>T<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>CyT<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>want<sp/>a<sp/>new<sp/>instance<sp/>of<sp/>memery,<sp/>use<sp/>clone<sp/>at<sp/>initialize:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[non-share<sp/>example]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref><sp/>CyT_nonshare<sp/>=<sp/><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>(T.<ref refid="classcytnx_1_1Tensor_1a5e2248e9babdb786167ed349df9084ae" kindref="member">clone</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;before:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>T<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>CyT_nonshare<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CyT_nonshare.<ref refid="classcytnx_1_1UniTensor_1a6910e0251891d7289b5014b7987369ff" kindref="member">at</ref>&lt;<ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref>&gt;({1,<sp/>1})<sp/>=<sp/>2.345;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;after&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>T<sp/>&lt;&lt;<sp/>endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>unchanged!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>CyT_nonshare<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>-----------------------
tensor Name : 
tensor Rank : 2
block_form  : false
is_diag     : False
on device   : cytnx device: CPU
            -------------      
           /             \     
     0 ____| 4           |        
           |             |     
     1 ____| 4           |        
           \             /     
            -------------      
before:

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]


-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



after:

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]


-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



[non-share example]
before:

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]


-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



after

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]


-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 2.34500e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



</verbatim> <heading level="3">python API:</heading>
</para>
<para><programlisting filename="example/UniTensor/fromTensor.py"><codeline><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cytnx<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">T<sp/>=<sp/>zeros([4,4])</highlight></codeline>
<codeline><highlight class="normal">CyT<sp/>=<sp/>UniTensor(T,rowrank=2)<sp/></highlight><highlight class="comment">#create<sp/>un-tagged<sp/>UniTensor<sp/>from<sp/>Tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">CyT.print_diagram()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(</highlight><highlight class="stringliteral">&quot;before:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">print(T)</highlight></codeline>
<codeline><highlight class="normal">print(CyT)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#Note<sp/>that<sp/>it<sp/>is<sp/>a<sp/>shared<sp/>view,<sp/>so<sp/>a<sp/>change<sp/>to<sp/>CyT<sp/>will<sp/>affect<sp/>Tensor<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">CyT.set_elem([0,0],1.456)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(</highlight><highlight class="stringliteral">&quot;after&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">print(T)</highlight></codeline>
<codeline><highlight class="normal">print(CyT)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#If<sp/>we<sp/>want<sp/>a<sp/>new<sp/>instance<sp/>of<sp/>memery,<sp/>use<sp/>clone<sp/>at<sp/>initialize:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(</highlight><highlight class="stringliteral">&quot;[non-share<sp/>example]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">CyT_nonshare<sp/>=<sp/>UniTensor(T.clone(),rowrank=2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(</highlight><highlight class="stringliteral">&quot;before:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">print(T)</highlight></codeline>
<codeline><highlight class="normal">print(CyT_nonshare)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">CyT_nonshare.set_elem([1,1],2.345);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">print(</highlight><highlight class="stringliteral">&quot;after&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">print(T)<sp/></highlight><highlight class="comment">#<sp/>T<sp/>is<sp/>unchanged!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(CyT_nonshare)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
</programlisting> <heading level="4">output&gt;</heading>
</para>
<para><verbatim>-----------------------
tensor Name : 
tensor Rank : 2
block_form  : false
is_diag     : False
on device   : cytnx device: CPU
            -------------      
           /             \     
     0 ____| 4           |        
           |             |     
     1 ____| 4           |        
           \             /     
            -------------      
before:

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]




after

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]




[non-share example]
before:

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]




after

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]



-------- start of print ---------
Tensor name: 
Tensor name: 
is_diag    : False
contiguous : True

Total elem: 16
type  : Double (Float64)
cytnx device: CPU
Shape : (4,4)
[[1.45600e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 2.34500e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]
 [0.00000e+00 0.00000e+00 0.00000e+00 0.00000e+00 ]]




</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2443" column="14" bodyfile="include/UniTensor.hpp" bodystart="2443" bodyend="2447"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a42eb68b05bbcdc54c0cdefcd96f7bca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::Init</definition>
        <argsstring>(const Tensor &amp;in_tensor, const bool &amp;is_diag=false, const cytnx_int64 &amp;rowrank=-1)</argsstring>
        <name>Init</name>
        <qualifiedname>cytnx::UniTensor::Init</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in_tensor</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_diag</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2448" column="10" bodyfile="include/UniTensor.hpp" bodystart="2448" bodyend="2454"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ade54cebf78868bc7dcc17bfcbad064f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::UniTensor::UniTensor</definition>
        <argsstring>(const std::vector&lt; Bond &gt; &amp;bonds, const std::vector&lt; std::string &gt; &amp;in_labels={}, const cytnx_int64 &amp;rowrank=-1, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu, const bool &amp;is_diag=false)</argsstring>
        <name>UniTensor</name>
        <qualifiedname>cytnx::UniTensor::UniTensor</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>in_labels</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_diag</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para>the bond list. when init, each bond will be copy( not a shared view of bond object
with input bond) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>the labels for each rank(bond) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowrank</parametername>
</parameternamelist>
<parameterdescription>
<para>the rank of physical row space. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_diag</parametername>
</parameternamelist>
<parameterdescription>
<para>if the constructed <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> is a diagonal <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. This can only be assigned true when the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> is square, untagged and rank-2 <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note]<orderedlist>
<listitem><para>the bonds cannot contain simutaneously untagged bond(s) and tagged bond(s)</para>
</listitem><listitem><para>If the bonds are with symmetry (qnums), the symmetry types should be the same across all the bonds. </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2476" column="5" bodyfile="include/UniTensor.hpp" bodystart="2476" bodyend="2489"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1acf1e438ccbcdc15802f097a5082e015e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cytnx::UniTensor::UniTensor</definition>
        <argsstring>(const std::vector&lt; Bond &gt; &amp;bonds, const std::vector&lt; cytnx_int64 &gt; &amp;in_labels, const cytnx_int64 &amp;rowrank=-1, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu, const bool &amp;is_diag=false)</argsstring>
        <name>UniTensor</name>
        <qualifiedname>cytnx::UniTensor::UniTensor</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>in_labels</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_diag</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct a new Uni <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_labels</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowrank</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_diag</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2502" column="5" bodyfile="include/UniTensor.hpp" bodystart="2502" bodyend="2517"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1abedbb5bbcb64b6b6357d973ecd7bca4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::Init</definition>
        <argsstring>(const std::vector&lt; Bond &gt; &amp;bonds, const std::vector&lt; std::string &gt; &amp;in_labels={}, const cytnx_int64 &amp;rowrank=-1, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu, const bool &amp;is_diag=false)</argsstring>
        <name>Init</name>
        <qualifiedname>cytnx::UniTensor::Init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>in_labels</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_diag</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2518" column="10" bodyfile="include/UniTensor.hpp" bodystart="2518" bodyend="2561"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af88d05dc8c534accadc7d894dc691d1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::Init</definition>
        <argsstring>(const std::vector&lt; Bond &gt; &amp;bonds, const std::vector&lt; cytnx_int64 &gt; &amp;in_labels, const cytnx_int64 &amp;rowrank=-1, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu, const bool &amp;is_diag=false)</argsstring>
        <name>Init</name>
        <qualifiedname>cytnx::UniTensor::Init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>in_labels</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>is_diag</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bonds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_labels</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowrank</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_diag</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2574" column="10" bodyfile="include/UniTensor.hpp" bodystart="2574" bodyend="2581"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a9ea55737e39a8d81f4e90a81fd47692d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_name</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>set_name</name>
        <qualifiedname>cytnx::UniTensor::set_name</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>set the name of the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>the name. It should be a string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2590" column="15" bodyfile="include/UniTensor.hpp" bodystart="2590" bodyend="2593"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a87b35b1dab8103b195f83fef23fa16ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const cytnx_int64 &amp;idx, const cytnx_int64 &amp;new_label, const bool &amp;by_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>new_label</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
        </param>
        <briefdescription>
<para>set a new label for bond at the assigned index. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the bond. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_label</parametername>
</parameternamelist>
<parameterdescription>
<para>the new label that is assign to the bond.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] the new assign label cannot be the same as the label of any other bonds in the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. ( cannot have duplicate labels ) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2605" column="15" bodyfile="include/UniTensor.hpp" bodystart="2605" bodyend="2609"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a0fa37d97d1501ab1c13486d9faa6286d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const cytnx_int64 &amp;idx, const cytnx_int64 &amp;new_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
<para>set a new label for bond at the assigned index. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the bond. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_label</parametername>
</parameternamelist>
<parameterdescription>
<para>the new label that is assign to the bond.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] the new assign label cannot be the same as the label of any other bonds in the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. ( cannot have duplicate labels ) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2621" column="15" bodyfile="include/UniTensor.hpp" bodystart="2621" bodyend="2624"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a6e81820a5c1de5e398ccff44ae3cb3a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const cytnx_int64 &amp;idx, const std::string &amp;new_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
<para>set a new label for bond at the assigned index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the bond. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_label</parametername>
</parameternamelist>
<parameterdescription>
<para>the new label that is assign to the bond.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] the new assign label cannot be the same as the label of any other bonds in the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. ( cannot have duplicate labels ) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2635" column="15" bodyfile="include/UniTensor.hpp" bodystart="2635" bodyend="2638"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a163ad7f509495337e6c4ee327bc90294" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const cytnx_int64 &amp;idx, const char *new_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2640" column="15" bodyfile="include/UniTensor.hpp" bodystart="2640" bodyend="2643"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a32f8c1ca6d2e782c2fd1a443df4884fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const std::string &amp;old_label, const std::string &amp;new_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>old_label</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
<para>set a new label for bond to replace one of the current label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old_label</parametername>
</parameternamelist>
<parameterdescription>
<para>the current label of the bond. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_label</parametername>
</parameternamelist>
<parameterdescription>
<para>the new label that is assign to the bond.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] the new assign label cannot be the same as the label of any other bonds in the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. ( cannot have duplicate labels ) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2655" column="15" bodyfile="include/UniTensor.hpp" bodystart="2655" bodyend="2658"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a669817ede29d57f6a0b05b69e19ab51f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const char *old_label, const std::string &amp;new_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>old_label</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2660" column="15" bodyfile="include/UniTensor.hpp" bodystart="2660" bodyend="2663"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa37a5f9513c62bbb58d86f9eb332ad07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const std::string &amp;old_label, const char *new_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>old_label</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2665" column="15" bodyfile="include/UniTensor.hpp" bodystart="2665" bodyend="2668"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aab2831be9e39aaa46b3dd3a3191f83da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_label</definition>
        <argsstring>(const char *old_label, const char *new_label)</argsstring>
        <name>set_label</name>
        <qualifiedname>cytnx::UniTensor::set_label</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>old_label</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2670" column="15" bodyfile="include/UniTensor.hpp" bodystart="2670" bodyend="2673"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a8223345c1161d4ffd52ea8276f54a32a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_labels</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;new_labels)</argsstring>
        <name>set_labels</name>
        <qualifiedname>cytnx::UniTensor::set_labels</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>new_labels</declname>
        </param>
        <briefdescription>
<para>change a new label for bond with original label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old_lbl</parametername>
</parameternamelist>
<parameterdescription>
<para>the original label of the bond that to be replaced. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_label</parametername>
</parameternamelist>
<parameterdescription>
<para>the new label that is assign to replace the original label.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] the new assign label cannot be the same as the label of any other bonds in the <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. ( cannot have duplicate labels ) <xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect>set new labels for all the bonds. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>the new labels for each bond.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] the new assign labels cannot have duplicate element(s), and should have the same size as the rank of <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2703" column="15" bodyfile="include/UniTensor.hpp" bodystart="2703" bodyend="2706"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a54712d4aedcfe01324bd7d4aa042cf8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_labels</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;new_labels)</argsstring>
        <name>set_labels</name>
        <qualifiedname>cytnx::UniTensor::set_labels</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>new_labels</declname>
        </param>
        <briefdescription>
<para>set new labels for all the bonds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>the new labels for each bond.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
[Note] the new assign labels cannot have duplicate element(s), and should have the same size as the rank of <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2716" column="15" bodyfile="include/UniTensor.hpp" bodystart="2716" bodyend="2719"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a3edc556b2b60d672d1e1b40d2ccd69e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_labels</definition>
        <argsstring>(const std::initializer_list&lt; char * &gt; &amp;new_labels)</argsstring>
        <name>set_labels</name>
        <qualifiedname>cytnx::UniTensor::set_labels</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; char * &gt; &amp;</type>
          <declname>new_labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2720" column="15" bodyfile="include/UniTensor.hpp" bodystart="2720" bodyend="2727"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af8fae0a4e592074408efb5f50fb96830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::set_rowrank</definition>
        <argsstring>(const cytnx_uint64 &amp;new_rowrank)</argsstring>
        <name>set_rowrank</name>
        <qualifiedname>cytnx::UniTensor::set_rowrank</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>new_rowrank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2729" column="15" bodyfile="include/UniTensor.hpp" bodystart="2729" bodyend="2732"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a06d8f228e0440461df89e9604b66a141" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; cytnx::UniTensor::item</definition>
        <argsstring>()</argsstring>
        <name>item</name>
        <qualifiedname>cytnx::UniTensor::item</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2735" column="7" bodyfile="include/UniTensor.hpp" bodystart="2735" bodyend="2743"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ae46713d86ffeae73218f696eb5de3507" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar::Sproxy</type>
        <definition>Scalar::Sproxy cytnx::UniTensor::item</definition>
        <argsstring>() const</argsstring>
        <name>item</name>
        <qualifiedname>cytnx::UniTensor::item</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2745" column="20" bodyfile="include/UniTensor.hpp" bodystart="2745" bodyend="2753"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af1a73d20890029bde10151a387d5f647" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref></type>
        <definition>cytnx_uint64 cytnx::UniTensor::Nblocks</definition>
        <argsstring>() const</argsstring>
        <name>Nblocks</name>
        <qualifiedname>cytnx::UniTensor::Nblocks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2755" column="18" bodyfile="include/UniTensor.hpp" bodystart="2755" bodyend="2755"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a95239beb2137a790e5765e32060ff09f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref></type>
        <definition>cytnx_uint64 cytnx::UniTensor::rank</definition>
        <argsstring>() const</argsstring>
        <name>rank</name>
        <qualifiedname>cytnx::UniTensor::rank</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2756" column="18" bodyfile="include/UniTensor.hpp" bodystart="2756" bodyend="2756"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a373efd1b4ee3f0588f30f4795f2c5c16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref></type>
        <definition>cytnx_uint64 cytnx::UniTensor::rowrank</definition>
        <argsstring>() const</argsstring>
        <name>rowrank</name>
        <qualifiedname>cytnx::UniTensor::rowrank</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2757" column="18" bodyfile="include/UniTensor.hpp" bodystart="2757" bodyend="2757"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa3a370844d981cb86c3d784ecbb573c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int cytnx::UniTensor::dtype</definition>
        <argsstring>() const</argsstring>
        <name>dtype</name>
        <qualifiedname>cytnx::UniTensor::dtype</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2758" column="18" bodyfile="include/UniTensor.hpp" bodystart="2758" bodyend="2758"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1afe930fe1d99b1149ccb65e1003c6030b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int cytnx::UniTensor::uten_type</definition>
        <argsstring>() const</argsstring>
        <name>uten_type</name>
        <qualifiedname>cytnx::UniTensor::uten_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2759" column="9" bodyfile="include/UniTensor.hpp" bodystart="2759" bodyend="2759"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a8e4a44ff5b17788458dc8cf2642f811f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int cytnx::UniTensor::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <qualifiedname>cytnx::UniTensor::device</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2760" column="9" bodyfile="include/UniTensor.hpp" bodystart="2760" bodyend="2760"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a55941f8078598076309486cc1de3d73f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cytnx::UniTensor::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>cytnx::UniTensor::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2761" column="17" bodyfile="include/UniTensor.hpp" bodystart="2761" bodyend="2761"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a91173048a7985caa45786a7c08f68c40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cytnx::UniTensor::dtype_str</definition>
        <argsstring>() const</argsstring>
        <name>dtype_str</name>
        <qualifiedname>cytnx::UniTensor::dtype_str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2762" column="17" bodyfile="include/UniTensor.hpp" bodystart="2762" bodyend="2762"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ae7862c67c8ce93035aa7c6ffb3fc0f17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cytnx::UniTensor::device_str</definition>
        <argsstring>() const</argsstring>
        <name>device_str</name>
        <qualifiedname>cytnx::UniTensor::device_str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2763" column="17" bodyfile="include/UniTensor.hpp" bodystart="2763" bodyend="2763"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a1c7cfbb826a15cd3272985e6db0d9c78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string cytnx::UniTensor::uten_type_str</definition>
        <argsstring>() const</argsstring>
        <name>uten_type_str</name>
        <qualifiedname>cytnx::UniTensor::uten_type_str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2764" column="17" bodyfile="include/UniTensor.hpp" bodystart="2764" bodyend="2764"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a0b2eb7bd2d16f74c43f991c2f3a64fac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::UniTensor::is_contiguous</definition>
        <argsstring>() const</argsstring>
        <name>is_contiguous</name>
        <qualifiedname>cytnx::UniTensor::is_contiguous</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2765" column="10" bodyfile="include/UniTensor.hpp" bodystart="2765" bodyend="2765"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a8de198d36f24c6e9d49b357632ec0c98" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::UniTensor::is_diag</definition>
        <argsstring>() const</argsstring>
        <name>is_diag</name>
        <qualifiedname>cytnx::UniTensor::is_diag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2766" column="10" bodyfile="include/UniTensor.hpp" bodystart="2766" bodyend="2766"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a1c3cbcbe162042897fe77c9ce7632af2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::UniTensor::is_tag</definition>
        <argsstring>() const</argsstring>
        <name>is_tag</name>
        <qualifiedname>cytnx::UniTensor::is_tag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2767" column="10" bodyfile="include/UniTensor.hpp" bodystart="2767" bodyend="2767"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a834fdcd0eaf341c351be23f8445a03bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &gt;</type>
        <definition>std::vector&lt; Symmetry &gt; cytnx::UniTensor::syms</definition>
        <argsstring>() const</argsstring>
        <name>syms</name>
        <qualifiedname>cytnx::UniTensor::syms</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2768" column="17" bodyfile="include/UniTensor.hpp" bodystart="2768" bodyend="2768"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a41d3d78b0b9c4118b15925169720cfb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const bool &amp;</type>
        <definition>const bool &amp; cytnx::UniTensor::is_braket_form</definition>
        <argsstring>() const</argsstring>
        <name>is_braket_form</name>
        <qualifiedname>cytnx::UniTensor::is_braket_form</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2769" column="16" bodyfile="include/UniTensor.hpp" bodystart="2769" bodyend="2769"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ad46c621c998425501578d4e39d9eb3fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; cytnx::UniTensor::labels</definition>
        <argsstring>() const</argsstring>
        <name>labels</name>
        <qualifiedname>cytnx::UniTensor::labels</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2770" column="23" bodyfile="include/UniTensor.hpp" bodystart="2770" bodyend="2770"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a1c7a9eebcb74305bbf42e57d667086d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref></type>
        <definition>cytnx_int64 cytnx::UniTensor::get_index</definition>
        <argsstring>(std::string lbl) const</argsstring>
        <name>get_index</name>
        <qualifiedname>cytnx::UniTensor::get_index</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>lbl</declname>
        </param>
        <briefdescription>
<para>Get the index of an desired label string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lbl</parametername>
</parameternamelist>
<parameterdescription>
<para>Label you want to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the label. If not found, return -1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2777" column="17" bodyfile="include/UniTensor.hpp" bodystart="2777" bodyend="2777"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1adb09a9052e76013471b08f537d0015e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Bond &gt; &amp; cytnx::UniTensor::bonds</definition>
        <argsstring>() const</argsstring>
        <name>bonds</name>
        <qualifiedname>cytnx::UniTensor::bonds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2778" column="23" bodyfile="include/UniTensor.hpp" bodystart="2778" bodyend="2778"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a6875687e10e8b1582644fb6985f36f98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
        <definition>std::vector&lt; Bond &gt; &amp; cytnx::UniTensor::bonds</definition>
        <argsstring>()</argsstring>
        <name>bonds</name>
        <qualifiedname>cytnx::UniTensor::bonds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2779" column="17" bodyfile="include/UniTensor.hpp" bodystart="2779" bodyend="2779"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a4a87af4bf568263dcd6db1376f35d97c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt;</type>
        <definition>std::vector&lt; cytnx_uint64 &gt; cytnx::UniTensor::shape</definition>
        <argsstring>() const</argsstring>
        <name>shape</name>
        <qualifiedname>cytnx::UniTensor::shape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2780" column="17" bodyfile="include/UniTensor.hpp" bodystart="2780" bodyend="2780"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aac44ae40cb93f11f673ac0c1930ae319" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::UniTensor::is_blockform</definition>
        <argsstring>() const</argsstring>
        <name>is_blockform</name>
        <qualifiedname>cytnx::UniTensor::is_blockform</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2781" column="10" bodyfile="include/UniTensor.hpp" bodystart="2781" bodyend="2781"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a9aa08f2c848cc7d31bceac7656b4a976" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::to_</definition>
        <argsstring>(const int &amp;device)</argsstring>
        <name>to_</name>
        <qualifiedname>cytnx::UniTensor::to_</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2783" column="10" bodyfile="include/UniTensor.hpp" bodystart="2783" bodyend="2783"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a025f4a2d775a9892b7f86aeff364fa49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::to</definition>
        <argsstring>(const int &amp;device) const</argsstring>
        <name>to</name>
        <qualifiedname>cytnx::UniTensor::to</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2784" column="15" bodyfile="include/UniTensor.hpp" bodystart="2784" bodyend="2788"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ae1125e6627eb2f5268d5c21944d31434" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <qualifiedname>cytnx::UniTensor::clone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2789" column="15" bodyfile="include/UniTensor.hpp" bodystart="2789" bodyend="2793"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a04977b5c16428f35abeefbc7b3e235e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::relabels</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;new_labels) const</argsstring>
        <name>relabels</name>
        <qualifiedname>cytnx::UniTensor::relabels</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>new_labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_labels</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2802" column="15" bodyfile="include/UniTensor.hpp" bodystart="2802" bodyend="2806"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aea30e0417a4b6552a016d77ff10cc032" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::relabels</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;new_labels) const</argsstring>
        <name>relabels</name>
        <qualifiedname>cytnx::UniTensor::relabels</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>new_labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2807" column="15" bodyfile="include/UniTensor.hpp" bodystart="2807" bodyend="2811"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a4c30689806c65ea691ab89e3d4383f76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::relabels</definition>
        <argsstring>(const std::initializer_list&lt; char * &gt; &amp;new_lbls) const</argsstring>
        <name>relabels</name>
        <qualifiedname>cytnx::UniTensor::relabels</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; char * &gt; &amp;</type>
          <declname>new_lbls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2812" column="15" bodyfile="include/UniTensor.hpp" bodystart="2812" bodyend="2822"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a497ff915bf717edacbc5a8813393eb3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::relabel</definition>
        <argsstring>(const cytnx_int64 &amp;inx, const cytnx_int64 &amp;new_label, const bool &amp;by_label=false) const</argsstring>
        <name>relabel</name>
        <qualifiedname>cytnx::UniTensor::relabel</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>inx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>new_label</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000007"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2834" column="15" bodyfile="include/UniTensor.hpp" bodystart="2834" bodyend="2839"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ace3f158d0212942e6e9b0d5d07ebbf92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::relabel</definition>
        <argsstring>(const cytnx_int64 &amp;inx, const std::string &amp;new_label) const</argsstring>
        <name>relabel</name>
        <qualifiedname>cytnx::UniTensor::relabel</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>inx</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2840" column="15" bodyfile="include/UniTensor.hpp" bodystart="2840" bodyend="2844"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a89b99b81994e6be6ee5c11ed18256f59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::relabel</definition>
        <argsstring>(const std::string &amp;old_label, const std::string &amp;new_label) const</argsstring>
        <name>relabel</name>
        <qualifiedname>cytnx::UniTensor::relabel</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>old_label</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>new_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2845" column="15" bodyfile="include/UniTensor.hpp" bodystart="2845" bodyend="2849"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a61e40e264c721245ffeaaa548b86c435" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::astype</definition>
        <argsstring>(const unsigned int &amp;dtype) const</argsstring>
        <name>astype</name>
        <qualifiedname>cytnx::UniTensor::astype</qualifiedname>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2851" column="15" bodyfile="include/UniTensor.hpp" bodystart="2851" bodyend="2859"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a21b20022105038b58f97a3770fdef97b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::permute</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;mapper, const cytnx_int64 &amp;rowrank=-1, const bool &amp;by_label=false)</argsstring>
        <name>permute</name>
        <qualifiedname>cytnx::UniTensor::permute</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>@bylabel will be deprecated! </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapper</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowrank</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2870" column="15" bodyfile="include/UniTensor.hpp" bodystart="2870" bodyend="2875"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ad05b261003c575e244588e772a0ed6db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::permute</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;mapper, const cytnx_int64 &amp;rowrank=-1)</argsstring>
        <name>permute</name>
        <qualifiedname>cytnx::UniTensor::permute</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2881" column="15" bodyfile="include/UniTensor.hpp" bodystart="2881" bodyend="2885"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa9757f25e5ca3e5580da445c56c3ce50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::permute</definition>
        <argsstring>(const std::initializer_list&lt; char * &gt; &amp;mapper, const cytnx_int64 &amp;rowrank=-1)</argsstring>
        <name>permute</name>
        <qualifiedname>cytnx::UniTensor::permute</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; char * &gt; &amp;</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2886" column="15" bodyfile="include/UniTensor.hpp" bodystart="2886" bodyend="2892"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af9d72a33b623bf197ede54cb8b9fc866" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::permute_</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;mapper, const cytnx_int64 &amp;rowrank=-1, const bool &amp;by_label=false)</argsstring>
        <name>permute_</name>
        <qualifiedname>cytnx::UniTensor::permute_</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000008"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapper</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowrank</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2905" column="10" bodyfile="include/UniTensor.hpp" bodystart="2905" bodyend="2908"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5490a2af97ca08b1efffa10981809384" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::permute_</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;mapper, const cytnx_int64 &amp;rowrank=-1)</argsstring>
        <name>permute_</name>
        <qualifiedname>cytnx::UniTensor::permute_</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2909" column="10" bodyfile="include/UniTensor.hpp" bodystart="2909" bodyend="2911"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a80cf6e93f3dc59955dd00d167cd035b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::permute_</definition>
        <argsstring>(const std::initializer_list&lt; char * &gt; &amp;mapper, const cytnx_int64 &amp;rowrank=-1)</argsstring>
        <name>permute_</name>
        <qualifiedname>cytnx::UniTensor::permute_</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; char * &gt; &amp;</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2912" column="10" bodyfile="include/UniTensor.hpp" bodystart="2912" bodyend="2918"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a78d8b11e2327e3323c23c5f8e098c165" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::contiguous</definition>
        <argsstring>() const</argsstring>
        <name>contiguous</name>
        <qualifiedname>cytnx::UniTensor::contiguous</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2923" column="15" bodyfile="include/UniTensor.hpp" bodystart="2923" bodyend="2927"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a80a6e52a909c02c577ebeeb815f93ebf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::contiguous_</definition>
        <argsstring>()</argsstring>
        <name>contiguous_</name>
        <qualifiedname>cytnx::UniTensor::contiguous_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2928" column="10" bodyfile="include/UniTensor.hpp" bodystart="2928" bodyend="2928"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a685061555097873eb172381059fda92b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::print_diagram</definition>
        <argsstring>(const bool &amp;bond_info=false)</argsstring>
        <name>print_diagram</name>
        <qualifiedname>cytnx::UniTensor::print_diagram</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>bond_info</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2929" column="10" bodyfile="include/UniTensor.hpp" bodystart="2929" bodyend="2929"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ae3635708a51d75cde30af3a6bb87fe9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::print_blocks</definition>
        <argsstring>(const bool &amp;full_info=true) const</argsstring>
        <name>print_blocks</name>
        <qualifiedname>cytnx::UniTensor::print_blocks</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>full_info</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2930" column="10" bodyfile="include/UniTensor.hpp" bodystart="2930" bodyend="2930"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a05ae9cbc839846845f8cc5f10768c03b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::print_block</definition>
        <argsstring>(const cytnx_int64 &amp;idx, const bool &amp;full_info=true) const</argsstring>
        <name>print_block</name>
        <qualifiedname>cytnx::UniTensor::print_block</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>full_info</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2931" column="10" bodyfile="include/UniTensor.hpp" bodystart="2931" bodyend="2931"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a97b9030297fd8d017989d5c68e41e420" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::group_basis_</definition>
        <argsstring>()</argsstring>
        <name>group_basis_</name>
        <qualifiedname>cytnx::UniTensor::group_basis_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2933" column="10" bodyfile="include/UniTensor.hpp" bodystart="2933" bodyend="2935"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aaccbad43729ab4e2bc8ac56925a71d6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::group_basis</definition>
        <argsstring>() const</argsstring>
        <name>group_basis</name>
        <qualifiedname>cytnx::UniTensor::group_basis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2937" column="15" bodyfile="include/UniTensor.hpp" bodystart="2937" bodyend="2941"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a6910e0251891d7289b5014b7987369ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; cytnx::UniTensor::at</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator)</argsstring>
        <name>at</name>
        <qualifiedname>cytnx::UniTensor::at</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2945" column="7" bodyfile="include/UniTensor.hpp" bodystart="2945" bodyend="2963"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a7d514b8969ce13d75fa49447ac7f1b6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T &amp; cytnx::UniTensor::at</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator) const</argsstring>
        <name>at</name>
        <qualifiedname>cytnx::UniTensor::at</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2966" column="13" bodyfile="include/UniTensor.hpp" bodystart="2966" bodyend="2984"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1afbc92cb5b89de62af024d2a7892511ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Scalar::Sproxy</type>
        <definition>const Scalar::Sproxy cytnx::UniTensor::at</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator) const</argsstring>
        <name>at</name>
        <qualifiedname>cytnx::UniTensor::at</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="2986" column="26" bodyfile="include/UniTensor.hpp" bodystart="2986" bodyend="2999"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5e01dc0a9ed6cbada0635744a935911c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Scalar::Sproxy</type>
        <definition>Scalar::Sproxy cytnx::UniTensor::at</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator)</argsstring>
        <name>at</name>
        <qualifiedname>cytnx::UniTensor::at</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3001" column="20" bodyfile="include/UniTensor.hpp" bodystart="3001" bodyend="3014"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a7d4df6dffeca0fd8eafdb9d766813f84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::UniTensor::get_block</definition>
        <argsstring>(const cytnx_uint64 &amp;idx=0) const</argsstring>
        <name>get_block</name>
        <qualifiedname>cytnx::UniTensor::get_block</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3017" column="12" bodyfile="include/UniTensor.hpp" bodystart="3017" bodyend="3017"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ad778e7a98f758902ec5cba40ea5dcced" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::UniTensor::get_block</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force=false) const</argsstring>
        <name>get_block</name>
        <qualifiedname>cytnx::UniTensor::get_block</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3020" column="12" bodyfile="include/UniTensor.hpp" bodystart="3020" bodyend="3022"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1afb6f38f370802c39cc4bae6eebf7ee5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::UniTensor::get_block</definition>
        <argsstring>(const std::initializer_list&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force=false) const</argsstring>
        <name>get_block</name>
        <qualifiedname>cytnx::UniTensor::get_block</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3023" column="12" bodyfile="include/UniTensor.hpp" bodystart="3023" bodyend="3027"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1abee44516bc18f72b726500bc2bb4872f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>const Tensor &amp; cytnx::UniTensor::get_block_</definition>
        <argsstring>(const cytnx_uint64 &amp;idx=0) const</argsstring>
        <name>get_block_</name>
        <qualifiedname>cytnx::UniTensor::get_block_</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3030" column="18" bodyfile="include/UniTensor.hpp" bodystart="3030" bodyend="3032"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1affb7a9d6dcbf5cdda50187ea0e01ecd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::UniTensor::get_block_</definition>
        <argsstring>(const cytnx_uint64 &amp;idx=0)</argsstring>
        <name>get_block_</name>
        <qualifiedname>cytnx::UniTensor::get_block_</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3035" column="12" bodyfile="include/UniTensor.hpp" bodystart="3035" bodyend="3035"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a14cdae1423c2c10c2f22605016c555c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::UniTensor::get_block_</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force=false)</argsstring>
        <name>get_block_</name>
        <qualifiedname>cytnx::UniTensor::get_block_</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3038" column="12" bodyfile="include/UniTensor.hpp" bodystart="3038" bodyend="3040"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa2684dac87dc55e074b5b07fac7b2f81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::UniTensor::get_block_</definition>
        <argsstring>(const std::initializer_list&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force=false)</argsstring>
        <name>get_block_</name>
        <qualifiedname>cytnx::UniTensor::get_block_</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3041" column="12" bodyfile="include/UniTensor.hpp" bodystart="3041" bodyend="3044"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a518f2ac9c85588e6eb02abe1bec47ae1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>const Tensor &amp; cytnx::UniTensor::get_block_</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force=false) const</argsstring>
        <name>get_block_</name>
        <qualifiedname>cytnx::UniTensor::get_block_</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3048" column="18" bodyfile="include/UniTensor.hpp" bodystart="3048" bodyend="3051"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a0d37afb42e347d3acc5e0d0b0859848e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>const Tensor &amp; cytnx::UniTensor::get_block_</definition>
        <argsstring>(const std::initializer_list&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force=false) const</argsstring>
        <name>get_block_</name>
        <qualifiedname>cytnx::UniTensor::get_block_</qualifiedname>
        <param>
          <type>const std::initializer_list&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3052" column="18" bodyfile="include/UniTensor.hpp" bodystart="3052" bodyend="3056"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a18f7a36047f964adf220d92dafbef3c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt; Tensor &gt; cytnx::UniTensor::get_blocks</definition>
        <argsstring>() const</argsstring>
        <name>get_blocks</name>
        <qualifiedname>cytnx::UniTensor::get_blocks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3060" column="17" bodyfile="include/UniTensor.hpp" bodystart="3060" bodyend="3060"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ab201df6580c4b3c912b2789f693a9172" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Tensor &gt; &amp; cytnx::UniTensor::get_blocks_</definition>
        <argsstring>(const bool &amp;silent=false) const</argsstring>
        <name>get_blocks_</name>
        <qualifiedname>cytnx::UniTensor::get_blocks_</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>silent</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3063" column="23" bodyfile="include/UniTensor.hpp" bodystart="3063" bodyend="3065"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a0586ff59c33eda6cc9fbb3ea25cb3aca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
        <definition>std::vector&lt; Tensor &gt; &amp; cytnx::UniTensor::get_blocks_</definition>
        <argsstring>(const bool &amp;silent=false)</argsstring>
        <name>get_blocks_</name>
        <qualifiedname>cytnx::UniTensor::get_blocks_</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>silent</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3067" column="17" bodyfile="include/UniTensor.hpp" bodystart="3067" bodyend="3069"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1abcd3008bf05771f0623ce1ef80b1085a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::put_block</definition>
        <argsstring>(const Tensor &amp;in, const cytnx_uint64 &amp;idx=0)</argsstring>
        <name>put_block</name>
        <qualifiedname>cytnx::UniTensor::put_block</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3072" column="10" bodyfile="include/UniTensor.hpp" bodystart="3072" bodyend="3074"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a226e3bab6bd4fd502c96a89380dc06a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::put_block</definition>
        <argsstring>(const Tensor &amp;in, const std::vector&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force)</argsstring>
        <name>put_block</name>
        <qualifiedname>cytnx::UniTensor::put_block</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3076" column="10" bodyfile="include/UniTensor.hpp" bodystart="3076" bodyend="3078"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a862cac873722d2f6f6e0bd700a90dbf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::put_block_</definition>
        <argsstring>(Tensor &amp;in, const cytnx_uint64 &amp;idx=0)</argsstring>
        <name>put_block_</name>
        <qualifiedname>cytnx::UniTensor::put_block_</qualifiedname>
        <param>
          <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3080" column="10" bodyfile="include/UniTensor.hpp" bodystart="3080" bodyend="3080"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a89a358725addfbef4edc853c0753e0d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::put_block_</definition>
        <argsstring>(Tensor &amp;in, const std::vector&lt; cytnx_int64 &gt; &amp;qnum, const bool &amp;force)</argsstring>
        <name>put_block_</name>
        <qualifiedname>cytnx::UniTensor::put_block_</qualifiedname>
        <param>
          <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>qnum</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3082" column="10" bodyfile="include/UniTensor.hpp" bodystart="3082" bodyend="3084"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a2e2d7f3137bb1cfb26e6a19acbc9563e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::get</definition>
        <argsstring>(const std::vector&lt; Accessor &gt; &amp;accessors) const</argsstring>
        <name>get</name>
        <qualifiedname>cytnx::UniTensor::get</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> &gt; &amp;</type>
          <declname>accessors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3085" column="15" bodyfile="include/UniTensor.hpp" bodystart="3085" bodyend="3089"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a90ba42a96ac324dfea7436d383fecc79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::set</definition>
        <argsstring>(const std::vector&lt; Accessor &gt; &amp;accessors, const Tensor &amp;rhs)</argsstring>
        <name>set</name>
        <qualifiedname>cytnx::UniTensor::set</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> &gt; &amp;</type>
          <declname>accessors</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3090" column="10" bodyfile="include/UniTensor.hpp" bodystart="3090" bodyend="3092"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a18226194a82791cfa6f661293b25d101" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::reshape</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;new_shape, const cytnx_uint64 &amp;rowrank=0)</argsstring>
        <name>reshape</name>
        <qualifiedname>cytnx::UniTensor::reshape</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>new_shape</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3093" column="15" bodyfile="include/UniTensor.hpp" bodystart="3093" bodyend="3097"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a4fe900047caaf4627340fb486091fc9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::reshape_</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;new_shape, const cytnx_uint64 &amp;rowrank=0)</argsstring>
        <name>reshape_</name>
        <qualifiedname>cytnx::UniTensor::reshape_</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>new_shape</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>rowrank</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3098" column="10" bodyfile="include/UniTensor.hpp" bodystart="3098" bodyend="3100"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a4aeec131076ae541e8be7cdb930e151b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::to_dense</definition>
        <argsstring>()</argsstring>
        <name>to_dense</name>
        <qualifiedname>cytnx::UniTensor::to_dense</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3101" column="15" bodyfile="include/UniTensor.hpp" bodystart="3101" bodyend="3105"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a169c56f48f851fe173067632e30200dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::to_dense_</definition>
        <argsstring>()</argsstring>
        <name>to_dense_</name>
        <qualifiedname>cytnx::UniTensor::to_dense_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3106" column="10" bodyfile="include/UniTensor.hpp" bodystart="3106" bodyend="3106"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aaadfa8d665c76353ea6eef35d5be976d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::combineBonds</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;indicators, const bool &amp;force, const bool &amp;by_label)</argsstring>
        <name>combineBonds</name>
        <qualifiedname>cytnx::UniTensor::combineBonds</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>indicators</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000009"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indicators</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permute_back</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3116" column="10" bodyfile="include/UniTensor.hpp" bodystart="3116" bodyend="3119"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a893a7715779cd9b7369ac2e0011aee99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::combineBonds</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;indicators, const bool &amp;force=false)</argsstring>
        <name>combineBonds</name>
        <qualifiedname>cytnx::UniTensor::combineBonds</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>indicators</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3120" column="10" bodyfile="include/UniTensor.hpp" bodystart="3120" bodyend="3122"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a286ea6434384864cc38f3b4c0736fdc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::combineBonds</definition>
        <argsstring>(const std::vector&lt; cytnx_int64 &gt; &amp;indicators, const bool &amp;force=false)</argsstring>
        <name>combineBonds</name>
        <qualifiedname>cytnx::UniTensor::combineBonds</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>indicators</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3123" column="10" bodyfile="include/UniTensor.hpp" bodystart="3123" bodyend="3125"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1abb9e74ecee1a85af02b7f2a8e835c969" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::contract</definition>
        <argsstring>(const UniTensor &amp;inR, const bool &amp;mv_elem_self=false, const bool &amp;mv_elem_rhs=false) const</argsstring>
        <name>contract</name>
        <qualifiedname>cytnx::UniTensor::contract</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>inR</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>mv_elem_self</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>mv_elem_rhs</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3126" column="15" bodyfile="include/UniTensor.hpp" bodystart="3126" bodyend="3131"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5c615dd71017972ab4edddb7b09a8342" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt;</type>
        <definition>std::vector&lt; Bond &gt; cytnx::UniTensor::getTotalQnums</definition>
        <argsstring>(const bool physical=false) const</argsstring>
        <name>getTotalQnums</name>
        <qualifiedname>cytnx::UniTensor::getTotalQnums</qualifiedname>
        <param>
          <type>const bool</type>
          <declname>physical</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3132" column="17" bodyfile="include/UniTensor.hpp" bodystart="3132" bodyend="3134"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a768ed099a28df375c37d921bff9f281c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; cytnx::UniTensor::get_blocks_qnums</definition>
        <argsstring>() const</argsstring>
        <name>get_blocks_qnums</name>
        <qualifiedname>cytnx::UniTensor::get_blocks_qnums</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3135" column="17" bodyfile="include/UniTensor.hpp" bodystart="3135" bodyend="3137"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a60f413988532b115c5323b6f7dc1be6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::UniTensor::same_data</definition>
        <argsstring>(const UniTensor &amp;rhs) const</argsstring>
        <name>same_data</name>
        <qualifiedname>cytnx::UniTensor::same_data</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3139" column="10" bodyfile="include/UniTensor.hpp" bodystart="3139" bodyend="3144"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa163e81ce65c07d61886eb25a54fdeb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Add_</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>Add_</name>
        <qualifiedname>cytnx::UniTensor::Add_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3146" column="15" bodyfile="include/UniTensor.hpp" bodystart="3146" bodyend="3149"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a844dc64c7eb7a93664084b7e1154722f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Mul_</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>Mul_</name>
        <qualifiedname>cytnx::UniTensor::Mul_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3151" column="15" bodyfile="include/UniTensor.hpp" bodystart="3151" bodyend="3154"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1abaec2f79addf171c581ab58b3fc043cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Sub_</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>Sub_</name>
        <qualifiedname>cytnx::UniTensor::Sub_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3156" column="15" bodyfile="include/UniTensor.hpp" bodystart="3156" bodyend="3159"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a932ec2b2408783aec6a7ac66b58bc1aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Div_</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>Div_</name>
        <qualifiedname>cytnx::UniTensor::Div_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3161" column="15" bodyfile="include/UniTensor.hpp" bodystart="3161" bodyend="3164"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5a5a5366d5da8a7658611e2c981145cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Add_</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>Add_</name>
        <qualifiedname>cytnx::UniTensor::Add_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3166" column="15" bodyfile="include/UniTensor.hpp" bodystart="3166" bodyend="3169"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa68c141ac062702ef294813e7c6f8836" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Mul_</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>Mul_</name>
        <qualifiedname>cytnx::UniTensor::Mul_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3171" column="15" bodyfile="include/UniTensor.hpp" bodystart="3171" bodyend="3174"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a404dcfd69cceaf9339acbe2a2380eb2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Sub_</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>Sub_</name>
        <qualifiedname>cytnx::UniTensor::Sub_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3176" column="15" bodyfile="include/UniTensor.hpp" bodystart="3176" bodyend="3179"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a938c80d6a0739b6ae90e2d6bb047bf64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Div_</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>Div_</name>
        <qualifiedname>cytnx::UniTensor::Div_</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3181" column="15" bodyfile="include/UniTensor.hpp" bodystart="3181" bodyend="3184"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af8db9e12557098f0c424dabfb3a45ac3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Add</definition>
        <argsstring>(const UniTensor &amp;rhs) const</argsstring>
        <name>Add</name>
        <qualifiedname>cytnx::UniTensor::Add</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3186" column="15" bodyfile="src/UniTensor.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a45ca59d3ef14450292fdb6bd188157fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Add</definition>
        <argsstring>(const Scalar &amp;rhs) const</argsstring>
        <name>Add</name>
        <qualifiedname>cytnx::UniTensor::Add</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3187" column="15" bodyfile="src/UniTensor.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1acf6c7e5d9923a6fb2955c0ea1e7a9b3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Mul</definition>
        <argsstring>(const UniTensor &amp;rhs) const</argsstring>
        <name>Mul</name>
        <qualifiedname>cytnx::UniTensor::Mul</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3188" column="15" bodyfile="src/UniTensor.cpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a3d6da382b5cd47f26426830403363b8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Mul</definition>
        <argsstring>(const Scalar &amp;rhs) const</argsstring>
        <name>Mul</name>
        <qualifiedname>cytnx::UniTensor::Mul</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3189" column="15" bodyfile="src/UniTensor.cpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a0c7fb1da6efa33d60f21a823485555af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Div</definition>
        <argsstring>(const UniTensor &amp;rhs) const</argsstring>
        <name>Div</name>
        <qualifiedname>cytnx::UniTensor::Div</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3190" column="15" bodyfile="src/UniTensor.cpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ad3a2346fdbf029f9f60c1ea3427a31bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Div</definition>
        <argsstring>(const Scalar &amp;rhs) const</argsstring>
        <name>Div</name>
        <qualifiedname>cytnx::UniTensor::Div</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3191" column="15" bodyfile="src/UniTensor.cpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aed5727a9b976bb792e421f325fc7d9b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Sub</definition>
        <argsstring>(const UniTensor &amp;rhs) const</argsstring>
        <name>Sub</name>
        <qualifiedname>cytnx::UniTensor::Sub</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3192" column="15" bodyfile="src/UniTensor.cpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a3baa0bc609bc2bc402cddfb26efb4cd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Sub</definition>
        <argsstring>(const Scalar &amp;rhs) const</argsstring>
        <name>Sub</name>
        <qualifiedname>cytnx::UniTensor::Sub</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3193" column="15" bodyfile="src/UniTensor.cpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a3d328126eaf4f8ac2854f96cba81d592" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::UniTensor::Norm</definition>
        <argsstring>() const</argsstring>
        <name>Norm</name>
        <qualifiedname>cytnx::UniTensor::Norm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3195" column="12" bodyfile="include/UniTensor.hpp" bodystart="3195" bodyend="3195"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a165f096bd0b248c9a96da1db287e1bf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator+=</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::UniTensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3197" column="15" bodyfile="include/UniTensor.hpp" bodystart="3197" bodyend="3200"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa750cf27fca09d332c3af8a47c177d50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator-=</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::UniTensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3201" column="15" bodyfile="include/UniTensor.hpp" bodystart="3201" bodyend="3204"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a05c0070bc928da52ea57b555d0ccf6e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator/=</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::UniTensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3205" column="15" bodyfile="include/UniTensor.hpp" bodystart="3205" bodyend="3208"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a027a174c6e9cda2116a7cfbdcec8f9ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator*=</definition>
        <argsstring>(const UniTensor &amp;rhs)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::UniTensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3209" column="15" bodyfile="include/UniTensor.hpp" bodystart="3209" bodyend="3212"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a92924aa4eb84c12bfd3037013819506b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator+=</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>cytnx::UniTensor::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3213" column="15" bodyfile="include/UniTensor.hpp" bodystart="3213" bodyend="3216"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a370694872953cb1f18e6edbc02eecc62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator-=</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>cytnx::UniTensor::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3217" column="15" bodyfile="include/UniTensor.hpp" bodystart="3217" bodyend="3220"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a417fdf4a2037612bbac8e24395c8f44d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator/=</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>operator/=</name>
        <qualifiedname>cytnx::UniTensor::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3221" column="15" bodyfile="include/UniTensor.hpp" bodystart="3221" bodyend="3224"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a7dbc2894cce5dbc7b8b434e99e653016" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::operator*=</definition>
        <argsstring>(const Scalar &amp;rhs)</argsstring>
        <name>operator*=</name>
        <qualifiedname>cytnx::UniTensor::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3225" column="15" bodyfile="include/UniTensor.hpp" bodystart="3225" bodyend="3228"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af74a28956115b66b67159c3d2702ebbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Conj</definition>
        <argsstring>()</argsstring>
        <name>Conj</name>
        <qualifiedname>cytnx::UniTensor::Conj</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3230" column="15" bodyfile="include/UniTensor.hpp" bodystart="3230" bodyend="3234"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af03325a182bdc478efced2d102181b5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Conj_</definition>
        <argsstring>()</argsstring>
        <name>Conj_</name>
        <qualifiedname>cytnx::UniTensor::Conj_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3236" column="15" bodyfile="include/UniTensor.hpp" bodystart="3236" bodyend="3239"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a647f7d7cb96c53243484678ad8625e15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Transpose</definition>
        <argsstring>() const</argsstring>
        <name>Transpose</name>
        <qualifiedname>cytnx::UniTensor::Transpose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3241" column="15" bodyfile="include/UniTensor.hpp" bodystart="3241" bodyend="3245"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1adced323eadd2324bc6cc2684a39efd2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Transpose_</definition>
        <argsstring>()</argsstring>
        <name>Transpose_</name>
        <qualifiedname>cytnx::UniTensor::Transpose_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3246" column="15" bodyfile="include/UniTensor.hpp" bodystart="3246" bodyend="3249"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5f54b53bac411c2696874acd104cd304" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Trace</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b) const</argsstring>
        <name>Trace</name>
        <qualifiedname>cytnx::UniTensor::Trace</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3251" column="15" bodyfile="include/UniTensor.hpp" bodystart="3251" bodyend="3255"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa0316aa645994648a1f21c7d1a9c0120" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Trace</definition>
        <argsstring>(const cytnx_int64 &amp;a=0, const cytnx_int64 &amp;b=1) const</argsstring>
        <name>Trace</name>
        <qualifiedname>cytnx::UniTensor::Trace</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>a</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>b</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3256" column="15" bodyfile="include/UniTensor.hpp" bodystart="3256" bodyend="3260"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5b1311d9ef1d586b8a1bc8da0723dde0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Trace</definition>
        <argsstring>(const cytnx_int64 &amp;a, const cytnx_int64 &amp;b, const bool &amp;by_label) const</argsstring>
        <name>Trace</name>
        <qualifiedname>cytnx::UniTensor::Trace</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000010"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3270" column="15" bodyfile="include/UniTensor.hpp" bodystart="3270" bodyend="3272"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5b2436f07649001672eca25f0d1769f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Trace_</definition>
        <argsstring>(const std::string &amp;a, const std::string &amp;b)</argsstring>
        <name>Trace_</name>
        <qualifiedname>cytnx::UniTensor::Trace_</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3274" column="15" bodyfile="include/UniTensor.hpp" bodystart="3274" bodyend="3285"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a9b4837429728ccf3c3e0d50cae7c1eba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Trace_</definition>
        <argsstring>(const cytnx_int64 &amp;a=0, const cytnx_int64 &amp;b=1)</argsstring>
        <name>Trace_</name>
        <qualifiedname>cytnx::UniTensor::Trace_</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>a</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>b</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3286" column="15" bodyfile="include/UniTensor.hpp" bodystart="3286" bodyend="3297"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a84fc453e18c73323887ce155bf7dd247" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Trace_</definition>
        <argsstring>(const cytnx_int64 &amp;a, const cytnx_int64 &amp;b, const bool &amp;by_label)</argsstring>
        <name>Trace_</name>
        <qualifiedname>cytnx::UniTensor::Trace_</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3307" column="15" bodyfile="include/UniTensor.hpp" bodystart="3307" bodyend="3318"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aafc6a839bed086c5e23bae8baaeee588" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Dagger</definition>
        <argsstring>() const</argsstring>
        <name>Dagger</name>
        <qualifiedname>cytnx::UniTensor::Dagger</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3320" column="15" bodyfile="include/UniTensor.hpp" bodystart="3320" bodyend="3324"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a67b2b3961ab052969018a4545565a6d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Dagger_</definition>
        <argsstring>()</argsstring>
        <name>Dagger_</name>
        <qualifiedname>cytnx::UniTensor::Dagger_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3326" column="15" bodyfile="include/UniTensor.hpp" bodystart="3326" bodyend="3329"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a26a40f3cfae8d14b33fcf883ee300abf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::tag</definition>
        <argsstring>()</argsstring>
        <name>tag</name>
        <qualifiedname>cytnx::UniTensor::tag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3331" column="15" bodyfile="include/UniTensor.hpp" bodystart="3331" bodyend="3334"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aa6605e1634684f737bf1cc80d9b0d129" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Pow</definition>
        <argsstring>(const double &amp;p) const</argsstring>
        <name>Pow</name>
        <qualifiedname>cytnx::UniTensor::Pow</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3336" column="15" bodyfile="src/UniTensor.cpp" bodystart="11" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a8edcf22c095570948abcc18fa24c2b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::Pow_</definition>
        <argsstring>(const double &amp;p)</argsstring>
        <name>Pow_</name>
        <qualifiedname>cytnx::UniTensor::Pow_</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3337" column="15" bodyfile="src/UniTensor.cpp" bodystart="12" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aba05da7f762eea1f139e5379a338e9d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::UniTensor::elem_exists</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator) const</argsstring>
        <name>elem_exists</name>
        <qualifiedname>cytnx::UniTensor::elem_exists</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3339" column="10" bodyfile="include/UniTensor.hpp" bodystart="3339" bodyend="3341"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a0c5a3ca425fdb2467007c3bf9816dde7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T cytnx::UniTensor::get_elem</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator) const</argsstring>
        <name>get_elem</name>
        <qualifiedname>cytnx::UniTensor::get_elem</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3345" column="7" bodyfile="include/UniTensor.hpp" bodystart="3345" bodyend="3347"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a448e377ded471ec5f0c462e2a5c77ad8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cytnx::UniTensor::set_elem</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator, const T2 &amp;rc)</argsstring>
        <name>set_elem</name>
        <qualifiedname>cytnx::UniTensor::set_elem</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3351" column="10" bodyfile="include/UniTensor.hpp" bodystart="3351" bodyend="3354"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a366ace08b1f9ebf57dd899666d275072" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::Save</definition>
        <argsstring>(const std::string &amp;fname) const</argsstring>
        <name>Save</name>
        <qualifiedname>cytnx::UniTensor::Save</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3356" column="10" bodyfile="src/UniTensor.cpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1af28c0cebe2d998c6a48a69b56d135dce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::UniTensor::Save</definition>
        <argsstring>(const char *fname) const</argsstring>
        <name>Save</name>
        <qualifiedname>cytnx::UniTensor::Save</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3357" column="10" bodyfile="src/UniTensor.cpp" bodystart="147" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a8cb549e31b88cad78ee53b92107cfb3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::truncate_</definition>
        <argsstring>(const cytnx_int64 &amp;bond_idx, const cytnx_uint64 &amp;dim, const bool &amp;by_label)</argsstring>
        <name>truncate_</name>
        <qualifiedname>cytnx::UniTensor::truncate_</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>bond_idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000012"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bond_idx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3370" column="15" bodyfile="include/UniTensor.hpp" bodystart="3370" bodyend="3374"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ac584e3c4992730bc7f1f5f8c8d9c8dd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::truncate_</definition>
        <argsstring>(const std::string &amp;bond_idx, const cytnx_uint64 &amp;dim)</argsstring>
        <name>truncate_</name>
        <qualifiedname>cytnx::UniTensor::truncate_</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>bond_idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3375" column="15" bodyfile="include/UniTensor.hpp" bodystart="3375" bodyend="3378"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a5b70438a966f5c0105d61c7a900722b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
        <definition>UniTensor &amp; cytnx::UniTensor::truncate_</definition>
        <argsstring>(const cytnx_int64 &amp;bond_idx, const cytnx_uint64 &amp;dim)</argsstring>
        <name>truncate_</name>
        <qualifiedname>cytnx::UniTensor::truncate_</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>bond_idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3379" column="15" bodyfile="include/UniTensor.hpp" bodystart="3379" bodyend="3382"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a22a06f64274ea1ac34d83bd6e2ff264e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::truncate</definition>
        <argsstring>(const cytnx_int64 &amp;bond_idx, const cytnx_uint64 &amp;dim, const bool &amp;by_label) const</argsstring>
        <name>truncate</name>
        <qualifiedname>cytnx::UniTensor::truncate</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>bond_idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>by_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000013"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bond_idx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>by_label</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3393" column="15" bodyfile="include/UniTensor.hpp" bodystart="3393" bodyend="3398"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a4dfc4bf64ec7b34842fe5ecd9efa38ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::truncate</definition>
        <argsstring>(const std::string &amp;bond_idx, const cytnx_uint64 &amp;dim) const</argsstring>
        <name>truncate</name>
        <qualifiedname>cytnx::UniTensor::truncate</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>bond_idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3399" column="15" bodyfile="include/UniTensor.hpp" bodystart="3399" bodyend="3403"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1adb596c97cb65767730bd3823af2fa5d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::truncate</definition>
        <argsstring>(const cytnx_int64 &amp;bond_idx, const cytnx_uint64 &amp;dim) const</argsstring>
        <name>truncate</name>
        <qualifiedname>cytnx::UniTensor::truncate</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>bond_idx</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3404" column="15" bodyfile="include/UniTensor.hpp" bodystart="3404" bodyend="3408"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ad323800d8b97faa8aad9b980eb6b9c7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; cytnx_uint64 &gt; &amp; cytnx::UniTensor::get_qindices</definition>
        <argsstring>(const cytnx_uint64 &amp;bidx) const</argsstring>
        <name>get_qindices</name>
        <qualifiedname>cytnx::UniTensor::get_qindices</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>bidx</declname>
        </param>
        <briefdescription>
<para>get the q-indices on each leg for the [bidx]-th block </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bidx</parametername>
</parameternamelist>
<parameterdescription>
<para>the bidx-th block in current block list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[vector] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3417" column="23" bodyfile="include/UniTensor.hpp" bodystart="3417" bodyend="3419"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a118c7e66008dd037063e3e71604ebd74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
        <definition>std::vector&lt; cytnx_uint64 &gt; &amp; cytnx::UniTensor::get_qindices</definition>
        <argsstring>(const cytnx_uint64 &amp;bidx)</argsstring>
        <name>get_qindices</name>
        <qualifiedname>cytnx::UniTensor::get_qindices</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>bidx</declname>
        </param>
        <briefdescription>
<para>get the q-indices on each leg for the [bidx]-th block </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bidx</parametername>
</parameternamelist>
<parameterdescription>
<para>the bidx-th block in current block list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[vector] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3427" column="17" bodyfile="include/UniTensor.hpp" bodystart="3427" bodyend="3429"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ae7525954cafa6cf69b4fc69dcabae4c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacecytnx_1aabad17adc76c275cbe89b1e5c5900895" kindref="member">vec2d</ref>&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
        <definition>const vec2d&lt; cytnx_uint64 &gt; &amp; cytnx::UniTensor::get_itoi</definition>
        <argsstring>() const</argsstring>
        <name>get_itoi</name>
        <qualifiedname>cytnx::UniTensor::get_itoi</qualifiedname>
        <briefdescription>
<para>get the q-indices on each leg for all the blocks </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>[2d vector] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3439" column="18" bodyfile="include/UniTensor.hpp" bodystart="3439" bodyend="3441"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1ae300c5f40fe1ec3ec841c91bdf9cb944" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacecytnx_1aabad17adc76c275cbe89b1e5c5900895" kindref="member">vec2d</ref>&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
        <definition>vec2d&lt; cytnx_uint64 &gt; &amp; cytnx::UniTensor::get_itoi</definition>
        <argsstring>()</argsstring>
        <name>get_itoi</name>
        <qualifiedname>cytnx::UniTensor::get_itoi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3442" column="12" bodyfile="include/UniTensor.hpp" bodystart="3442" bodyend="3444"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1a264c745da83b46edb936cd2f2b301707" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Load</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>Load</name>
        <qualifiedname>cytnx::UniTensor::Load</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3358" column="22" bodyfile="src/UniTensor.cpp" bodystart="158" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classcytnx_1_1UniTensor_1aed9b552449afb530d3a13679d98c38d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::UniTensor::Load</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>Load</name>
        <qualifiedname>cytnx::UniTensor::Load</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3359" column="22" bodyfile="src/UniTensor.cpp" bodystart="169" bodyend="179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An Enhanced tensor specifically designed for physical <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> network simulation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/UniTensor.hpp" line="2404" column="3" bodyfile="include/UniTensor.hpp" bodystart="2404" bodyend="3453"/>
    <listofallmembers>
      <member refid="classcytnx_1_1UniTensor_1af8db9e12557098f0c424dabfb3a45ac3" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Add</name></member>
      <member refid="classcytnx_1_1UniTensor_1a45ca59d3ef14450292fdb6bd188157fe" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Add</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa163e81ce65c07d61886eb25a54fdeb2" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Add_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5a5a5366d5da8a7658611e2c981145cd" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Add_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a61e40e264c721245ffeaaa548b86c435" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>astype</name></member>
      <member refid="classcytnx_1_1UniTensor_1a6910e0251891d7289b5014b7987369ff" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>at</name></member>
      <member refid="classcytnx_1_1UniTensor_1a7d514b8969ce13d75fa49447ac7f1b6c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>at</name></member>
      <member refid="classcytnx_1_1UniTensor_1afbc92cb5b89de62af024d2a7892511ca" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>at</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5e01dc0a9ed6cbada0635744a935911c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>at</name></member>
      <member refid="classcytnx_1_1UniTensor_1adb09a9052e76013471b08f537d0015e9" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>bonds</name></member>
      <member refid="classcytnx_1_1UniTensor_1a6875687e10e8b1582644fb6985f36f98" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>bonds</name></member>
      <member refid="classcytnx_1_1UniTensor_1ae1125e6627eb2f5268d5c21944d31434" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>clone</name></member>
      <member refid="classcytnx_1_1UniTensor_1aaadfa8d665c76353ea6eef35d5be976d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>combineBonds</name></member>
      <member refid="classcytnx_1_1UniTensor_1a893a7715779cd9b7369ac2e0011aee99" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>combineBonds</name></member>
      <member refid="classcytnx_1_1UniTensor_1a286ea6434384864cc38f3b4c0736fdc9" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>combineBonds</name></member>
      <member refid="classcytnx_1_1UniTensor_1af74a28956115b66b67159c3d2702ebbe" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Conj</name></member>
      <member refid="classcytnx_1_1UniTensor_1af03325a182bdc478efced2d102181b5d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Conj_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a78d8b11e2327e3323c23c5f8e098c165" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>contiguous</name></member>
      <member refid="classcytnx_1_1UniTensor_1a80a6e52a909c02c577ebeeb815f93ebf" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>contiguous_</name></member>
      <member refid="classcytnx_1_1UniTensor_1abb9e74ecee1a85af02b7f2a8e835c969" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>contract</name></member>
      <member refid="classcytnx_1_1UniTensor_1aafc6a839bed086c5e23bae8baaeee588" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Dagger</name></member>
      <member refid="classcytnx_1_1UniTensor_1a67b2b3961ab052969018a4545565a6d3" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Dagger_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a8e4a44ff5b17788458dc8cf2642f811f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>device</name></member>
      <member refid="classcytnx_1_1UniTensor_1ae7862c67c8ce93035aa7c6ffb3fc0f17" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>device_str</name></member>
      <member refid="classcytnx_1_1UniTensor_1a0c7fb1da6efa33d60f21a823485555af" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Div</name></member>
      <member refid="classcytnx_1_1UniTensor_1ad3a2346fdbf029f9f60c1ea3427a31bf" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Div</name></member>
      <member refid="classcytnx_1_1UniTensor_1a932ec2b2408783aec6a7ac66b58bc1aa" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Div_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a938c80d6a0739b6ae90e2d6bb047bf64" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Div_</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa3a370844d981cb86c3d784ecbb573c1" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>dtype</name></member>
      <member refid="classcytnx_1_1UniTensor_1a91173048a7985caa45786a7c08f68c40" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>dtype_str</name></member>
      <member refid="classcytnx_1_1UniTensor_1aba05da7f762eea1f139e5379a338e9d6" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>elem_exists</name></member>
      <member refid="classcytnx_1_1UniTensor_1a2e2d7f3137bb1cfb26e6a19acbc9563e" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get</name></member>
      <member refid="classcytnx_1_1UniTensor_1a7d4df6dffeca0fd8eafdb9d766813f84" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block</name></member>
      <member refid="classcytnx_1_1UniTensor_1ad778e7a98f758902ec5cba40ea5dcced" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block</name></member>
      <member refid="classcytnx_1_1UniTensor_1afb6f38f370802c39cc4bae6eebf7ee5e" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block</name></member>
      <member refid="classcytnx_1_1UniTensor_1abee44516bc18f72b726500bc2bb4872f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1affb7a9d6dcbf5cdda50187ea0e01ecd3" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a14cdae1423c2c10c2f22605016c555c3" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa2684dac87dc55e074b5b07fac7b2f81" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a518f2ac9c85588e6eb02abe1bec47ae1" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a0d37afb42e347d3acc5e0d0b0859848e" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a18f7a36047f964adf220d92dafbef3c8" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_blocks</name></member>
      <member refid="classcytnx_1_1UniTensor_1ab201df6580c4b3c912b2789f693a9172" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_blocks_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a0586ff59c33eda6cc9fbb3ea25cb3aca" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_blocks_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a768ed099a28df375c37d921bff9f281c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_blocks_qnums</name></member>
      <member refid="classcytnx_1_1UniTensor_1a0c5a3ca425fdb2467007c3bf9816dde7" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_elem</name></member>
      <member refid="classcytnx_1_1UniTensor_1a1c7a9eebcb74305bbf42e57d667086d8" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_index</name></member>
      <member refid="classcytnx_1_1UniTensor_1ae7525954cafa6cf69b4fc69dcabae4c3" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_itoi</name></member>
      <member refid="classcytnx_1_1UniTensor_1ae300c5f40fe1ec3ec841c91bdf9cb944" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_itoi</name></member>
      <member refid="classcytnx_1_1UniTensor_1ad323800d8b97faa8aad9b980eb6b9c7f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_qindices</name></member>
      <member refid="classcytnx_1_1UniTensor_1a118c7e66008dd037063e3e71604ebd74" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>get_qindices</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5c615dd71017972ab4edddb7b09a8342" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>getTotalQnums</name></member>
      <member refid="classcytnx_1_1UniTensor_1aaccbad43729ab4e2bc8ac56925a71d6c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>group_basis</name></member>
      <member refid="classcytnx_1_1UniTensor_1a97b9030297fd8d017989d5c68e41e420" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>group_basis_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a42eb68b05bbcdc54c0cdefcd96f7bca7" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Init</name></member>
      <member refid="classcytnx_1_1UniTensor_1abedbb5bbcb64b6b6357d973ecd7bca4c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Init</name></member>
      <member refid="classcytnx_1_1UniTensor_1af88d05dc8c534accadc7d894dc691d1b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Init</name></member>
      <member refid="classcytnx_1_1UniTensor_1aac44ae40cb93f11f673ac0c1930ae319" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>is_blockform</name></member>
      <member refid="classcytnx_1_1UniTensor_1a41d3d78b0b9c4118b15925169720cfb6" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>is_braket_form</name></member>
      <member refid="classcytnx_1_1UniTensor_1a0b2eb7bd2d16f74c43f991c2f3a64fac" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>is_contiguous</name></member>
      <member refid="classcytnx_1_1UniTensor_1a8de198d36f24c6e9d49b357632ec0c98" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>is_diag</name></member>
      <member refid="classcytnx_1_1UniTensor_1a1c3cbcbe162042897fe77c9ce7632af2" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>is_tag</name></member>
      <member refid="classcytnx_1_1UniTensor_1a06d8f228e0440461df89e9604b66a141" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>item</name></member>
      <member refid="classcytnx_1_1UniTensor_1ae46713d86ffeae73218f696eb5de3507" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>item</name></member>
      <member refid="classcytnx_1_1UniTensor_1ad46c621c998425501578d4e39d9eb3fc" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>labels</name></member>
      <member refid="classcytnx_1_1UniTensor_1a264c745da83b46edb936cd2f2b301707" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Load</name></member>
      <member refid="classcytnx_1_1UniTensor_1aed9b552449afb530d3a13679d98c38d1" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Load</name></member>
      <member refid="classcytnx_1_1UniTensor_1acf6c7e5d9923a6fb2955c0ea1e7a9b3d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Mul</name></member>
      <member refid="classcytnx_1_1UniTensor_1a3d6da382b5cd47f26426830403363b8d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Mul</name></member>
      <member refid="classcytnx_1_1UniTensor_1a844dc64c7eb7a93664084b7e1154722f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Mul_</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa68c141ac062702ef294813e7c6f8836" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Mul_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a55941f8078598076309486cc1de3d73f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>name</name></member>
      <member refid="classcytnx_1_1UniTensor_1af1a73d20890029bde10151a387d5f647" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Nblocks</name></member>
      <member refid="classcytnx_1_1UniTensor_1a3d328126eaf4f8ac2854f96cba81d592" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Norm</name></member>
      <member refid="classcytnx_1_1UniTensor_1a027a174c6e9cda2116a7cfbdcec8f9ba" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1UniTensor_1a7dbc2894cce5dbc7b8b434e99e653016" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator*=</name></member>
      <member refid="classcytnx_1_1UniTensor_1a165f096bd0b248c9a96da1db287e1bf7" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1UniTensor_1a92924aa4eb84c12bfd3037013819506b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator+=</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa750cf27fca09d332c3af8a47c177d50" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1UniTensor_1a370694872953cb1f18e6edbc02eecc62" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator-=</name></member>
      <member refid="classcytnx_1_1UniTensor_1a05c0070bc928da52ea57b555d0ccf6e5" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1UniTensor_1a417fdf4a2037612bbac8e24395c8f44d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>operator/=</name></member>
      <member refid="classcytnx_1_1UniTensor_1a21b20022105038b58f97a3770fdef97b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>permute</name></member>
      <member refid="classcytnx_1_1UniTensor_1ad05b261003c575e244588e772a0ed6db" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>permute</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa9757f25e5ca3e5580da445c56c3ce50" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>permute</name></member>
      <member refid="classcytnx_1_1UniTensor_1af9d72a33b623bf197ede54cb8b9fc866" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>permute_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5490a2af97ca08b1efffa10981809384" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>permute_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a80cf6e93f3dc59955dd00d167cd035b5" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>permute_</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa6605e1634684f737bf1cc80d9b0d129" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Pow</name></member>
      <member refid="classcytnx_1_1UniTensor_1a8edcf22c095570948abcc18fa24c2b6f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Pow_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a05ae9cbc839846845f8cc5f10768c03b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>print_block</name></member>
      <member refid="classcytnx_1_1UniTensor_1ae3635708a51d75cde30af3a6bb87fe9a" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>print_blocks</name></member>
      <member refid="classcytnx_1_1UniTensor_1a685061555097873eb172381059fda92b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>print_diagram</name></member>
      <member refid="classcytnx_1_1UniTensor_1abcd3008bf05771f0623ce1ef80b1085a" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>put_block</name></member>
      <member refid="classcytnx_1_1UniTensor_1a226e3bab6bd4fd502c96a89380dc06a2" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>put_block</name></member>
      <member refid="classcytnx_1_1UniTensor_1a862cac873722d2f6f6e0bd700a90dbf4" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>put_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a89a358725addfbef4edc853c0753e0d9" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>put_block_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a95239beb2137a790e5765e32060ff09f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>rank</name></member>
      <member refid="classcytnx_1_1UniTensor_1a497ff915bf717edacbc5a8813393eb3d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>relabel</name></member>
      <member refid="classcytnx_1_1UniTensor_1ace3f158d0212942e6e9b0d5d07ebbf92" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>relabel</name></member>
      <member refid="classcytnx_1_1UniTensor_1a89b99b81994e6be6ee5c11ed18256f59" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>relabel</name></member>
      <member refid="classcytnx_1_1UniTensor_1a04977b5c16428f35abeefbc7b3e235e1" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>relabels</name></member>
      <member refid="classcytnx_1_1UniTensor_1aea30e0417a4b6552a016d77ff10cc032" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>relabels</name></member>
      <member refid="classcytnx_1_1UniTensor_1a4c30689806c65ea691ab89e3d4383f76" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>relabels</name></member>
      <member refid="classcytnx_1_1UniTensor_1a18226194a82791cfa6f661293b25d101" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>reshape</name></member>
      <member refid="classcytnx_1_1UniTensor_1a4fe900047caaf4627340fb486091fc9c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>reshape_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a373efd1b4ee3f0588f30f4795f2c5c16" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>rowrank</name></member>
      <member refid="classcytnx_1_1UniTensor_1a60f413988532b115c5323b6f7dc1be6b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>same_data</name></member>
      <member refid="classcytnx_1_1UniTensor_1a366ace08b1f9ebf57dd899666d275072" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Save</name></member>
      <member refid="classcytnx_1_1UniTensor_1af28c0cebe2d998c6a48a69b56d135dce" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Save</name></member>
      <member refid="classcytnx_1_1UniTensor_1a90ba42a96ac324dfea7436d383fecc79" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set</name></member>
      <member refid="classcytnx_1_1UniTensor_1a448e377ded471ec5f0c462e2a5c77ad8" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_elem</name></member>
      <member refid="classcytnx_1_1UniTensor_1a87b35b1dab8103b195f83fef23fa16ea" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1a0fa37d97d1501ab1c13486d9faa6286d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1a6e81820a5c1de5e398ccff44ae3cb3a5" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1a163ad7f509495337e6c4ee327bc90294" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1a32f8c1ca6d2e782c2fd1a443df4884fa" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1a669817ede29d57f6a0b05b69e19ab51f" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa37a5f9513c62bbb58d86f9eb332ad07" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1aab2831be9e39aaa46b3dd3a3191f83da" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_label</name></member>
      <member refid="classcytnx_1_1UniTensor_1a8223345c1161d4ffd52ea8276f54a32a" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_labels</name></member>
      <member refid="classcytnx_1_1UniTensor_1a54712d4aedcfe01324bd7d4aa042cf8c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_labels</name></member>
      <member refid="classcytnx_1_1UniTensor_1a3edc556b2b60d672d1e1b40d2ccd69e6" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_labels</name></member>
      <member refid="classcytnx_1_1UniTensor_1a9ea55737e39a8d81f4e90a81fd47692d" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_name</name></member>
      <member refid="classcytnx_1_1UniTensor_1af8fae0a4e592074408efb5f50fb96830" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>set_rowrank</name></member>
      <member refid="classcytnx_1_1UniTensor_1a4a87af4bf568263dcd6db1376f35d97c" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>shape</name></member>
      <member refid="classcytnx_1_1UniTensor_1aed5727a9b976bb792e421f325fc7d9b7" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Sub</name></member>
      <member refid="classcytnx_1_1UniTensor_1a3baa0bc609bc2bc402cddfb26efb4cd8" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Sub</name></member>
      <member refid="classcytnx_1_1UniTensor_1abaec2f79addf171c581ab58b3fc043cc" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Sub_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a404dcfd69cceaf9339acbe2a2380eb2a" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Sub_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a834fdcd0eaf341c351be23f8445a03bb" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>syms</name></member>
      <member refid="classcytnx_1_1UniTensor_1a26a40f3cfae8d14b33fcf883ee300abf" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>tag</name></member>
      <member refid="classcytnx_1_1UniTensor_1a025f4a2d775a9892b7f86aeff364fa49" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>to</name></member>
      <member refid="classcytnx_1_1UniTensor_1a9aa08f2c848cc7d31bceac7656b4a976" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>to_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a4aeec131076ae541e8be7cdb930e151b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>to_dense</name></member>
      <member refid="classcytnx_1_1UniTensor_1a169c56f48f851fe173067632e30200dc" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>to_dense_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5f54b53bac411c2696874acd104cd304" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Trace</name></member>
      <member refid="classcytnx_1_1UniTensor_1aa0316aa645994648a1f21c7d1a9c0120" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Trace</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5b1311d9ef1d586b8a1bc8da0723dde0" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Trace</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5b2436f07649001672eca25f0d1769f8" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Trace_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a9b4837429728ccf3c3e0d50cae7c1eba" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Trace_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a84fc453e18c73323887ce155bf7dd247" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Trace_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a647f7d7cb96c53243484678ad8625e15" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Transpose</name></member>
      <member refid="classcytnx_1_1UniTensor_1adced323eadd2324bc6cc2684a39efd2e" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>Transpose_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a22a06f64274ea1ac34d83bd6e2ff264e" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>truncate</name></member>
      <member refid="classcytnx_1_1UniTensor_1a4dfc4bf64ec7b34842fe5ecd9efa38ee" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>truncate</name></member>
      <member refid="classcytnx_1_1UniTensor_1adb596c97cb65767730bd3823af2fa5d0" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>truncate</name></member>
      <member refid="classcytnx_1_1UniTensor_1a8cb549e31b88cad78ee53b92107cfb3a" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>truncate_</name></member>
      <member refid="classcytnx_1_1UniTensor_1ac584e3c4992730bc7f1f5f8c8d9c8dd8" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>truncate_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a5b70438a966f5c0105d61c7a900722b1" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>truncate_</name></member>
      <member refid="classcytnx_1_1UniTensor_1a3908e5f31c276031e4a9bdf3539b3fbd" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>UniTensor</name></member>
      <member refid="classcytnx_1_1UniTensor_1ade54cebf78868bc7dcc17bfcbad064f6" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>UniTensor</name></member>
      <member refid="classcytnx_1_1UniTensor_1acf1e438ccbcdc15802f097a5082e015e" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>UniTensor</name></member>
      <member refid="classcytnx_1_1UniTensor_1afe930fe1d99b1149ccb65e1003c6030b" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>uten_type</name></member>
      <member refid="classcytnx_1_1UniTensor_1a1c7cfbb826a15cd3272985e6db0d9c78" prot="public" virt="non-virtual"><scope>cytnx::UniTensor</scope><name>uten_type_str</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
