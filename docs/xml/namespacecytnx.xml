<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="namespacecytnx" kind="namespace" language="C++">
    <compoundname>cytnx</compoundname>
    <innerclass refid="classcytnx_1_1Accessor" prot="public">cytnx::Accessor</innerclass>
    <innerclass refid="classcytnx_1_1Bond" prot="public">cytnx::Bond</innerclass>
    <innerclass refid="classcytnx_1_1Gncon" prot="public">cytnx::Gncon</innerclass>
    <innerclass refid="classcytnx_1_1LinOp" prot="public">cytnx::LinOp</innerclass>
    <innerclass refid="classcytnx_1_1Network" prot="public">cytnx::Network</innerclass>
    <innerclass refid="classcytnx_1_1Qs" prot="public">cytnx::Qs</innerclass>
    <innerclass refid="classcytnx_1_1Scalar" prot="public">cytnx::Scalar</innerclass>
    <innerclass refid="classcytnx_1_1Storage" prot="public">cytnx::Storage</innerclass>
    <innerclass refid="classcytnx_1_1Symmetry" prot="public">cytnx::Symmetry</innerclass>
    <innerclass refid="classcytnx_1_1Tensor" prot="public">cytnx::Tensor</innerclass>
    <innerclass refid="classcytnx_1_1UniTensor" prot="public">cytnx::UniTensor</innerclass>
    <innernamespace refid="namespacecytnx_1_1algo">cytnx::algo</innernamespace>
    <innernamespace refid="namespacecytnx_1_1linalg">cytnx::linalg</innernamespace>
    <innernamespace refid="namespacecytnx_1_1operators">cytnx::operators</innernamespace>
    <innernamespace refid="namespacecytnx_1_1physics">cytnx::physics</innernamespace>
    <innernamespace refid="namespacecytnx_1_1qgates">cytnx::qgates</innernamespace>
    <innernamespace refid="namespacecytnx_1_1random">cytnx::random</innernamespace>
    <innernamespace refid="namespacecytnx_1_1stat">cytnx::stat</innernamespace>
    <innernamespace refid="namespacecytnx_1_1tn__algo">cytnx::tn_algo</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480ef" prot="public" static="no" strong="no">
        <type>int</type>
        <name>bondType</name>
        <qualifiedname>cytnx::bondType</qualifiedname>
        <enumvalue id="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efafb540337e715cbcf2794d531577689fc" prot="public">
          <name>BD_KET</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efac2962ae3afa12880a276114fa889d170" prot="public">
          <name>BD_BRA</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efabd7a05c57c46feedff6d9a4bfc136329" prot="public">
          <name>BD_REG</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efaab9b5eb9d108ed1b49ce4d29bfa5b93a" prot="public">
          <name>BD_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efa236cc2f8a468e7190902edda6ca8ee29" prot="public">
          <name>BD_IN</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecytnx_1ac1ea381505268a3cf3bc68d7b8a480efa6bb366661f9937d42c2284dfac2910da" prot="public">
          <name>BD_OUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>currently using gBD_* to indicate this is bond with new qnum structure! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Bond.hpp" line="17" column="3" bodyfile="include/Bond.hpp" bodystart="17" bodyend="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecytnx_1abdef434dfef3c3f9ab5e6a25e678896b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; std::vector&lt; T &gt; &gt; &gt;</type>
        <definition>using cytnx::vec3d = typedef std::vector&lt;std::vector&lt;std::vector&lt;T&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>vec3d</name>
        <qualifiedname>cytnx::vec3d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="21" column="3" bodyfile="include/Type.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1aabad17adc76c275cbe89b1e5c5900895" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>using cytnx::vec2d = typedef std::vector&lt;std::vector&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>vec2d</name>
        <qualifiedname>cytnx::vec2d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="24" column="3" bodyfile="include/Type.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a17b847d265f6551b952fd9847198a464" prot="public" static="no">
        <type>double</type>
        <definition>typedef double cytnx::cytnx_double</definition>
        <argsstring></argsstring>
        <name>cytnx_double</name>
        <qualifiedname>cytnx::cytnx_double</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="27" column="18" bodyfile="include/Type.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a456fea0ea7baaa151496b24424829253" prot="public" static="no">
        <type>float</type>
        <definition>typedef float cytnx::cytnx_float</definition>
        <argsstring></argsstring>
        <name>cytnx_float</name>
        <qualifiedname>cytnx::cytnx_float</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="28" column="17" bodyfile="include/Type.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t cytnx::cytnx_uint64</definition>
        <argsstring></argsstring>
        <name>cytnx_uint64</name>
        <qualifiedname>cytnx::cytnx_uint64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="29" column="20" bodyfile="include/Type.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a335d8fee19dee02206dbecec6e5ec610" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t cytnx::cytnx_uint32</definition>
        <argsstring></argsstring>
        <name>cytnx_uint32</name>
        <qualifiedname>cytnx::cytnx_uint32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="30" column="20" bodyfile="include/Type.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a7f757c129de8dd3de3a4f2d802aa9bbb" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t cytnx::cytnx_uint16</definition>
        <argsstring></argsstring>
        <name>cytnx_uint16</name>
        <qualifiedname>cytnx::cytnx_uint16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="31" column="20" bodyfile="include/Type.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t cytnx::cytnx_int64</definition>
        <argsstring></argsstring>
        <name>cytnx_int64</name>
        <qualifiedname>cytnx::cytnx_int64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="32" column="19" bodyfile="include/Type.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a6504b8a7b459f70c0a24d4ea2893a976" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t cytnx::cytnx_int32</definition>
        <argsstring></argsstring>
        <name>cytnx_int32</name>
        <qualifiedname>cytnx::cytnx_int32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="33" column="19" bodyfile="include/Type.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a5f27130c68405db77c52f17c3a084f62" prot="public" static="no">
        <type>int16_t</type>
        <definition>typedef int16_t cytnx::cytnx_int16</definition>
        <argsstring></argsstring>
        <name>cytnx_int16</name>
        <qualifiedname>cytnx::cytnx_int16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="34" column="19" bodyfile="include/Type.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1aa94c3f663288772a54b4926a62303f7c" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t cytnx::cytnx_size_t</definition>
        <argsstring></argsstring>
        <name>cytnx_size_t</name>
        <qualifiedname>cytnx::cytnx_size_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="35" column="18" bodyfile="include/Type.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a63d2515ecaa35660c85571236e61fec7" prot="public" static="no">
        <type>std::complex&lt; float &gt;</type>
        <definition>typedef std::complex&lt;float&gt; cytnx::cytnx_complex64</definition>
        <argsstring></argsstring>
        <name>cytnx_complex64</name>
        <qualifiedname>cytnx::cytnx_complex64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="36" column="24" bodyfile="include/Type.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a401ce1c8c4599b9a1a860e9e225e6b9e" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>typedef std::complex&lt;double&gt; cytnx::cytnx_complex128</definition>
        <argsstring></argsstring>
        <name>cytnx_complex128</name>
        <qualifiedname>cytnx::cytnx_complex128</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="37" column="24" bodyfile="include/Type.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1a33aeeaf2c3d5b78b26cc6440916acbf2" prot="public" static="no">
        <type>bool</type>
        <definition>typedef bool cytnx::cytnx_bool</definition>
        <argsstring></argsstring>
        <name>cytnx_bool</name>
        <qualifiedname>cytnx::cytnx_bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="38" column="16" bodyfile="include/Type.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecytnx_1ae5da4c8d3a63643c3bc40aa5dc5b4c35" prot="public" static="no">
        <type><ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref></type>
        <definition>typedef Accessor cytnx::ac</definition>
        <argsstring></argsstring>
        <name>ac</name>
        <qualifiedname>cytnx::ac</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/BlockUniTensor.cpp" line="18" column="20" bodyfile="src/BlockUniTensor.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" prot="public" static="no" mutable="no">
        <type>Device_class</type>
        <definition>Device_class cytnx::Device</definition>
        <argsstring></argsstring>
        <name>Device</name>
        <qualifiedname>cytnx::Device</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Device.cpp" line="140" column="16" bodyfile="src/Device.cpp" bodystart="140" bodyend="-1" declfile="include/Device.hpp" declline="27" declcolumn="23"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" prot="public" static="no" mutable="no">
        <type>Type_class</type>
        <definition>Type_class cytnx::Type</definition>
        <argsstring></argsstring>
        <name>Type</name>
        <qualifiedname>cytnx::Type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Type.cpp" line="23" column="14" bodyfile="src/Type.cpp" bodystart="23" bodyend="-1" declfile="include/Type.hpp" declline="166" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1afbd550656f35ac86a0703b2f122c09cc" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cytnx::__blasINTsize__</definition>
        <argsstring></argsstring>
        <name>__blasINTsize__</name>
        <qualifiedname>cytnx::__blasINTsize__</qualifiedname>
        <initializer>= sizeof(lapack_int)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Type.cpp" line="11" column="7" bodyfile="src/Type.cpp" bodystart="11" bodyend="-1" declfile="include/Type.hpp" declline="168" declcolumn="14"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1a27aa2c9f9401b20248afcfb1ab761b06" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool cytnx::User_debug</definition>
        <argsstring></argsstring>
        <name>User_debug</name>
        <qualifiedname>cytnx::User_debug</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Type.cpp" line="17" column="8" bodyfile="src/Type.cpp" bodystart="17" bodyend="-1" declfile="include/Type.hpp" declline="170" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1a674af1a91c4f4e75d65fecbed4d72ee0" prot="public" static="no" mutable="no">
        <type>GnconType_class</type>
        <definition>NetworkType_class cytnx::NtType</definition>
        <argsstring></argsstring>
        <name>NtType</name>
        <qualifiedname>cytnx::NtType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Gncon.cpp" line="27" column="19" bodyfile="src/Gncon.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1ad745b9d7cf2c9a330722c0f412dd49b1" prot="public" static="no" mutable="no">
        <type>Scalar_init_interface</type>
        <definition>Scalar_init_interface cytnx::__ScII</definition>
        <argsstring></argsstring>
        <name>__ScII</name>
        <qualifiedname>cytnx::__ScII</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="204" column="25" bodyfile="src/Scalar.cpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1aa8cab793f3dcaa3c69a65f4b9be81016" prot="public" static="no" mutable="no">
        <type>Storage_init_interface</type>
        <definition>Storage_init_interface cytnx::__SII</definition>
        <argsstring></argsstring>
        <name>__SII</name>
        <qualifiedname>cytnx::__SII</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage.cpp" line="12" column="26" bodyfile="src/Storage.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1ae8b2b1a6be5f66828af0c051065bb642" prot="public" static="no" mutable="no">
        <type>SymmetryType_class</type>
        <definition>SymmetryType_class cytnx::SymType</definition>
        <argsstring></argsstring>
        <name>SymType</name>
        <qualifiedname>cytnx::SymType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Symmetry.cpp" line="250" column="22" bodyfile="src/Symmetry.cpp" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecytnx_1a224ad816267928be693a2396f5483e06" prot="public" static="no" mutable="no">
        <type>UniTensorType_class</type>
        <definition>UniTensorType_class cytnx::UTenType</definition>
        <argsstring></argsstring>
        <name>UTenType</name>
        <qualifiedname>cytnx::UTenType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/UniTensor_base.cpp" line="23" column="23" bodyfile="src/UniTensor_base.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecytnx_1ab8a79a03fb0465f3eb2641017f3f1755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::zeros</definition>
        <argsstring>(const cytnx_uint64 &amp;Nelem, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>zeros</name>
        <qualifiedname>cytnx::zeros</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>Nelem</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
<para>create an rank-1 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with all the elements are initialized with zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="10" column="10" bodyfile="src/Generator.cpp" bodystart="10" bodyend="15" declfile="include/Generator.hpp" declline="24" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad53947bd87534866b11080f9898d2a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::zeros</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;Nelem, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>zeros</name>
        <qualifiedname>cytnx::zeros</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>Nelem</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
<para>create an <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with all the elements are initialized with zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>the shape of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="16" column="10" bodyfile="src/Generator.cpp" bodystart="16" bodyend="23" declfile="include/Generator.hpp" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1af8aa7e619c030f80c54e4d26b576484b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::identity</definition>
        <argsstring>(const cytnx_uint64 &amp;Dim, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>identity</name>
        <qualifiedname>cytnx::identity</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>Dim</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
<para>create an square rank-2 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with all diagonal to be one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Dim</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of diagonal. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="37" column="10" bodyfile="src/Generator.cpp" bodystart="37" bodyend="40" declfile="include/Generator.hpp" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1affbd9073156ce86d5e5c03742603c631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::eye</definition>
        <argsstring>(const cytnx_uint64 &amp;Dim, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>eye</name>
        <qualifiedname>cytnx::eye</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>Dim</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
<para>create an square rank-2 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with all diagonal to be one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Dim</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension of diagonal. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>]</para>
</simplesect>
Note: This function is a alias of <ref refid="namespacecytnx_1af8aa7e619c030f80c54e4d26b576484b" kindref="member">cytnx::identity()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="41" column="10" bodyfile="src/Generator.cpp" bodystart="41" bodyend="43" declfile="include/Generator.hpp" declline="72" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a83fb7bbe73368751a0d0f535d4a10a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::ones</definition>
        <argsstring>(const cytnx_uint64 &amp;Nelem, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>ones</name>
        <qualifiedname>cytnx::ones</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>Nelem</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
<para>create an rank-1 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with all the elements are initialized with one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="25" column="10" bodyfile="src/Generator.cpp" bodystart="25" bodyend="29" declfile="include/Generator.hpp" declline="88" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a8e80968b20c01c839ea854c398c88ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::ones</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;Nelem, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>ones</name>
        <qualifiedname>cytnx::ones</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>Nelem</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
<para>create an <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with all the elements are initialized with one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>the shape of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="30" column="10" bodyfile="src/Generator.cpp" bodystart="30" bodyend="35" declfile="include/Generator.hpp" declline="102" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a685cf4e94754373ae4f12622b168fb98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::arange</definition>
        <argsstring>(const cytnx_int64 &amp;Nelem)</argsstring>
        <name>arange</name>
        <qualifiedname>cytnx::arange</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &amp;</type>
          <declname>Nelem</declname>
        </param>
        <briefdescription>
<para>create an rank-1 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with incremental unsigned integer elements start with [0,Nelem) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Nelem</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of incremental elements to create.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="75" column="10" bodyfile="src/Generator.cpp" bodystart="75" bodyend="78" declfile="include/Generator.hpp" declline="115" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1add9038b2dc354c3123dc56d5912430e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::arange</definition>
        <argsstring>(const cytnx_double &amp;start, const cytnx_double &amp;end, const cytnx_double &amp;step=1, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>arange</name>
        <qualifiedname>cytnx::arange</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
<para>create an rank-1 <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> with elements defined in range [start,end) with assigned step-size </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the start value of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end value of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>the step-size of the range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the dtype of the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>. It can be any type defined in <ref refid="namespacecytnx_1ac2c6c045a5fd258e21bd0786744839c2" kindref="member">cytnx::Type </ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>the device that the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> is put on. It can be any device defined in <ref refid="namespacecytnx_1a0159aceab8996db3faf89716e4dd6b9a" kindref="member">cytnx::Device </ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref>] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="45" column="10" bodyfile="src/Generator.cpp" bodystart="45" bodyend="74" declfile="include/Generator.hpp" declline="130" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a1d2699133d66fb4140459de8553696df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::linspace</definition>
        <argsstring>(const cytnx_double &amp;start, const cytnx_double &amp;end, const cytnx_uint64 &amp;Nelem, const bool &amp;endpoint=true, const unsigned int &amp;dtype=Type.Double, const int &amp;device=Device.cpu)</argsstring>
        <name>linspace</name>
        <qualifiedname>cytnx::linspace</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a17b847d265f6551b952fd9847198a464" kindref="member">cytnx_double</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>Nelem</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>endpoint</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>dtype</declname>
          <defval>Type.Double</defval>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>device</declname>
          <defval>Device.cpu</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Generator.cpp" line="80" column="10" bodyfile="src/Generator.cpp" bodystart="80" bodyend="108" declfile="include/Generator.hpp" declline="134" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad1f97cdff6a9825441592b906d8ae330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator+</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="15" column="20" declfile="include/linalg.hpp" declline="15" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ac4937c837a6b35b28b4307dfeb2b4e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator+</definition>
        <argsstring>(const T &amp;lc, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="17" column="20" declfile="include/linalg.hpp" declline="17" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ab78b9a88285af588f13175832211e783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator+</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="19" column="20" declfile="include/linalg.hpp" declline="19" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a64cab629757608840015fd955f53f961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator-</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="21" column="20" declfile="include/linalg.hpp" declline="21" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a45878246163ead59e22c8f3d1c0f0a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator-</definition>
        <argsstring>(const T &amp;lc, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="23" column="20" declfile="include/linalg.hpp" declline="23" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a0c3c40f9303eb01914b4739b6957e67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator-</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="25" column="20" declfile="include/linalg.hpp" declline="25" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a0b23c5c933bf53cc25b8e94bf0e8cd80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator*</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="27" column="20" declfile="include/linalg.hpp" declline="27" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a482e868bef211087752942b824114420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator*</definition>
        <argsstring>(const T &amp;lc, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="29" column="20" declfile="include/linalg.hpp" declline="29" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a3c2ff0e0343f0250ca446d1ce5e7e287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator*</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="31" column="20" declfile="include/linalg.hpp" declline="31" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1adf098bf65b5c3fb990065f0df05d087c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator/</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="33" column="20" declfile="include/linalg.hpp" declline="33" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a2dd47e15e5252eff0e727739939ae392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator/</definition>
        <argsstring>(const T &amp;lc, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="35" column="20" declfile="include/linalg.hpp" declline="35" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aef5c2e6d840e287e8f50834be5e1902a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator/</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="37" column="20" declfile="include/linalg.hpp" declline="37" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1acb9f1360d7c413c1e087d3e46b3ff907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator%</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator%</name>
        <qualifiedname>cytnx::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="39" column="20" declfile="include/linalg.hpp" declline="39" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ac4bfb24faa8b3c20005c29043d79ecfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator%</definition>
        <argsstring>(const T &amp;lc, const cytnx::UniTensor &amp;Rt)</argsstring>
        <name>operator%</name>
        <qualifiedname>cytnx::operator%</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="41" column="20" declfile="include/linalg.hpp" declline="41" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a52b81425a33f7550aa8dcc309b98180c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref></type>
        <definition>cytnx::UniTensor cytnx::operator%</definition>
        <argsstring>(const cytnx::UniTensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator%</name>
        <qualifiedname>cytnx::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">cytnx::UniTensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="43" column="20" declfile="include/linalg.hpp" declline="43" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a067e7063e7cc7a80c9c91d8998ab7134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator+</definition>
        <argsstring>(const Tensor &amp;Lt, const Tensor &amp;Rt)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1018" column="10" declfile="include/linalg.hpp" declline="1018" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a75a3787e9b9565f0bc90d19453d1ffa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator+</definition>
        <argsstring>(const T &amp;lc, const Tensor &amp;Rt)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1020" column="10" declfile="include/linalg.hpp" declline="1020" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a9b46a4945621a40fc5e23bbea0576b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator+</definition>
        <argsstring>(const Tensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1022" column="10" declfile="include/linalg.hpp" declline="1022" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5a476408cdb97a10fa2330a5d6b4934c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator-</definition>
        <argsstring>(const Tensor &amp;Lt, const Tensor &amp;Rt)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1025" column="10" declfile="include/linalg.hpp" declline="1025" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a7c7bcfb0e14ec9e5317e686b955ea548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator-</definition>
        <argsstring>(const T &amp;lc, const Tensor &amp;Rt)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1027" column="10" declfile="include/linalg.hpp" declline="1027" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a7c77b1fa99bea6e243e7e1dab2cb15ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator-</definition>
        <argsstring>(const Tensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1029" column="10" declfile="include/linalg.hpp" declline="1029" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad579dd62bafd8261a0192a108b0f4b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator*</definition>
        <argsstring>(const Tensor &amp;Lt, const Tensor &amp;Rt)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1032" column="10" declfile="include/linalg.hpp" declline="1032" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ae1925a88cc713abd7d25ad548b7f7c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator*</definition>
        <argsstring>(const T &amp;lc, const Tensor &amp;Rt)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1034" column="10" declfile="include/linalg.hpp" declline="1034" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5f0900c609bcf28f53091f403d8ea859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator*</definition>
        <argsstring>(const Tensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1036" column="10" declfile="include/linalg.hpp" declline="1036" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aa12ec2394a750ba7e4c29799ec4bd53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator/</definition>
        <argsstring>(const Tensor &amp;Lt, const Tensor &amp;Rt)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1039" column="10" declfile="include/linalg.hpp" declline="1039" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ac0b24a49371fb7bf2fc2992d1271a59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator/</definition>
        <argsstring>(const T &amp;lc, const Tensor &amp;Rt)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1041" column="10" declfile="include/linalg.hpp" declline="1041" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aa0d1098af300b504134953d480d0f780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator/</definition>
        <argsstring>(const Tensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1043" column="10" declfile="include/linalg.hpp" declline="1043" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aef20777a8ac1af257e87abbe1487a789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator%</definition>
        <argsstring>(const Tensor &amp;Lt, const Tensor &amp;Rt)</argsstring>
        <name>operator%</name>
        <qualifiedname>cytnx::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1046" column="10" declfile="include/linalg.hpp" declline="1046" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aa1a0d001adbe36469803a4c9f6d02547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator%</definition>
        <argsstring>(const T &amp;lc, const Tensor &amp;Rt)</argsstring>
        <name>operator%</name>
        <qualifiedname>cytnx::operator%</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1048" column="10" declfile="include/linalg.hpp" declline="1048" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a3c3bc03a795c8c884fbd7a781f2eeea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator%</definition>
        <argsstring>(const Tensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator%</name>
        <qualifiedname>cytnx::operator%</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1050" column="10" declfile="include/linalg.hpp" declline="1050" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a6d2f2c308c9fbe7a791d981aa48ec5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator==</definition>
        <argsstring>(const Tensor &amp;Lt, const Tensor &amp;Rt)</argsstring>
        <name>operator==</name>
        <qualifiedname>cytnx::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1053" column="10" declfile="include/linalg.hpp" declline="1053" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a37e5a46a2493ffec095e247e0a242d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator==</definition>
        <argsstring>(const T &amp;lc, const Tensor &amp;Rt)</argsstring>
        <name>operator==</name>
        <qualifiedname>cytnx::operator==</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1055" column="10" declfile="include/linalg.hpp" declline="1055" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a7c18f8c9b8ce890be3ae8c81c2a05139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator==</definition>
        <argsstring>(const Tensor &amp;Lt, const T &amp;rc)</argsstring>
        <name>operator==</name>
        <qualifiedname>cytnx::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>Lt</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/linalg.hpp" line="1057" column="10" declfile="include/linalg.hpp" declline="1057" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a75ffd11538c5da8c1099d8eab530f802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::ncon</definition>
        <argsstring>(const std::vector&lt; UniTensor &gt; &amp;tensor_list_in, const std::vector&lt; std::vector&lt; cytnx_int64 &gt; &gt; &amp;connect_list_in, const bool check_network=false, const bool optimize=false, std::vector&lt; cytnx_int64 &gt; cont_order=std::vector&lt; cytnx_int64 &gt;(), const std::vector&lt; std::string &gt; &amp;out_labels=std::vector&lt; std::string &gt;())</argsstring>
        <name>ncon</name>
        <qualifiedname>cytnx::ncon</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &gt; &amp;</type>
          <declname>tensor_list_in</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &gt; &amp;</type>
          <declname>connect_list_in</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>check_network</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>optimize</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt;</type>
          <declname>cont_order</declname>
          <defval>std::vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>out_labels</declname>
          <defval>std::vector&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ncon.cpp" line="6" column="13" bodyfile="src/ncon.cpp" bodystart="6" bodyend="108" declfile="include/ncon.hpp" declline="10" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ab3e1596914f6983513861ad4cbdf9375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref></type>
        <definition>Scalar cytnx::operator+</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="17" column="10" bodyfile="src/Scalar.cpp" bodystart="17" bodyend="17" declfile="include/Scalar.hpp" declline="2988" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a32fd545c2269420805699131bd9e7d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref></type>
        <definition>Scalar cytnx::operator*</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="20" column="10" bodyfile="src/Scalar.cpp" bodystart="20" bodyend="20" declfile="include/Scalar.hpp" declline="2991" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a270d4e987bdfcdfc90871ab735e35c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref></type>
        <definition>Scalar cytnx::operator-</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="23" column="10" bodyfile="src/Scalar.cpp" bodystart="23" bodyend="23" declfile="include/Scalar.hpp" declline="2994" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a0d9c5d30b5831c4468056ee0d726b4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref></type>
        <definition>Scalar cytnx::operator/</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="26" column="10" bodyfile="src/Scalar.cpp" bodystart="26" bodyend="26" declfile="include/Scalar.hpp" declline="2997" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1afb17e2be3db0a7224fee92b5b543c088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::operator&lt;</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>cytnx::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="29" column="3" bodyfile="src/Scalar.cpp" bodystart="29" bodyend="29" declfile="include/Scalar.hpp" declline="3000" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad6e0c219f4b50c2844d62f63fac1affc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::operator&gt;</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>cytnx::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="32" column="8" bodyfile="src/Scalar.cpp" bodystart="32" bodyend="32" declfile="include/Scalar.hpp" declline="3003" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a16317e70d05cc2706e7b84837faa018d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::operator&lt;=</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>cytnx::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="35" column="3" bodyfile="src/Scalar.cpp" bodystart="35" bodyend="35" declfile="include/Scalar.hpp" declline="3006" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ae78daf24cc5955bcfda5a25b5a690487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::operator&gt;=</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>cytnx::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="38" column="8" bodyfile="src/Scalar.cpp" bodystart="38" bodyend="38" declfile="include/Scalar.hpp" declline="3009" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1abfc9a1fc4e97169e485b9356928cb46e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cytnx::operator==</definition>
        <argsstring>(const Scalar &amp;lc, const Scalar &amp;rs)</argsstring>
        <name>operator==</name>
        <qualifiedname>cytnx::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lc</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="41" column="8" bodyfile="src/Scalar.cpp" bodystart="41" bodyend="47" declfile="include/Scalar.hpp" declline="3012" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a62c2a328de7efd4452227616e4be8f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref></type>
        <definition>Scalar cytnx::abs</definition>
        <argsstring>(const Scalar &amp;c)</argsstring>
        <name>abs</name>
        <qualifiedname>cytnx::abs</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="49" column="10" bodyfile="src/Scalar.cpp" bodystart="49" bodyend="49" declfile="include/Scalar.hpp" declline="3016" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad1e694c13734841c105386c34d635aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref></type>
        <definition>Scalar cytnx::sqrt</definition>
        <argsstring>(const Scalar &amp;c)</argsstring>
        <name>sqrt</name>
        <qualifiedname>cytnx::sqrt</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="51" column="10" bodyfile="src/Scalar.cpp" bodystart="51" bodyend="51" declfile="include/Scalar.hpp" declline="3017" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a08874470d7cb6bbd3f3bc031403e7e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a401ce1c8c4599b9a1a860e9e225e6b9e" kindref="member">cytnx_complex128</ref></type>
        <definition>cytnx_complex128 cytnx::complex128</definition>
        <argsstring>(const Scalar &amp;in)</argsstring>
        <name>complex128</name>
        <qualifiedname>cytnx::complex128</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="6" column="20" bodyfile="src/Scalar.cpp" bodystart="6" bodyend="6" declfile="include/Scalar.hpp" declline="3020" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aa1c827c6a452e7a7241caf5fa877454a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a63d2515ecaa35660c85571236e61fec7" kindref="member">cytnx_complex64</ref></type>
        <definition>cytnx_complex64 cytnx::complex64</definition>
        <argsstring>(const Scalar &amp;in)</argsstring>
        <name>complex64</name>
        <qualifiedname>cytnx::complex64</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="8" column="19" bodyfile="src/Scalar.cpp" bodystart="8" bodyend="8" declfile="include/Scalar.hpp" declline="3021" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a4aecfe97bd064be86b1e5877cce14203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Scalar &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="10" column="3" bodyfile="src/Scalar.cpp" bodystart="10" bodyend="14" declfile="include/Scalar.hpp" declline="3023" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ae08d53ce62f7d704fd733df5df6fd565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_cd</definition>
        <argsstring>()</argsstring>
        <name>SIInit_cd</name>
        <qualifiedname>cytnx::SIInit_cd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="968" column="31" bodyfile="include/Storage.hpp" bodystart="968" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1acea4faf54c9846c1311e0735ce82909d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_cf</definition>
        <argsstring>()</argsstring>
        <name>SIInit_cf</name>
        <qualifiedname>cytnx::SIInit_cf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="972" column="31" bodyfile="include/Storage.hpp" bodystart="972" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a2b1b0426b83553dda1278c147b4fc8e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_d</definition>
        <argsstring>()</argsstring>
        <name>SIInit_d</name>
        <qualifiedname>cytnx::SIInit_d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="976" column="31" bodyfile="include/Storage.hpp" bodystart="976" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5bbf2d7c52c5e3e16e56b2c118ceb81c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_f</definition>
        <argsstring>()</argsstring>
        <name>SIInit_f</name>
        <qualifiedname>cytnx::SIInit_f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="980" column="31" bodyfile="include/Storage.hpp" bodystart="980" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a3672c0b2c9637179cc63cfdfc9db79a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_u64</definition>
        <argsstring>()</argsstring>
        <name>SIInit_u64</name>
        <qualifiedname>cytnx::SIInit_u64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="984" column="31" bodyfile="include/Storage.hpp" bodystart="984" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a9556df6198f8383c3aea9592d67dacb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_i64</definition>
        <argsstring>()</argsstring>
        <name>SIInit_i64</name>
        <qualifiedname>cytnx::SIInit_i64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="988" column="31" bodyfile="include/Storage.hpp" bodystart="988" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a00c3ac6a8b910dc988571eb8a27e4097" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_u32</definition>
        <argsstring>()</argsstring>
        <name>SIInit_u32</name>
        <qualifiedname>cytnx::SIInit_u32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="992" column="31" bodyfile="include/Storage.hpp" bodystart="992" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a6ad4744e2f38e79a7528a102422e136f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_i32</definition>
        <argsstring>()</argsstring>
        <name>SIInit_i32</name>
        <qualifiedname>cytnx::SIInit_i32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="996" column="31" bodyfile="include/Storage.hpp" bodystart="996" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a504050b0483e1fee18cc71b55954a8fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_u16</definition>
        <argsstring>()</argsstring>
        <name>SIInit_u16</name>
        <qualifiedname>cytnx::SIInit_u16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="1000" column="31" bodyfile="include/Storage.hpp" bodystart="1000" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a65dc912cf9e14560780372c32b8ca173" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_i16</definition>
        <argsstring>()</argsstring>
        <name>SIInit_i16</name>
        <qualifiedname>cytnx::SIInit_i16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="1004" column="31" bodyfile="include/Storage.hpp" bodystart="1004" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aa0b70be99d61c12363c9dec4eb055758" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::intrusive_ptr&lt; Storage_base &gt;</type>
        <definition>boost::intrusive_ptr&lt; Storage_base &gt; cytnx::SIInit_b</definition>
        <argsstring>()</argsstring>
        <name>SIInit_b</name>
        <qualifiedname>cytnx::SIInit_b</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Storage.hpp" line="1008" column="31" bodyfile="include/Storage.hpp" bodystart="1008" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a661de64fc3049c7e954ea8acdf43e647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Symmetry &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Symmetry.hpp" line="375" column="3" declfile="include/Symmetry.hpp" declline="375" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5717588f86189b8687cf9d9596b7a736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator+</definition>
        <argsstring>(const Tensor &amp;lhs, const Tensor::Tproxy &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1344" column="10" bodyfile="src/Tensor.cpp" bodystart="1344" bodyend="1346" declfile="include/Tensor.hpp" declline="1480" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a9c25f8ea46015051abb7aa8b12d4d922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator-</definition>
        <argsstring>(const Tensor &amp;lhs, const Tensor::Tproxy &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1347" column="10" bodyfile="src/Tensor.cpp" bodystart="1347" bodyend="1349" declfile="include/Tensor.hpp" declline="1481" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a907f550960d7cff3629b034496c7277f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator*</definition>
        <argsstring>(const Tensor &amp;lhs, const Tensor::Tproxy &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1350" column="10" bodyfile="src/Tensor.cpp" bodystart="1350" bodyend="1352" declfile="include/Tensor.hpp" declline="1482" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a1b5dcab529a34545c0202175cacee982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator/</definition>
        <argsstring>(const Tensor &amp;lhs, const Tensor::Tproxy &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1353" column="10" bodyfile="src/Tensor.cpp" bodystart="1353" bodyend="1355" declfile="include/Tensor.hpp" declline="1483" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a78e2a1032003b1961fa67dfaa6c9ae5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator+</definition>
        <argsstring>(const Tensor &amp;lhs, const Scalar::Sproxy &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>cytnx::operator+</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1359" column="10" bodyfile="src/Tensor.cpp" bodystart="1359" bodyend="1361" declfile="include/Tensor.hpp" declline="1485" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ade8c4e81459b4136aac831ae6b15f322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator-</definition>
        <argsstring>(const Tensor &amp;lhs, const Scalar::Sproxy &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>cytnx::operator-</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1362" column="10" bodyfile="src/Tensor.cpp" bodystart="1362" bodyend="1364" declfile="include/Tensor.hpp" declline="1486" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a6e943792e9aa2cadc156eb88459132ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator*</definition>
        <argsstring>(const Tensor &amp;lhs, const Scalar::Sproxy &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>cytnx::operator*</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1365" column="10" bodyfile="src/Tensor.cpp" bodystart="1365" bodyend="1367" declfile="include/Tensor.hpp" declline="1487" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a39c7b16c06135b1de3ac699d74511ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor cytnx::operator/</definition>
        <argsstring>(const Tensor &amp;lhs, const Scalar::Sproxy &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>cytnx::operator/</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1368" column="10" bodyfile="src/Tensor.cpp" bodystart="1368" bodyend="1370" declfile="include/Tensor.hpp" declline="1488" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a060c9b30478d73528fdf376029327c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Tensor &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="838" column="3" bodyfile="src/Tensor.cpp" bodystart="838" bodyend="844" declfile="include/Tensor.hpp" declline="1490" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5e06464778dbabcc50ac9afe5799447c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Tensor::Tproxy &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="845" column="3" bodyfile="src/Tensor.cpp" bodystart="845" bodyend="848" declfile="include/Tensor.hpp" declline="1491" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a4062a3955eae17ae174ec7ac26d56508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cytnx::type_promote</definition>
        <argsstring>(const int &amp;typeL, const int &amp;typeR)</argsstring>
        <name>type_promote</name>
        <qualifiedname>cytnx::type_promote</qualifiedname>
        <param>
          <type>const int &amp;</type>
          <declname>typeL</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>typeR</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Type.hpp" line="164" column="7" declfile="include/Type.hpp" declline="164" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a6bf4d5dbc0c159db72ff3019ca8125f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::Contract</definition>
        <argsstring>(const UniTensor &amp;inL, const UniTensor &amp;inR, const bool &amp;cacheL=false, const bool &amp;cacheR=false)</argsstring>
        <name>Contract</name>
        <qualifiedname>cytnx::Contract</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>inL</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>inR</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>cacheL</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>cacheR</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Contract two <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> by tracing the ranks with common labels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inL</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> #1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inR</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> #2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cacheL</parametername>
</parameternamelist>
<parameterdescription>
<para>if the inL should be contiguous align after calling </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cacheR</parametername>
</parameternamelist>
<parameterdescription>
<para>if the inR should be contiguous align after calling </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>]</para>
</simplesect>
See also <ref refid="classcytnx_1_1UniTensor_1abb9e74ecee1a85af02b7f2a8e835c969" kindref="member">UniTensor.contract </ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/UniTensor_base.cpp" line="591" column="13" bodyfile="src/UniTensor_base.cpp" bodystart="591" bodyend="594" declfile="include/UniTensor.hpp" declline="3471" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1af94fa1daba0c96f77221422375a22a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::Contracts</definition>
        <argsstring>(const std::vector&lt; UniTensor &gt; &amp;TNs)</argsstring>
        <name>Contracts</name>
        <qualifiedname>cytnx::Contracts</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &gt; &amp;</type>
          <declname>TNs</declname>
        </param>
        <briefdescription>
<para>Contract multiple <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> by tracing the ranks with common labels with pairwise operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>TNs</parametername>
</parameternamelist>
<parameterdescription>
<para>the Tensors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>]</para>
</simplesect>
See also <ref refid="classcytnx_1_1UniTensor_1abb9e74ecee1a85af02b7f2a8e835c969" kindref="member">UniTensor.contract </ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/UniTensor_base.cpp" line="598" column="13" bodyfile="src/UniTensor_base.cpp" bodystart="598" bodyend="608" declfile="include/UniTensor.hpp" declline="3484" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad6facb0d43db30427de7545cbcc96b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref></type>
        <definition>UniTensor cytnx::Contracts</definition>
        <argsstring>(const UniTensor &amp;in, const T &amp;...args)</argsstring>
        <name>Contracts</name>
        <qualifiedname>cytnx::Contracts</qualifiedname>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const T &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Contract multiple <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> by tracing the ranks with common labels with pairwise operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>the Tensors. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the Tensors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[<ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref>]</para>
</simplesect>
See also <ref refid="classcytnx_1_1UniTensor_1abb9e74ecee1a85af02b7f2a8e835c969" kindref="member">UniTensor.contract </ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/UniTensor.hpp" line="3507" column="13" bodyfile="include/UniTensor.hpp" bodystart="3507" bodyend="3511"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ab92ffe2f145d89e093ffd90069fdd1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Accessor &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Accessor" kindref="compound">Accessor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Accessor.cpp" line="244" column="3" bodyfile="src/Accessor.cpp" bodystart="244" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1adf7e494ecc90887a3295ea5c53db9353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::beauty_print_block</definition>
        <argsstring>(std::ostream &amp;os, const cytnx_uint64 &amp;Nin, const cytnx_uint64 &amp;Nout, const std::vector&lt; cytnx_uint64 &gt; &amp;qn_indices, const std::vector&lt; Bond &gt; &amp;bonds, const Tensor &amp;block)</argsstring>
        <name>beauty_print_block</name>
        <qualifiedname>cytnx::beauty_print_block</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>Nin</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>Nout</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>qn_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bonds</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/BlockUniTensor.cpp" line="200" column="8" bodyfile="src/BlockUniTensor.cpp" bodystart="200" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aed919b7480399bc4fad171dbc64cca99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Bond &amp;bin)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Bond.cpp" line="739" column="3" bodyfile="src/Bond.cpp" bodystart="739" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a0c444b435173ccd09f949c68cf2181d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Gncon &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Gncon" kindref="compound">Gncon</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Gncon.cpp" line="29" column="3" bodyfile="src/Gncon.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5fc03a716454c63b6df81602798c26c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Network &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Network" kindref="compound">Network</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Network.cpp" line="23" column="3" bodyfile="src/Network.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a9af9e260e48a3abe4ff869f90d598508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_parse_task_line_</definition>
        <argsstring>(string line, vector&lt; vector&lt; pair&lt; string, string &gt; &gt; &gt; &amp;table, vector&lt; std::string &gt; &amp;names, map&lt; string, cytnx_uint64 &gt; &amp;name2pos, int i)</argsstring>
        <name>_parse_task_line_</name>
        <qualifiedname>cytnx::_parse_task_line_</qualifiedname>
        <param>
          <type>string</type>
          <declname>line</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; pair&lt; string, string &gt; &gt; &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>map&lt; string, <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>name2pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularGncon.cpp" line="14" column="8" bodyfile="src/RegularGncon.cpp" bodystart="14" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a2cebbfbcc79966555a422f62604fecf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_parse_ORDER_line_</definition>
        <argsstring>(vector&lt; string &gt; &amp;tokens, const string &amp;line, const cytnx_uint64 &amp;line_num)</argsstring>
        <name>_parse_ORDER_line_</name>
        <qualifiedname>cytnx::_parse_ORDER_line_</qualifiedname>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>line_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularGncon.cpp" line="54" column="8" bodyfile="src/RegularGncon.cpp" bodystart="54" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a6792b28d2e9d02c67ff863de5cdf006f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_parse_TOUT_line_</definition>
        <argsstring>(vector&lt; cytnx_int64 &gt; &amp;lbls, cytnx_uint64 &amp;TOUT_iBondNum, vector&lt; vector&lt; pair&lt; string, string &gt; &gt; &gt; &amp;table, map&lt; string, cytnx_uint64 &gt; name2pos, const string &amp;line, const cytnx_uint64 &amp;line_num)</argsstring>
        <name>_parse_TOUT_line_</name>
        <qualifiedname>cytnx::_parse_TOUT_line_</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>lbls</declname>
        </param>
        <param>
          <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>TOUT_iBondNum</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; pair&lt; string, string &gt; &gt; &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>map&lt; string, <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt;</type>
          <declname>name2pos</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>line_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularGncon.cpp" line="75" column="8" bodyfile="src/RegularGncon.cpp" bodystart="75" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a840d1bc0c881c1d15f69058d487a48c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::tri</definition>
        <argsstring>(const char *text)</argsstring>
        <name>tri</name>
        <qualifiedname>cytnx::tri</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>This is debug function for printing special characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularGncon.cpp" line="130" column="8" bodyfile="src/RegularGncon.cpp" bodystart="130" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad6400ff50fc4fc6c55cb8a444eaa8be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::print_gn</definition>
        <argsstring>(std::vector&lt; vector&lt; pair&lt; string, string &gt; &gt; &gt; &amp;table, vector&lt; string &gt; &amp;names, map&lt; string, cytnx_uint64 &gt; &amp;name2pos)</argsstring>
        <name>print_gn</name>
        <qualifiedname>cytnx::print_gn</qualifiedname>
        <param>
          <type>std::vector&lt; vector&lt; pair&lt; string, string &gt; &gt; &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>map&lt; string, <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>name2pos</declname>
        </param>
        <briefdescription>
<para>This is debug function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularGncon.cpp" line="163" column="8" bodyfile="src/RegularGncon.cpp" bodystart="163" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5b77076cdc29a3c48d44c2abf3ded4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_parse_TN_line_</definition>
        <argsstring>(vector&lt; cytnx_int64 &gt; &amp;lbls, cytnx_uint64 &amp;TN_iBondNum, const string line, const int line_num)</argsstring>
        <name>_parse_TN_line_</name>
        <qualifiedname>cytnx::_parse_TN_line_</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="namespacecytnx_1aa7b7ff4d6d244994d35853a6ce547587" kindref="member">cytnx_int64</ref> &gt; &amp;</type>
          <declname>lbls</declname>
        </param>
        <param>
          <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>TN_iBondNum</declname>
        </param>
        <param>
          <type>const string</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>line_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularGncon.cpp" line="176" column="8" bodyfile="src/RegularGncon.cpp" bodystart="176" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a3c6011e30d0425fc421e0f59c38ee297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_extract_TNs_from_ORDER_</definition>
        <argsstring>(vector&lt; string &gt; &amp;TN_names, const vector&lt; string &gt; &amp;tokens)</argsstring>
        <name>_extract_TNs_from_ORDER_</name>
        <qualifiedname>cytnx::_extract_TNs_from_ORDER_</qualifiedname>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>TN_names</declname>
        </param>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularGncon.cpp" line="223" column="8" bodyfile="src/RegularGncon.cpp" bodystart="223" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1afff9f6e47b064e2b84fbb18242bda1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_parse_TOUT_line_</definition>
        <argsstring>(vector&lt; std::string &gt; &amp;lbls, cytnx_uint64 &amp;TOUT_iBondNum, const string &amp;line, const cytnx_uint64 &amp;line_num)</argsstring>
        <name>_parse_TOUT_line_</name>
        <qualifiedname>cytnx::_parse_TOUT_line_</qualifiedname>
        <param>
          <type>vector&lt; std::string &gt; &amp;</type>
          <declname>lbls</declname>
        </param>
        <param>
          <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>TOUT_iBondNum</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>line_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularNetwork.cpp" line="34" column="8" bodyfile="src/RegularNetwork.cpp" bodystart="34" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aa648c1288049ada53ef053c492804ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_parse_TN_line_</definition>
        <argsstring>(vector&lt; string &gt; &amp;lbls, cytnx_uint64 &amp;TN_iBondNum, const string &amp;line, const cytnx_uint64 &amp;line_num)</argsstring>
        <name>_parse_TN_line_</name>
        <qualifiedname>cytnx::_parse_TN_line_</qualifiedname>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>lbls</declname>
        </param>
        <param>
          <type><ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>TN_iBondNum</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>line_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/RegularNetwork.cpp" line="106" column="8" bodyfile="src/RegularNetwork.cpp" bodystart="106" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a1d2455d5449579d99f829e73d1d2a654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_cd</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_cd</name>
        <qualifiedname>cytnx::ScIInit_cd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="145" column="15" bodyfile="src/Scalar.cpp" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a03447317a2f1ee58626d91cbab891b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_cf</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_cf</name>
        <qualifiedname>cytnx::ScIInit_cf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="149" column="15" bodyfile="src/Scalar.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a791652e6b9619e3de86844a89c7d6dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_d</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_d</name>
        <qualifiedname>cytnx::ScIInit_d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="153" column="15" bodyfile="src/Scalar.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aaca9dd7b95cf6b2998c0c50417fa5793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_f</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_f</name>
        <qualifiedname>cytnx::ScIInit_f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="157" column="15" bodyfile="src/Scalar.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a86afae94fcbdcd767357d7fe0d16a0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_u64</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_u64</name>
        <qualifiedname>cytnx::ScIInit_u64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="161" column="15" bodyfile="src/Scalar.cpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a0ba7dc097632c5eae71f3fa065b6ea7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_i64</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_i64</name>
        <qualifiedname>cytnx::ScIInit_i64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="165" column="15" bodyfile="src/Scalar.cpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a908652dbfe6247d59ce4abef9f696b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_u32</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_u32</name>
        <qualifiedname>cytnx::ScIInit_u32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="169" column="15" bodyfile="src/Scalar.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a087e6389cfcb68e1ff879d86715bcc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_i32</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_i32</name>
        <qualifiedname>cytnx::ScIInit_i32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="173" column="15" bodyfile="src/Scalar.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ad9e3c283902b59a3532cc9dc93b846e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_u16</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_u16</name>
        <qualifiedname>cytnx::ScIInit_u16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="177" column="15" bodyfile="src/Scalar.cpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ae8820c01741da79051807b1a90ef4747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_i16</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_i16</name>
        <qualifiedname>cytnx::ScIInit_i16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="181" column="15" bodyfile="src/Scalar.cpp" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a215131c1f920f2c64ec703b8fd69b2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Scalar_base *</type>
        <definition>Scalar_base * cytnx::ScIInit_b</definition>
        <argsstring>()</argsstring>
        <name>ScIInit_b</name>
        <qualifiedname>cytnx::ScIInit_b</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Scalar.cpp" line="185" column="15" bodyfile="src/Scalar.cpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a1d3b4464330ff6cb6e5de4f02b6e6382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecytnx_1a456fea0ea7baaa151496b24424829253" kindref="member">cytnx_float</ref></type>
        <definition>cytnx_float cytnx::get_cost</definition>
        <argsstring>(const PsudoUniTensor &amp;t1, const PsudoUniTensor &amp;t2)</argsstring>
        <name>get_cost</name>
        <qualifiedname>cytnx::get_cost</qualifiedname>
        <param>
          <type>const PsudoUniTensor &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>const PsudoUniTensor &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/search_tree.cpp" line="8" column="15" bodyfile="src/search_tree.cpp" bodystart="8" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a701f557bac32b93a3ae0d9a57619dbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PsudoUniTensor</type>
        <definition>PsudoUniTensor cytnx::pContract</definition>
        <argsstring>(PsudoUniTensor &amp;t1, PsudoUniTensor &amp;t2)</argsstring>
        <name>pContract</name>
        <qualifiedname>cytnx::pContract</qualifiedname>
        <param>
          <type>PsudoUniTensor &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>PsudoUniTensor &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/search_tree.cpp" line="30" column="18" bodyfile="src/search_tree.cpp" bodystart="30" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1aed90633aa76f51e5aa41dd20f73c2372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt;</type>
        <definition>std::vector&lt; cytnx_uint64 &gt; cytnx::_locator_to_inner_ij</definition>
        <argsstring>(const std::vector&lt; cytnx_uint64 &gt; &amp;locator, const std::vector&lt; cytnx_uint64 &gt; &amp;current_shape, const cytnx_uint64 &amp;inner_rowrank, const std::vector&lt; cytnx_uint64 &gt; &amp;inv_mapper)</argsstring>
        <name>_locator_to_inner_ij</name>
        <qualifiedname>cytnx::_locator_to_inner_ij</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>locator</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>current_shape</declname>
        </param>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>inner_rowrank</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &gt; &amp;</type>
          <declname>inv_mapper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/SparseUniTensor.cpp" line="965" column="15" bodyfile="src/SparseUniTensor.cpp" bodystart="965" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ab19ada79496832d3b059f8f282eaee1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Storage &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Storage" kindref="compound">Storage</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage.cpp" line="14" column="3" bodyfile="src/Storage.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a4e574d6fa0a18ad91be4d3ff6eccbb75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; double &gt; *</type>
        <definition>std::complex&lt; double &gt; * cytnx::Storage_base::data&lt; std::complex&lt; double &gt; &gt;</definition>
        <argsstring>() const</argsstring>
        <name>Storage_base::data&lt; std::complex&lt; double &gt; &gt;</name>
        <qualifiedname>cytnx::data&lt; std::complex&lt; double &gt; &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage_base.cpp" line="521" column="3" bodyfile="src/Storage_base.cpp" bodystart="532" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a048159f6be893d4f5142428c825bf1ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; float &gt; *</type>
        <definition>std::complex&lt; float &gt; * cytnx::Storage_base::data&lt; std::complex&lt; float &gt; &gt;</definition>
        <argsstring>() const</argsstring>
        <name>Storage_base::data&lt; std::complex&lt; float &gt; &gt;</name>
        <qualifiedname>cytnx::data&lt; std::complex&lt; float &gt; &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage_base.cpp" line="521" column="3" bodyfile="src/Storage_base.cpp" bodystart="547" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1afe309612adcd79d02be7cee13a124e08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; float &gt; &amp;</type>
        <definition>std::complex&lt; float &gt; &amp; cytnx::Storage_base::at&lt; std::complex&lt; float &gt; &gt;</definition>
        <argsstring>(const cytnx_uint64 &amp;idx) const</argsstring>
        <name>Storage_base::at&lt; std::complex&lt; float &gt; &gt;</name>
        <qualifiedname>cytnx::at&lt; std::complex&lt; float &gt; &gt;</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage_base.cpp" line="685" column="3" bodyfile="src/Storage_base.cpp" bodystart="701" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a8a3f6780f6f8adfab8a50b8d6fb65b90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; double &gt; &amp;</type>
        <definition>std::complex&lt; double &gt; &amp; cytnx::Storage_base::at&lt; std::complex&lt; double &gt; &gt;</definition>
        <argsstring>(const cytnx_uint64 &amp;idx) const</argsstring>
        <name>Storage_base::at&lt; std::complex&lt; double &gt; &gt;</name>
        <qualifiedname>cytnx::at&lt; std::complex&lt; double &gt; &gt;</qualifiedname>
        <param>
          <type>const <ref refid="namespacecytnx_1a9a7ab808c7cbef775461ccc31eaabeb4" kindref="member">cytnx_uint64</ref> &amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage_base.cpp" line="685" column="3" bodyfile="src/Storage_base.cpp" bodystart="717" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ac09a8ce8c6012acb7ed3a31f70064798" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; float &gt; &amp;</type>
        <definition>std::complex&lt; float &gt; &amp; cytnx::Storage_base::back&lt; std::complex&lt; float &gt; &gt;</definition>
        <argsstring>() const</argsstring>
        <name>Storage_base::back&lt; std::complex&lt; float &gt; &gt;</name>
        <qualifiedname>cytnx::back&lt; std::complex&lt; float &gt; &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage_base.cpp" line="855" column="3" bodyfile="src/Storage_base.cpp" bodystart="867" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1add5a3f1186edbd83fa5abbc07e89fa34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::complex&lt; double &gt; &amp;</type>
        <definition>std::complex&lt; double &gt; &amp; cytnx::Storage_base::back&lt; std::complex&lt; double &gt; &gt;</definition>
        <argsstring>() const</argsstring>
        <name>Storage_base::back&lt; std::complex&lt; double &gt; &gt;</name>
        <qualifiedname>cytnx::back&lt; std::complex&lt; double &gt; &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Storage_base.cpp" line="855" column="3" bodyfile="src/Storage_base.cpp" bodystart="881" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1af81474f8ce93b3c62309be26db62936e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const Symmetry &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1Symmetry" kindref="compound">Symmetry</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Symmetry.cpp" line="244" column="3" bodyfile="src/Symmetry.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a13e4ef2de4596804a472c4a0878329e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=&lt;Tensor::Tproxy &gt;</definition>
        <argsstring>(const Tensor::Tproxy &amp;rc)</argsstring>
        <name>Tensor::operator+=&lt;Tensor::Tproxy &gt;</name>
        <qualifiedname>cytnx::operator+=&lt;Tensor::Tproxy &gt;</qualifiedname>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="991" column="10" bodyfile="src/Tensor.cpp" bodystart="991" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1af4b2a951a58fe2622fa9025452222868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator+=&lt;Scalar::Sproxy &gt;</definition>
        <argsstring>(const Scalar::Sproxy &amp;rc)</argsstring>
        <name>Tensor::operator+=&lt;Scalar::Sproxy &gt;</name>
        <qualifiedname>cytnx::operator+=&lt;Scalar::Sproxy &gt;</qualifiedname>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1056" column="10" bodyfile="src/Tensor.cpp" bodystart="1056" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a5e16274b93902fe2c8eefcc194dbce0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=&lt;Tensor::Tproxy &gt;</definition>
        <argsstring>(const Tensor::Tproxy &amp;rc)</argsstring>
        <name>Tensor::operator-=&lt;Tensor::Tproxy &gt;</name>
        <qualifiedname>cytnx::operator-=&lt;Tensor::Tproxy &gt;</qualifiedname>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1066" column="10" bodyfile="src/Tensor.cpp" bodystart="1066" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1abd4ceb5cdaa37f99ac646d4667932190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator-=&lt;Scalar::Sproxy &gt;</definition>
        <argsstring>(const Scalar::Sproxy &amp;rc)</argsstring>
        <name>Tensor::operator-=&lt;Scalar::Sproxy &gt;</name>
        <qualifiedname>cytnx::operator-=&lt;Scalar::Sproxy &gt;</qualifiedname>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1131" column="10" bodyfile="src/Tensor.cpp" bodystart="1131" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1af391fb8e8eeffc95f6fe56e6934312fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=&lt;Tensor::Tproxy &gt;</definition>
        <argsstring>(const Tensor::Tproxy &amp;rc)</argsstring>
        <name>Tensor::operator*=&lt;Tensor::Tproxy &gt;</name>
        <qualifiedname>cytnx::operator*=&lt;Tensor::Tproxy &gt;</qualifiedname>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1141" column="10" bodyfile="src/Tensor.cpp" bodystart="1141" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a9dc14284c65dd47c895b26ce4f508060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator*=&lt;Scalar::Sproxy &gt;</definition>
        <argsstring>(const Scalar::Sproxy &amp;rc)</argsstring>
        <name>Tensor::operator*=&lt;Scalar::Sproxy &gt;</name>
        <qualifiedname>cytnx::operator*=&lt;Scalar::Sproxy &gt;</qualifiedname>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1206" column="10" bodyfile="src/Tensor.cpp" bodystart="1206" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a3a3a8540f9139d229bd6c7667a2f74f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=&lt;Tensor::Tproxy &gt;</definition>
        <argsstring>(const Tensor::Tproxy &amp;rc)</argsstring>
        <name>Tensor::operator/=&lt;Tensor::Tproxy &gt;</name>
        <qualifiedname>cytnx::operator/=&lt;Tensor::Tproxy &gt;</qualifiedname>
        <param>
          <type>const Tensor::Tproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1217" column="10" bodyfile="src/Tensor.cpp" bodystart="1217" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a8ccf28fd6471d2790c87267dcbcf1702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classcytnx_1_1Tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; cytnx::Tensor::operator/=&lt;Scalar::Sproxy &gt;</definition>
        <argsstring>(const Scalar::Sproxy &amp;rc)</argsstring>
        <name>Tensor::operator/=&lt;Scalar::Sproxy &gt;</name>
        <qualifiedname>cytnx::operator/=&lt;Scalar::Sproxy &gt;</qualifiedname>
        <param>
          <type>const Scalar::Sproxy &amp;</type>
          <declname>rc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Tensor.cpp" line="1283" column="10" bodyfile="src/Tensor.cpp" bodystart="1283" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1ae0cde2fca38c0834000f7a39ca6bdd17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; cytnx::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const UniTensor &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>cytnx::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/UniTensor_base.cpp" line="586" column="3" bodyfile="src/UniTensor_base.cpp" bodystart="586" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="namespacecytnx_1a8e2d220e56b7379ffa9eb625da52d1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cytnx::_resolve_CT</definition>
        <argsstring>(std::vector&lt; UniTensor &gt; &amp;TNlist)</argsstring>
        <name>_resolve_CT</name>
        <qualifiedname>cytnx::_resolve_CT</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classcytnx_1_1UniTensor" kindref="compound">UniTensor</ref> &gt; &amp;</type>
          <declname>TNlist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/UniTensor_base.cpp" line="597" column="8" bodyfile="src/UniTensor_base.cpp" bodystart="597" bodyend="597"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="python_doc/Network_misc.hpp" line="1" column="1"/>
  </compounddef>
</doxygen>
